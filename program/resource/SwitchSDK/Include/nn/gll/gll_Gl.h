/*--------------------------------------------------------------------------------*
  Copyright (C)Nintendo All rights reserved.

  These coded instructions, statements, and computer programs contain proprietary
  information of Nintendo and/or its licensed developers and are protected by
  national and international copyright laws. They may not be disclosed to third
  parties or copied or duplicated in any form, in whole or in part, without the
  prior written consent of Nintendo.

  The content herein is highly confidential and should be handled accordingly.
 *--------------------------------------------------------------------------------*/

/**
* @file gll_Gl.h
*/

#pragma once

#include <stddef.h>

#include <nn/nn_Macro.h>

#if defined( __gl_h_ ) || defined( __GL_H_ )
    #error Please include this file before "gl.h"
#endif

#define __gl_h_
#define __GL_H_

#if defined( NN_BUILD_CONFIG_OS_WIN32 )
    #include <nn/nn_Windows.h>
    #define NN_GLL_GL_APIENTRY APIENTRY
    #define NN_GLL_GL_API WINGDIAPI
#endif

#if !defined( NN_GLL_GL_APIENTRY )
    #define NN_GLL_GL_APIENTRY
#endif
#if !defined( NN_GLL_GL_API )
    #define NN_GLL_GL_API
#endif

#include <nn/gll/gll_Common.h>

#ifdef __cplusplus
extern "C" {
#endif

NN_GLL_API nngllResult nngllInitializeGl() NN_NOEXCEPT;

#if !defined(GL_VERSION_1_0)
#define GL_VERSION_1_0

// Not an actual GL type, though used in headers in the past
typedef void GLvoid;
typedef unsigned int GLenum;
typedef float GLfloat;
typedef int GLint;
typedef int GLsizei;
typedef unsigned int GLbitfield;
typedef double GLdouble;
typedef unsigned int GLuint;
typedef unsigned char GLboolean;
typedef unsigned char GLubyte;
typedef signed char GLbyte;
typedef short GLshort;
typedef unsigned short GLushort;
#define GL_DEPTH_BUFFER_BIT 0x00000100 // NOLINT
#define GL_STENCIL_BUFFER_BIT 0x00000400 // NOLINT
#define GL_COLOR_BUFFER_BIT 0x00004000 // NOLINT
#define GL_FALSE 0 // NOLINT
#define GL_TRUE 1 // NOLINT
#define GL_POINTS 0x0000 // NOLINT
#define GL_LINES 0x0001 // NOLINT
#define GL_LINE_LOOP 0x0002 // NOLINT
#define GL_LINE_STRIP 0x0003 // NOLINT
#define GL_TRIANGLES 0x0004 // NOLINT
#define GL_TRIANGLE_STRIP 0x0005 // NOLINT
#define GL_TRIANGLE_FAN 0x0006 // NOLINT
#define GL_QUADS 0x0007 // NOLINT
#define GL_NEVER 0x0200 // NOLINT
#define GL_LESS 0x0201 // NOLINT
#define GL_EQUAL 0x0202 // NOLINT
#define GL_LEQUAL 0x0203 // NOLINT
#define GL_GREATER 0x0204 // NOLINT
#define GL_NOTEQUAL 0x0205 // NOLINT
#define GL_GEQUAL 0x0206 // NOLINT
#define GL_ALWAYS 0x0207 // NOLINT
#define GL_ZERO 0 // NOLINT
#define GL_ONE 1 // NOLINT
#define GL_SRC_COLOR 0x0300 // NOLINT
#define GL_ONE_MINUS_SRC_COLOR 0x0301 // NOLINT
#define GL_SRC_ALPHA 0x0302 // NOLINT
#define GL_ONE_MINUS_SRC_ALPHA 0x0303 // NOLINT
#define GL_DST_ALPHA 0x0304 // NOLINT
#define GL_ONE_MINUS_DST_ALPHA 0x0305 // NOLINT
#define GL_DST_COLOR 0x0306 // NOLINT
#define GL_ONE_MINUS_DST_COLOR 0x0307 // NOLINT
#define GL_SRC_ALPHA_SATURATE 0x0308 // NOLINT
#define GL_NONE 0 // NOLINT
#define GL_FRONT_LEFT 0x0400 // NOLINT
#define GL_FRONT_RIGHT 0x0401 // NOLINT
#define GL_BACK_LEFT 0x0402 // NOLINT
#define GL_BACK_RIGHT 0x0403 // NOLINT
#define GL_FRONT 0x0404 // NOLINT
#define GL_BACK 0x0405 // NOLINT
#define GL_LEFT 0x0406 // NOLINT
#define GL_RIGHT 0x0407 // NOLINT
#define GL_FRONT_AND_BACK 0x0408 // NOLINT
#define GL_NO_ERROR 0 // NOLINT
#define GL_INVALID_ENUM 0x0500 // NOLINT
#define GL_INVALID_VALUE 0x0501 // NOLINT
#define GL_INVALID_OPERATION 0x0502 // NOLINT
#define GL_OUT_OF_MEMORY 0x0505 // NOLINT
#define GL_CW 0x0900 // NOLINT
#define GL_CCW 0x0901 // NOLINT
#define GL_POINT_SIZE 0x0B11 // NOLINT
#define GL_POINT_SIZE_RANGE 0x0B12 // NOLINT
#define GL_POINT_SIZE_GRANULARITY 0x0B13 // NOLINT
#define GL_LINE_SMOOTH 0x0B20 // NOLINT
#define GL_LINE_WIDTH 0x0B21 // NOLINT
#define GL_LINE_WIDTH_RANGE 0x0B22 // NOLINT
#define GL_LINE_WIDTH_GRANULARITY 0x0B23 // NOLINT
#define GL_POLYGON_MODE 0x0B40 // NOLINT
#define GL_POLYGON_SMOOTH 0x0B41 // NOLINT
#define GL_CULL_FACE 0x0B44 // NOLINT
#define GL_CULL_FACE_MODE 0x0B45 // NOLINT
#define GL_FRONT_FACE 0x0B46 // NOLINT
#define GL_DEPTH_RANGE 0x0B70 // NOLINT
#define GL_DEPTH_TEST 0x0B71 // NOLINT
#define GL_DEPTH_WRITEMASK 0x0B72 // NOLINT
#define GL_DEPTH_CLEAR_VALUE 0x0B73 // NOLINT
#define GL_DEPTH_FUNC 0x0B74 // NOLINT
#define GL_STENCIL_TEST 0x0B90 // NOLINT
#define GL_STENCIL_CLEAR_VALUE 0x0B91 // NOLINT
#define GL_STENCIL_FUNC 0x0B92 // NOLINT
#define GL_STENCIL_VALUE_MASK 0x0B93 // NOLINT
#define GL_STENCIL_FAIL 0x0B94 // NOLINT
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95 // NOLINT
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96 // NOLINT
#define GL_STENCIL_REF 0x0B97 // NOLINT
#define GL_STENCIL_WRITEMASK 0x0B98 // NOLINT
#define GL_VIEWPORT 0x0BA2 // NOLINT
#define GL_DITHER 0x0BD0 // NOLINT
#define GL_BLEND_DST 0x0BE0 // NOLINT
#define GL_BLEND_SRC 0x0BE1 // NOLINT
#define GL_BLEND 0x0BE2 // NOLINT
#define GL_LOGIC_OP_MODE 0x0BF0 // NOLINT
#define GL_DRAW_BUFFER 0x0C01 // NOLINT
#define GL_READ_BUFFER 0x0C02 // NOLINT
#define GL_SCISSOR_BOX 0x0C10 // NOLINT
#define GL_SCISSOR_TEST 0x0C11 // NOLINT
#define GL_COLOR_CLEAR_VALUE 0x0C22 // NOLINT
#define GL_COLOR_WRITEMASK 0x0C23 // NOLINT
#define GL_DOUBLEBUFFER 0x0C32 // NOLINT
#define GL_STEREO 0x0C33 // NOLINT
#define GL_LINE_SMOOTH_HINT 0x0C52 // NOLINT
#define GL_POLYGON_SMOOTH_HINT 0x0C53 // NOLINT
#define GL_UNPACK_SWAP_BYTES 0x0CF0 // NOLINT
#define GL_UNPACK_LSB_FIRST 0x0CF1 // NOLINT
#define GL_UNPACK_ROW_LENGTH 0x0CF2 // NOLINT
#define GL_UNPACK_SKIP_ROWS 0x0CF3 // NOLINT
#define GL_UNPACK_SKIP_PIXELS 0x0CF4 // NOLINT
#define GL_UNPACK_ALIGNMENT 0x0CF5 // NOLINT
#define GL_PACK_SWAP_BYTES 0x0D00 // NOLINT
#define GL_PACK_LSB_FIRST 0x0D01 // NOLINT
#define GL_PACK_ROW_LENGTH 0x0D02 // NOLINT
#define GL_PACK_SKIP_ROWS 0x0D03 // NOLINT
#define GL_PACK_SKIP_PIXELS 0x0D04 // NOLINT
#define GL_PACK_ALIGNMENT 0x0D05 // NOLINT
#define GL_MAX_TEXTURE_SIZE 0x0D33 // NOLINT
#define GL_MAX_VIEWPORT_DIMS 0x0D3A // NOLINT
#define GL_SUBPIXEL_BITS 0x0D50 // NOLINT
#define GL_TEXTURE_1D 0x0DE0 // NOLINT
#define GL_TEXTURE_2D 0x0DE1 // NOLINT
#define GL_TEXTURE_WIDTH 0x1000 // NOLINT
#define GL_TEXTURE_HEIGHT 0x1001 // NOLINT
#define GL_TEXTURE_BORDER_COLOR 0x1004 // NOLINT
#define GL_DONT_CARE 0x1100 // NOLINT
#define GL_FASTEST 0x1101 // NOLINT
#define GL_NICEST 0x1102 // NOLINT
#define GL_BYTE 0x1400 // NOLINT
#define GL_UNSIGNED_BYTE 0x1401 // NOLINT
#define GL_SHORT 0x1402 // NOLINT
#define GL_UNSIGNED_SHORT 0x1403 // NOLINT
#define GL_INT 0x1404 // NOLINT
#define GL_UNSIGNED_INT 0x1405 // NOLINT
#define GL_FLOAT 0x1406 // NOLINT
#define GL_STACK_OVERFLOW 0x0503 // NOLINT
#define GL_STACK_UNDERFLOW 0x0504 // NOLINT
#define GL_CLEAR 0x1500 // NOLINT
#define GL_AND 0x1501 // NOLINT
#define GL_AND_REVERSE 0x1502 // NOLINT
#define GL_COPY 0x1503 // NOLINT
#define GL_AND_INVERTED 0x1504 // NOLINT
#define GL_NOOP 0x1505 // NOLINT
#define GL_XOR 0x1506 // NOLINT
#define GL_OR 0x1507 // NOLINT
#define GL_NOR 0x1508 // NOLINT
#define GL_EQUIV 0x1509 // NOLINT
#define GL_INVERT 0x150A // NOLINT
#define GL_OR_REVERSE 0x150B // NOLINT
#define GL_COPY_INVERTED 0x150C // NOLINT
#define GL_OR_INVERTED 0x150D // NOLINT
#define GL_NAND 0x150E // NOLINT
#define GL_SET 0x150F // NOLINT
#define GL_TEXTURE 0x1702 // NOLINT
#define GL_COLOR 0x1800 // NOLINT
#define GL_DEPTH 0x1801 // NOLINT
#define GL_STENCIL 0x1802 // NOLINT
#define GL_STENCIL_INDEX 0x1901 // NOLINT
#define GL_DEPTH_COMPONENT 0x1902 // NOLINT
#define GL_RED 0x1903 // NOLINT
#define GL_GREEN 0x1904 // NOLINT
#define GL_BLUE 0x1905 // NOLINT
#define GL_ALPHA 0x1906 // NOLINT
#define GL_RGB 0x1907 // NOLINT
#define GL_RGBA 0x1908 // NOLINT
#define GL_POINT 0x1B00 // NOLINT
#define GL_LINE 0x1B01 // NOLINT
#define GL_FILL 0x1B02 // NOLINT
#define GL_KEEP 0x1E00 // NOLINT
#define GL_REPLACE 0x1E01 // NOLINT
#define GL_INCR 0x1E02 // NOLINT
#define GL_DECR 0x1E03 // NOLINT
#define GL_VENDOR 0x1F00 // NOLINT
#define GL_RENDERER 0x1F01 // NOLINT
#define GL_VERSION 0x1F02 // NOLINT
#define GL_EXTENSIONS 0x1F03 // NOLINT
#define GL_NEAREST 0x2600 // NOLINT
#define GL_LINEAR 0x2601 // NOLINT
#define GL_NEAREST_MIPMAP_NEAREST 0x2700 // NOLINT
#define GL_LINEAR_MIPMAP_NEAREST 0x2701 // NOLINT
#define GL_NEAREST_MIPMAP_LINEAR 0x2702 // NOLINT
#define GL_LINEAR_MIPMAP_LINEAR 0x2703 // NOLINT
#define GL_TEXTURE_MAG_FILTER 0x2800 // NOLINT
#define GL_TEXTURE_MIN_FILTER 0x2801 // NOLINT
#define GL_TEXTURE_WRAP_S 0x2802 // NOLINT
#define GL_TEXTURE_WRAP_T 0x2803 // NOLINT
#define GL_REPEAT 0x2901 // NOLINT
#define GL_CURRENT_BIT 0x00000001 // NOLINT
#define GL_POINT_BIT 0x00000002 // NOLINT
#define GL_LINE_BIT 0x00000004 // NOLINT
#define GL_POLYGON_BIT 0x00000008 // NOLINT
#define GL_POLYGON_STIPPLE_BIT 0x00000010 // NOLINT
#define GL_PIXEL_MODE_BIT 0x00000020 // NOLINT
#define GL_LIGHTING_BIT 0x00000040 // NOLINT
#define GL_FOG_BIT 0x00000080 // NOLINT
#define GL_ACCUM_BUFFER_BIT 0x00000200 // NOLINT
#define GL_VIEWPORT_BIT 0x00000800 // NOLINT
#define GL_TRANSFORM_BIT 0x00001000 // NOLINT
#define GL_ENABLE_BIT 0x00002000 // NOLINT
#define GL_HINT_BIT 0x00008000 // NOLINT
#define GL_EVAL_BIT 0x00010000 // NOLINT
#define GL_LIST_BIT 0x00020000 // NOLINT
#define GL_TEXTURE_BIT 0x00040000 // NOLINT
#define GL_SCISSOR_BIT 0x00080000 // NOLINT
// Guaranteed to mark all attribute groups at once
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF // NOLINT
#define GL_QUAD_STRIP 0x0008 // NOLINT
#define GL_POLYGON 0x0009 // NOLINT
#define GL_ACCUM 0x0100 // NOLINT
#define GL_LOAD 0x0101 // NOLINT
#define GL_RETURN 0x0102 // NOLINT
#define GL_MULT 0x0103 // NOLINT
#define GL_ADD 0x0104 // NOLINT
#define GL_AUX0 0x0409 // NOLINT
#define GL_AUX1 0x040A // NOLINT
#define GL_AUX2 0x040B // NOLINT
#define GL_AUX3 0x040C // NOLINT
#define GL_2D 0x0600 // NOLINT
#define GL_3D 0x0601 // NOLINT
#define GL_3D_COLOR 0x0602 // NOLINT
#define GL_3D_COLOR_TEXTURE 0x0603 // NOLINT
#define GL_4D_COLOR_TEXTURE 0x0604 // NOLINT
#define GL_PASS_THROUGH_TOKEN 0x0700 // NOLINT
#define GL_POINT_TOKEN 0x0701 // NOLINT
#define GL_LINE_TOKEN 0x0702 // NOLINT
#define GL_POLYGON_TOKEN 0x0703 // NOLINT
#define GL_BITMAP_TOKEN 0x0704 // NOLINT
#define GL_DRAW_PIXEL_TOKEN 0x0705 // NOLINT
#define GL_COPY_PIXEL_TOKEN 0x0706 // NOLINT
#define GL_LINE_RESET_TOKEN 0x0707 // NOLINT
#define GL_EXP 0x0800 // NOLINT
#define GL_EXP2 0x0801 // NOLINT
#define GL_COEFF 0x0A00 // NOLINT
#define GL_ORDER 0x0A01 // NOLINT
#define GL_DOMAIN 0x0A02 // NOLINT
#define GL_PIXEL_MAP_I_TO_I 0x0C70 // NOLINT
#define GL_PIXEL_MAP_S_TO_S 0x0C71 // NOLINT
#define GL_PIXEL_MAP_I_TO_R 0x0C72 // NOLINT
#define GL_PIXEL_MAP_I_TO_G 0x0C73 // NOLINT
#define GL_PIXEL_MAP_I_TO_B 0x0C74 // NOLINT
#define GL_PIXEL_MAP_I_TO_A 0x0C75 // NOLINT
#define GL_PIXEL_MAP_R_TO_R 0x0C76 // NOLINT
#define GL_PIXEL_MAP_G_TO_G 0x0C77 // NOLINT
#define GL_PIXEL_MAP_B_TO_B 0x0C78 // NOLINT
#define GL_PIXEL_MAP_A_TO_A 0x0C79 // NOLINT
#define GL_CURRENT_COLOR 0x0B00 // NOLINT
#define GL_CURRENT_INDEX 0x0B01 // NOLINT
#define GL_CURRENT_NORMAL 0x0B02 // NOLINT
#define GL_CURRENT_TEXTURE_COORDS 0x0B03 // NOLINT
#define GL_CURRENT_RASTER_COLOR 0x0B04 // NOLINT
#define GL_CURRENT_RASTER_INDEX 0x0B05 // NOLINT
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06 // NOLINT
#define GL_CURRENT_RASTER_POSITION 0x0B07 // NOLINT
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08 // NOLINT
#define GL_CURRENT_RASTER_DISTANCE 0x0B09 // NOLINT
#define GL_POINT_SMOOTH 0x0B10 // NOLINT
#define GL_LINE_STIPPLE 0x0B24 // NOLINT
#define GL_LINE_STIPPLE_PATTERN 0x0B25 // NOLINT
#define GL_LINE_STIPPLE_REPEAT 0x0B26 // NOLINT
#define GL_LIST_MODE 0x0B30 // NOLINT
#define GL_MAX_LIST_NESTING 0x0B31 // NOLINT
#define GL_LIST_BASE 0x0B32 // NOLINT
#define GL_LIST_INDEX 0x0B33 // NOLINT
#define GL_POLYGON_STIPPLE 0x0B42 // NOLINT
#define GL_EDGE_FLAG 0x0B43 // NOLINT
#define GL_LIGHTING 0x0B50 // NOLINT
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51 // NOLINT
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52 // NOLINT
#define GL_LIGHT_MODEL_AMBIENT 0x0B53 // NOLINT
#define GL_SHADE_MODEL 0x0B54 // NOLINT
#define GL_COLOR_MATERIAL_FACE 0x0B55 // NOLINT
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56 // NOLINT
#define GL_COLOR_MATERIAL 0x0B57 // NOLINT
#define GL_FOG 0x0B60 // NOLINT
#define GL_FOG_INDEX 0x0B61 // NOLINT
#define GL_FOG_DENSITY 0x0B62 // NOLINT
#define GL_FOG_START 0x0B63 // NOLINT
#define GL_FOG_END 0x0B64 // NOLINT
#define GL_FOG_MODE 0x0B65 // NOLINT
#define GL_FOG_COLOR 0x0B66 // NOLINT
#define GL_ACCUM_CLEAR_VALUE 0x0B80 // NOLINT
#define GL_MATRIX_MODE 0x0BA0 // NOLINT
#define GL_NORMALIZE 0x0BA1 // NOLINT
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3 // NOLINT
#define GL_PROJECTION_STACK_DEPTH 0x0BA4 // NOLINT
#define GL_TEXTURE_STACK_DEPTH 0x0BA5 // NOLINT
#define GL_MODELVIEW_MATRIX 0x0BA6 // NOLINT
#define GL_PROJECTION_MATRIX 0x0BA7 // NOLINT
#define GL_TEXTURE_MATRIX 0x0BA8 // NOLINT
#define GL_ATTRIB_STACK_DEPTH 0x0BB0 // NOLINT
#define GL_ALPHA_TEST 0x0BC0 // NOLINT
#define GL_ALPHA_TEST_FUNC 0x0BC1 // NOLINT
#define GL_ALPHA_TEST_REF 0x0BC2 // NOLINT
#define GL_LOGIC_OP 0x0BF1 // NOLINT
#define GL_AUX_BUFFERS 0x0C00 // NOLINT
#define GL_INDEX_CLEAR_VALUE 0x0C20 // NOLINT
#define GL_INDEX_WRITEMASK 0x0C21 // NOLINT
#define GL_INDEX_MODE 0x0C30 // NOLINT
#define GL_RGBA_MODE 0x0C31 // NOLINT
#define GL_RENDER_MODE 0x0C40 // NOLINT
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50 // NOLINT
#define GL_POINT_SMOOTH_HINT 0x0C51 // NOLINT
#define GL_FOG_HINT 0x0C54 // NOLINT
#define GL_TEXTURE_GEN_S 0x0C60 // NOLINT
#define GL_TEXTURE_GEN_T 0x0C61 // NOLINT
#define GL_TEXTURE_GEN_R 0x0C62 // NOLINT
#define GL_TEXTURE_GEN_Q 0x0C63 // NOLINT
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0 // NOLINT
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1 // NOLINT
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2 // NOLINT
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3 // NOLINT
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4 // NOLINT
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5 // NOLINT
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6 // NOLINT
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7 // NOLINT
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8 // NOLINT
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9 // NOLINT
#define GL_MAP_COLOR 0x0D10 // NOLINT
#define GL_MAP_STENCIL 0x0D11 // NOLINT
#define GL_INDEX_SHIFT 0x0D12 // NOLINT
#define GL_INDEX_OFFSET 0x0D13 // NOLINT
#define GL_RED_SCALE 0x0D14 // NOLINT
#define GL_RED_BIAS 0x0D15 // NOLINT
#define GL_ZOOM_X 0x0D16 // NOLINT
#define GL_ZOOM_Y 0x0D17 // NOLINT
#define GL_GREEN_SCALE 0x0D18 // NOLINT
#define GL_GREEN_BIAS 0x0D19 // NOLINT
#define GL_BLUE_SCALE 0x0D1A // NOLINT
#define GL_BLUE_BIAS 0x0D1B // NOLINT
#define GL_ALPHA_SCALE 0x0D1C // NOLINT
#define GL_ALPHA_BIAS 0x0D1D // NOLINT
#define GL_DEPTH_SCALE 0x0D1E // NOLINT
#define GL_DEPTH_BIAS 0x0D1F // NOLINT
#define GL_MAX_EVAL_ORDER 0x0D30 // NOLINT
#define GL_MAX_LIGHTS 0x0D31 // NOLINT
#define GL_MAX_CLIP_PLANES 0x0D32 // NOLINT
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34 // NOLINT
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35 // NOLINT
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36 // NOLINT
#define GL_MAX_NAME_STACK_DEPTH 0x0D37 // NOLINT
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38 // NOLINT
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39 // NOLINT
#define GL_INDEX_BITS 0x0D51 // NOLINT
#define GL_RED_BITS 0x0D52 // NOLINT
#define GL_GREEN_BITS 0x0D53 // NOLINT
#define GL_BLUE_BITS 0x0D54 // NOLINT
#define GL_ALPHA_BITS 0x0D55 // NOLINT
#define GL_DEPTH_BITS 0x0D56 // NOLINT
#define GL_STENCIL_BITS 0x0D57 // NOLINT
#define GL_ACCUM_RED_BITS 0x0D58 // NOLINT
#define GL_ACCUM_GREEN_BITS 0x0D59 // NOLINT
#define GL_ACCUM_BLUE_BITS 0x0D5A // NOLINT
#define GL_ACCUM_ALPHA_BITS 0x0D5B // NOLINT
#define GL_NAME_STACK_DEPTH 0x0D70 // NOLINT
#define GL_AUTO_NORMAL 0x0D80 // NOLINT
#define GL_MAP1_COLOR_4 0x0D90 // NOLINT
#define GL_MAP1_INDEX 0x0D91 // NOLINT
#define GL_MAP1_NORMAL 0x0D92 // NOLINT
#define GL_MAP1_TEXTURE_COORD_1 0x0D93 // NOLINT
#define GL_MAP1_TEXTURE_COORD_2 0x0D94 // NOLINT
#define GL_MAP1_TEXTURE_COORD_3 0x0D95 // NOLINT
#define GL_MAP1_TEXTURE_COORD_4 0x0D96 // NOLINT
#define GL_MAP1_VERTEX_3 0x0D97 // NOLINT
#define GL_MAP1_VERTEX_4 0x0D98 // NOLINT
#define GL_MAP2_COLOR_4 0x0DB0 // NOLINT
#define GL_MAP2_INDEX 0x0DB1 // NOLINT
#define GL_MAP2_NORMAL 0x0DB2 // NOLINT
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3 // NOLINT
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4 // NOLINT
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5 // NOLINT
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6 // NOLINT
#define GL_MAP2_VERTEX_3 0x0DB7 // NOLINT
#define GL_MAP2_VERTEX_4 0x0DB8 // NOLINT
#define GL_MAP1_GRID_DOMAIN 0x0DD0 // NOLINT
#define GL_MAP1_GRID_SEGMENTS 0x0DD1 // NOLINT
#define GL_MAP2_GRID_DOMAIN 0x0DD2 // NOLINT
#define GL_MAP2_GRID_SEGMENTS 0x0DD3 // NOLINT
#define GL_TEXTURE_COMPONENTS 0x1003 // NOLINT
#define GL_TEXTURE_BORDER 0x1005 // NOLINT
#define GL_AMBIENT 0x1200 // NOLINT
#define GL_DIFFUSE 0x1201 // NOLINT
#define GL_SPECULAR 0x1202 // NOLINT
#define GL_POSITION 0x1203 // NOLINT
#define GL_SPOT_DIRECTION 0x1204 // NOLINT
#define GL_SPOT_EXPONENT 0x1205 // NOLINT
#define GL_SPOT_CUTOFF 0x1206 // NOLINT
#define GL_CONSTANT_ATTENUATION 0x1207 // NOLINT
#define GL_LINEAR_ATTENUATION 0x1208 // NOLINT
#define GL_QUADRATIC_ATTENUATION 0x1209 // NOLINT
#define GL_COMPILE 0x1300 // NOLINT
#define GL_COMPILE_AND_EXECUTE 0x1301 // NOLINT
#define GL_2_BYTES 0x1407 // NOLINT
#define GL_3_BYTES 0x1408 // NOLINT
#define GL_4_BYTES 0x1409 // NOLINT
#define GL_EMISSION 0x1600 // NOLINT
#define GL_SHININESS 0x1601 // NOLINT
#define GL_AMBIENT_AND_DIFFUSE 0x1602 // NOLINT
#define GL_COLOR_INDEXES 0x1603 // NOLINT
#define GL_MODELVIEW 0x1700 // NOLINT
#define GL_PROJECTION 0x1701 // NOLINT
#define GL_COLOR_INDEX 0x1900 // NOLINT
#define GL_LUMINANCE 0x1909 // NOLINT
#define GL_LUMINANCE_ALPHA 0x190A // NOLINT
#define GL_BITMAP 0x1A00 // NOLINT
#define GL_RENDER 0x1C00 // NOLINT
#define GL_FEEDBACK 0x1C01 // NOLINT
#define GL_SELECT 0x1C02 // NOLINT
#define GL_FLAT 0x1D00 // NOLINT
#define GL_SMOOTH 0x1D01 // NOLINT
#define GL_S 0x2000 // NOLINT
#define GL_T 0x2001 // NOLINT
#define GL_R 0x2002 // NOLINT
#define GL_Q 0x2003 // NOLINT
#define GL_MODULATE 0x2100 // NOLINT
#define GL_DECAL 0x2101 // NOLINT
#define GL_TEXTURE_ENV_MODE 0x2200 // NOLINT
#define GL_TEXTURE_ENV_COLOR 0x2201 // NOLINT
#define GL_TEXTURE_ENV 0x2300 // NOLINT
#define GL_EYE_LINEAR 0x2400 // NOLINT
#define GL_OBJECT_LINEAR 0x2401 // NOLINT
#define GL_SPHERE_MAP 0x2402 // NOLINT
#define GL_TEXTURE_GEN_MODE 0x2500 // NOLINT
#define GL_OBJECT_PLANE 0x2501 // NOLINT
#define GL_EYE_PLANE 0x2502 // NOLINT
#define GL_CLAMP 0x2900 // NOLINT
#define GL_CLIP_PLANE0 0x3000 // NOLINT
#define GL_CLIP_PLANE1 0x3001 // NOLINT
#define GL_CLIP_PLANE2 0x3002 // NOLINT
#define GL_CLIP_PLANE3 0x3003 // NOLINT
#define GL_CLIP_PLANE4 0x3004 // NOLINT
#define GL_CLIP_PLANE5 0x3005 // NOLINT
#define GL_LIGHT0 0x4000 // NOLINT
#define GL_LIGHT1 0x4001 // NOLINT
#define GL_LIGHT2 0x4002 // NOLINT
#define GL_LIGHT3 0x4003 // NOLINT
#define GL_LIGHT4 0x4004 // NOLINT
#define GL_LIGHT5 0x4005 // NOLINT
#define GL_LIGHT6 0x4006 // NOLINT
#define GL_LIGHT7 0x4007 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glCullFaceType )( GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glFrontFaceType )( GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glHintType )( GLenum target, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glLineWidthType )( GLfloat width );
typedef void ( NN_GLL_GL_APIENTRY *glPointSizeType )( GLfloat size );
typedef void ( NN_GLL_GL_APIENTRY *glPolygonModeType )( GLenum face, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glScissorType )( GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glTexParameterfType )( GLenum target, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glTexParameterfvType )( GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glTexParameteriType )( GLenum target, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glTexParameterivType )( GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glTexImage1DType )( GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTexImage2DType )( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glDrawBufferType )( GLenum buf );
typedef void ( NN_GLL_GL_APIENTRY *glClearType )( GLbitfield mask );
typedef void ( NN_GLL_GL_APIENTRY *glClearColorType )( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
typedef void ( NN_GLL_GL_APIENTRY *glClearStencilType )( GLint s );
typedef void ( NN_GLL_GL_APIENTRY *glClearDepthType )( GLdouble depth );
typedef void ( NN_GLL_GL_APIENTRY *glStencilMaskType )( GLuint mask );
typedef void ( NN_GLL_GL_APIENTRY *glColorMaskType )( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
typedef void ( NN_GLL_GL_APIENTRY *glDepthMaskType )( GLboolean flag );
typedef void ( NN_GLL_GL_APIENTRY *glDisableType )( GLenum cap );
typedef void ( NN_GLL_GL_APIENTRY *glEnableType )( GLenum cap );
typedef void ( NN_GLL_GL_APIENTRY *glFinishType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glFlushType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glBlendFuncType )( GLenum sfactor, GLenum dfactor );
typedef void ( NN_GLL_GL_APIENTRY *glLogicOpType )( GLenum opcode );
typedef void ( NN_GLL_GL_APIENTRY *glStencilFuncType )( GLenum func, GLint ref, GLuint mask );
typedef void ( NN_GLL_GL_APIENTRY *glStencilOpType )( GLenum fail, GLenum zfail, GLenum zpass );
typedef void ( NN_GLL_GL_APIENTRY *glDepthFuncType )( GLenum func );
typedef void ( NN_GLL_GL_APIENTRY *glPixelStorefType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glPixelStoreiType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glReadBufferType )( GLenum src );
typedef void ( NN_GLL_GL_APIENTRY *glReadPixelsType )( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glGetBooleanvType )( GLenum pname, GLboolean *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetDoublevType )( GLenum pname, GLdouble *data );
typedef GLenum ( NN_GLL_GL_APIENTRY *glGetErrorType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glGetFloatvType )( GLenum pname, GLfloat *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetIntegervType )( GLenum pname, GLint *data );
typedef const GLubyte *( NN_GLL_GL_APIENTRY *glGetStringType )( GLenum name );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexImageType )( GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexParameterfvType )( GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexParameterivType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexLevelParameterfvType )( GLenum target, GLint level, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexLevelParameterivType )( GLenum target, GLint level, GLenum pname, GLint *params );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsEnabledType )( GLenum cap );
typedef void ( NN_GLL_GL_APIENTRY *glDepthRangeType )( GLdouble n, GLdouble f );
typedef void ( NN_GLL_GL_APIENTRY *glViewportType )( GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glNewListType )( GLuint list, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glEndListType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glCallListType )( GLuint list );
typedef void ( NN_GLL_GL_APIENTRY *glCallListsType )( GLsizei n, GLenum type, const void *lists );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteListsType )( GLuint list, GLsizei range );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGenListsType )( GLsizei range );
typedef void ( NN_GLL_GL_APIENTRY *glListBaseType )( GLuint base );
typedef void ( NN_GLL_GL_APIENTRY *glBeginType )( GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glBitmapType )( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap );
typedef void ( NN_GLL_GL_APIENTRY *glColor3bType )( GLbyte red, GLbyte green, GLbyte blue );
typedef void ( NN_GLL_GL_APIENTRY *glColor3bvType )( const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor3dType )( GLdouble red, GLdouble green, GLdouble blue );
typedef void ( NN_GLL_GL_APIENTRY *glColor3dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor3fType )( GLfloat red, GLfloat green, GLfloat blue );
typedef void ( NN_GLL_GL_APIENTRY *glColor3fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor3iType )( GLint red, GLint green, GLint blue );
typedef void ( NN_GLL_GL_APIENTRY *glColor3ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor3sType )( GLshort red, GLshort green, GLshort blue );
typedef void ( NN_GLL_GL_APIENTRY *glColor3svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor3ubType )( GLubyte red, GLubyte green, GLubyte blue );
typedef void ( NN_GLL_GL_APIENTRY *glColor3ubvType )( const GLubyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor3uiType )( GLuint red, GLuint green, GLuint blue );
typedef void ( NN_GLL_GL_APIENTRY *glColor3uivType )( const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor3usType )( GLushort red, GLushort green, GLushort blue );
typedef void ( NN_GLL_GL_APIENTRY *glColor3usvType )( const GLushort *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor4bType )( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
typedef void ( NN_GLL_GL_APIENTRY *glColor4bvType )( const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor4dType )( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
typedef void ( NN_GLL_GL_APIENTRY *glColor4dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor4fType )( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
typedef void ( NN_GLL_GL_APIENTRY *glColor4fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor4iType )( GLint red, GLint green, GLint blue, GLint alpha );
typedef void ( NN_GLL_GL_APIENTRY *glColor4ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor4sType )( GLshort red, GLshort green, GLshort blue, GLshort alpha );
typedef void ( NN_GLL_GL_APIENTRY *glColor4svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor4ubType )( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
typedef void ( NN_GLL_GL_APIENTRY *glColor4ubvType )( const GLubyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor4uiType )( GLuint red, GLuint green, GLuint blue, GLuint alpha );
typedef void ( NN_GLL_GL_APIENTRY *glColor4uivType )( const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor4usType )( GLushort red, GLushort green, GLushort blue, GLushort alpha );
typedef void ( NN_GLL_GL_APIENTRY *glColor4usvType )( const GLushort *v );
typedef void ( NN_GLL_GL_APIENTRY *glEdgeFlagType )( GLboolean flag );
typedef void ( NN_GLL_GL_APIENTRY *glEdgeFlagvType )( const GLboolean *flag );
typedef void ( NN_GLL_GL_APIENTRY *glEndType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glIndexdType )( GLdouble c );
typedef void ( NN_GLL_GL_APIENTRY *glIndexdvType )( const GLdouble *c );
typedef void ( NN_GLL_GL_APIENTRY *glIndexfType )( GLfloat c );
typedef void ( NN_GLL_GL_APIENTRY *glIndexfvType )( const GLfloat *c );
typedef void ( NN_GLL_GL_APIENTRY *glIndexiType )( GLint c );
typedef void ( NN_GLL_GL_APIENTRY *glIndexivType )( const GLint *c );
typedef void ( NN_GLL_GL_APIENTRY *glIndexsType )( GLshort c );
typedef void ( NN_GLL_GL_APIENTRY *glIndexsvType )( const GLshort *c );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3bType )( GLbyte nx, GLbyte ny, GLbyte nz );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3bvType )( const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3dType )( GLdouble nx, GLdouble ny, GLdouble nz );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3fType )( GLfloat nx, GLfloat ny, GLfloat nz );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3iType )( GLint nx, GLint ny, GLint nz );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3sType )( GLshort nx, GLshort ny, GLshort nz );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos2dType )( GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos2dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos2fType )( GLfloat x, GLfloat y );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos2fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos2iType )( GLint x, GLint y );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos2ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos2sType )( GLshort x, GLshort y );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos2svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos3dType )( GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos3dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos3fType )( GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos3fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos3iType )( GLint x, GLint y, GLint z );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos3ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos3sType )( GLshort x, GLshort y, GLshort z );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos3svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos4dType )( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos4dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos4fType )( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos4fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos4iType )( GLint x, GLint y, GLint z, GLint w );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos4ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos4sType )( GLshort x, GLshort y, GLshort z, GLshort w );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos4svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glRectdType )( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
typedef void ( NN_GLL_GL_APIENTRY *glRectdvType )( const GLdouble *v1, const GLdouble *v2 );
typedef void ( NN_GLL_GL_APIENTRY *glRectfType )( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
typedef void ( NN_GLL_GL_APIENTRY *glRectfvType )( const GLfloat *v1, const GLfloat *v2 );
typedef void ( NN_GLL_GL_APIENTRY *glRectiType )( GLint x1, GLint y1, GLint x2, GLint y2 );
typedef void ( NN_GLL_GL_APIENTRY *glRectivType )( const GLint *v1, const GLint *v2 );
typedef void ( NN_GLL_GL_APIENTRY *glRectsType )( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
typedef void ( NN_GLL_GL_APIENTRY *glRectsvType )( const GLshort *v1, const GLshort *v2 );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1dType )( GLdouble s );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1fType )( GLfloat s );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1iType )( GLint s );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1sType )( GLshort s );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2dType )( GLdouble s, GLdouble t );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fType )( GLfloat s, GLfloat t );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2iType )( GLint s, GLint t );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2sType )( GLshort s, GLshort t );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3dType )( GLdouble s, GLdouble t, GLdouble r );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3fType )( GLfloat s, GLfloat t, GLfloat r );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3iType )( GLint s, GLint t, GLint r );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3sType )( GLshort s, GLshort t, GLshort r );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4dType )( GLdouble s, GLdouble t, GLdouble r, GLdouble q );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4fType )( GLfloat s, GLfloat t, GLfloat r, GLfloat q );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4iType )( GLint s, GLint t, GLint r, GLint q );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4sType )( GLshort s, GLshort t, GLshort r, GLshort q );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2dType )( GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2fType )( GLfloat x, GLfloat y );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2iType )( GLint x, GLint y );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2sType )( GLshort x, GLshort y );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3dType )( GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3fType )( GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3iType )( GLint x, GLint y, GLint z );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3sType )( GLshort x, GLshort y, GLshort z );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4dType )( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4fType )( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4iType )( GLint x, GLint y, GLint z, GLint w );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4sType )( GLshort x, GLshort y, GLshort z, GLshort w );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glClipPlaneType )( GLenum plane, const GLdouble *equation );
typedef void ( NN_GLL_GL_APIENTRY *glColorMaterialType )( GLenum face, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glFogfType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glFogfvType )( GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glFogiType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glFogivType )( GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glLightfType )( GLenum light, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glLightfvType )( GLenum light, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glLightiType )( GLenum light, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glLightivType )( GLenum light, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glLightModelfType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glLightModelfvType )( GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glLightModeliType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glLightModelivType )( GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glLineStippleType )( GLint factor, GLushort pattern );
typedef void ( NN_GLL_GL_APIENTRY *glMaterialfType )( GLenum face, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glMaterialfvType )( GLenum face, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glMaterialiType )( GLenum face, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glMaterialivType )( GLenum face, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glPolygonStippleType )( const GLubyte *mask );
typedef void ( NN_GLL_GL_APIENTRY *glShadeModelType )( GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glTexEnvfType )( GLenum target, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glTexEnvfvType )( GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glTexEnviType )( GLenum target, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glTexEnvivType )( GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glTexGendType )( GLenum coord, GLenum pname, GLdouble param );
typedef void ( NN_GLL_GL_APIENTRY *glTexGendvType )( GLenum coord, GLenum pname, const GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glTexGenfType )( GLenum coord, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glTexGenfvType )( GLenum coord, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glTexGeniType )( GLenum coord, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glTexGenivType )( GLenum coord, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glFeedbackBufferType )( GLsizei size, GLenum type, GLfloat *buffer );
typedef void ( NN_GLL_GL_APIENTRY *glSelectBufferType )( GLsizei size, GLuint *buffer );
typedef GLint ( NN_GLL_GL_APIENTRY *glRenderModeType )( GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glInitNamesType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glLoadNameType )( GLuint name );
typedef void ( NN_GLL_GL_APIENTRY *glPassThroughType )( GLfloat token );
typedef void ( NN_GLL_GL_APIENTRY *glPopNameType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glPushNameType )( GLuint name );
typedef void ( NN_GLL_GL_APIENTRY *glClearAccumType )( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
typedef void ( NN_GLL_GL_APIENTRY *glClearIndexType )( GLfloat c );
typedef void ( NN_GLL_GL_APIENTRY *glIndexMaskType )( GLuint mask );
typedef void ( NN_GLL_GL_APIENTRY *glAccumType )( GLenum op, GLfloat value );
typedef void ( NN_GLL_GL_APIENTRY *glPopAttribType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glPushAttribType )( GLbitfield mask );
typedef void ( NN_GLL_GL_APIENTRY *glMap1dType )( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
typedef void ( NN_GLL_GL_APIENTRY *glMap1fType )( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
typedef void ( NN_GLL_GL_APIENTRY *glMap2dType )( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
typedef void ( NN_GLL_GL_APIENTRY *glMap2fType )( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
typedef void ( NN_GLL_GL_APIENTRY *glMapGrid1dType )( GLint un, GLdouble u1, GLdouble u2 );
typedef void ( NN_GLL_GL_APIENTRY *glMapGrid1fType )( GLint un, GLfloat u1, GLfloat u2 );
typedef void ( NN_GLL_GL_APIENTRY *glMapGrid2dType )( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
typedef void ( NN_GLL_GL_APIENTRY *glMapGrid2fType )( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord1dType )( GLdouble u );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord1dvType )( const GLdouble *u );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord1fType )( GLfloat u );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord1fvType )( const GLfloat *u );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord2dType )( GLdouble u, GLdouble v );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord2dvType )( const GLdouble *u );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord2fType )( GLfloat u, GLfloat v );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord2fvType )( const GLfloat *u );
typedef void ( NN_GLL_GL_APIENTRY *glEvalMesh1Type )( GLenum mode, GLint i1, GLint i2 );
typedef void ( NN_GLL_GL_APIENTRY *glEvalPoint1Type )( GLint i );
typedef void ( NN_GLL_GL_APIENTRY *glEvalMesh2Type )( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
typedef void ( NN_GLL_GL_APIENTRY *glEvalPoint2Type )( GLint i, GLint j );
typedef void ( NN_GLL_GL_APIENTRY *glAlphaFuncType )( GLenum func, GLfloat ref );
typedef void ( NN_GLL_GL_APIENTRY *glPixelZoomType )( GLfloat xfactor, GLfloat yfactor );
typedef void ( NN_GLL_GL_APIENTRY *glPixelTransferfType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glPixelTransferiType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glPixelMapfvType )( GLenum map, GLsizei mapsize, const GLfloat *values );
typedef void ( NN_GLL_GL_APIENTRY *glPixelMapuivType )( GLenum map, GLsizei mapsize, const GLuint *values );
typedef void ( NN_GLL_GL_APIENTRY *glPixelMapusvType )( GLenum map, GLsizei mapsize, const GLushort *values );
typedef void ( NN_GLL_GL_APIENTRY *glCopyPixelsType )( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
typedef void ( NN_GLL_GL_APIENTRY *glDrawPixelsType )( GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glGetClipPlaneType )( GLenum plane, GLdouble *equation );
typedef void ( NN_GLL_GL_APIENTRY *glGetLightfvType )( GLenum light, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetLightivType )( GLenum light, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMapdvType )( GLenum target, GLenum query, GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetMapfvType )( GLenum target, GLenum query, GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetMapivType )( GLenum target, GLenum query, GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetMaterialfvType )( GLenum face, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMaterialivType )( GLenum face, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetPixelMapfvType )( GLenum map, GLfloat *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetPixelMapuivType )( GLenum map, GLuint *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetPixelMapusvType )( GLenum map, GLushort *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetPolygonStippleType )( GLubyte *mask );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexEnvfvType )( GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexEnvivType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexGendvType )( GLenum coord, GLenum pname, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexGenfvType )( GLenum coord, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexGenivType )( GLenum coord, GLenum pname, GLint *params );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsListType )( GLuint list );
typedef void ( NN_GLL_GL_APIENTRY *glFrustumType )( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
typedef void ( NN_GLL_GL_APIENTRY *glLoadIdentityType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glLoadMatrixfType )( const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glLoadMatrixdType )( const GLdouble *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixModeType )( GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glMultMatrixfType )( const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMultMatrixdType )( const GLdouble *m );
typedef void ( NN_GLL_GL_APIENTRY *glOrthoType )( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
typedef void ( NN_GLL_GL_APIENTRY *glPopMatrixType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glPushMatrixType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glRotatedType )( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glRotatefType )( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glScaledType )( GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glScalefType )( GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glTranslatedType )( GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glTranslatefType )( GLfloat x, GLfloat y, GLfloat z );
#if defined( NN_BUILD_CONFIG_OS_WIN32 )
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glCullFace( GLenum mode );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glFrontFace( GLenum mode );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glHint( GLenum target, GLenum mode );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLineWidth( GLfloat width );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPointSize( GLfloat size );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPolygonMode( GLenum face, GLenum mode );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glScissor( GLint x, GLint y, GLsizei width, GLsizei height );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexParameterf( GLenum target, GLenum pname, GLfloat param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexParameterfv( GLenum target, GLenum pname, const GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexParameteri( GLenum target, GLenum pname, GLint param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexParameteriv( GLenum target, GLenum pname, const GLint *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexImage1D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexImage2D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glDrawBuffer( GLenum buf );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glClear( GLbitfield mask );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glClearColor( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glClearStencil( GLint s );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glClearDepth( GLdouble depth );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glStencilMask( GLuint mask );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glDepthMask( GLboolean flag );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glDisable( GLenum cap );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEnable( GLenum cap );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glFinish(  );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glFlush(  );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glBlendFunc( GLenum sfactor, GLenum dfactor );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLogicOp( GLenum opcode );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glStencilFunc( GLenum func, GLint ref, GLuint mask );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glStencilOp( GLenum fail, GLenum zfail, GLenum zpass );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glDepthFunc( GLenum func );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPixelStoref( GLenum pname, GLfloat param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPixelStorei( GLenum pname, GLint param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glReadBuffer( GLenum src );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glReadPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetBooleanv( GLenum pname, GLboolean *data );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetDoublev( GLenum pname, GLdouble *data );
NN_GLL_GL_API GLenum NN_GLL_GL_APIENTRY glGetError(  );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetFloatv( GLenum pname, GLfloat *data );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetIntegerv( GLenum pname, GLint *data );
NN_GLL_GL_API const GLubyte *NN_GLL_GL_APIENTRY glGetString( GLenum name );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetTexImage( GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetTexParameterfv( GLenum target, GLenum pname, GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetTexParameteriv( GLenum target, GLenum pname, GLint *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetTexLevelParameterfv( GLenum target, GLint level, GLenum pname, GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetTexLevelParameteriv( GLenum target, GLint level, GLenum pname, GLint *params );
NN_GLL_GL_API GLboolean NN_GLL_GL_APIENTRY glIsEnabled( GLenum cap );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glDepthRange( GLdouble n, GLdouble f );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glViewport( GLint x, GLint y, GLsizei width, GLsizei height );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glNewList( GLuint list, GLenum mode );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEndList(  );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glCallList( GLuint list );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glCallLists( GLsizei n, GLenum type, const void *lists );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glDeleteLists( GLuint list, GLsizei range );
NN_GLL_GL_API GLuint NN_GLL_GL_APIENTRY glGenLists( GLsizei range );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glListBase( GLuint base );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glBegin( GLenum mode );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glBitmap( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3b( GLbyte red, GLbyte green, GLbyte blue );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3bv( const GLbyte *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3d( GLdouble red, GLdouble green, GLdouble blue );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3f( GLfloat red, GLfloat green, GLfloat blue );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3i( GLint red, GLint green, GLint blue );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3s( GLshort red, GLshort green, GLshort blue );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3ub( GLubyte red, GLubyte green, GLubyte blue );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3ubv( const GLubyte *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3ui( GLuint red, GLuint green, GLuint blue );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3uiv( const GLuint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3us( GLushort red, GLushort green, GLushort blue );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor3usv( const GLushort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4b( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4bv( const GLbyte *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4d( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4f( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4i( GLint red, GLint green, GLint blue, GLint alpha );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4s( GLshort red, GLshort green, GLshort blue, GLshort alpha );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4ubv( const GLubyte *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4uiv( const GLuint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4us( GLushort red, GLushort green, GLushort blue, GLushort alpha );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColor4usv( const GLushort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEdgeFlag( GLboolean flag );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEdgeFlagv( const GLboolean *flag );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEnd(  );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glIndexd( GLdouble c );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glIndexdv( const GLdouble *c );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glIndexf( GLfloat c );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glIndexfv( const GLfloat *c );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glIndexi( GLint c );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glIndexiv( const GLint *c );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glIndexs( GLshort c );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glIndexsv( const GLshort *c );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glNormal3b( GLbyte nx, GLbyte ny, GLbyte nz );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glNormal3bv( const GLbyte *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glNormal3d( GLdouble nx, GLdouble ny, GLdouble nz );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glNormal3dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glNormal3f( GLfloat nx, GLfloat ny, GLfloat nz );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glNormal3fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glNormal3i( GLint nx, GLint ny, GLint nz );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glNormal3iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glNormal3s( GLshort nx, GLshort ny, GLshort nz );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glNormal3sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos2d( GLdouble x, GLdouble y );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos2dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos2f( GLfloat x, GLfloat y );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos2fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos2i( GLint x, GLint y );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos2iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos2s( GLshort x, GLshort y );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos2sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos3d( GLdouble x, GLdouble y, GLdouble z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos3dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos3f( GLfloat x, GLfloat y, GLfloat z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos3fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos3i( GLint x, GLint y, GLint z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos3iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos3s( GLshort x, GLshort y, GLshort z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos3sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos4dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos4fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos4i( GLint x, GLint y, GLint z, GLint w );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos4iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRasterPos4sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRectdv( const GLdouble *v1, const GLdouble *v2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRectfv( const GLfloat *v1, const GLfloat *v2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRecti( GLint x1, GLint y1, GLint x2, GLint y2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRectiv( const GLint *v1, const GLint *v2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRectsv( const GLshort *v1, const GLshort *v2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord1d( GLdouble s );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord1dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord1f( GLfloat s );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord1fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord1i( GLint s );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord1iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord1s( GLshort s );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord1sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord2d( GLdouble s, GLdouble t );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord2dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord2f( GLfloat s, GLfloat t );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord2fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord2i( GLint s, GLint t );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord2iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord2s( GLshort s, GLshort t );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord2sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord3d( GLdouble s, GLdouble t, GLdouble r );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord3dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord3f( GLfloat s, GLfloat t, GLfloat r );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord3fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord3i( GLint s, GLint t, GLint r );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord3iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord3s( GLshort s, GLshort t, GLshort r );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord3sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord4dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord4fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord4i( GLint s, GLint t, GLint r, GLint q );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord4iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexCoord4sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex2d( GLdouble x, GLdouble y );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex2dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex2f( GLfloat x, GLfloat y );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex2fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex2i( GLint x, GLint y );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex2iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex2s( GLshort x, GLshort y );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex2sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex3d( GLdouble x, GLdouble y, GLdouble z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex3dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex3f( GLfloat x, GLfloat y, GLfloat z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex3fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex3i( GLint x, GLint y, GLint z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex3iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex3s( GLshort x, GLshort y, GLshort z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex3sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex4dv( const GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex4fv( const GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex4i( GLint x, GLint y, GLint z, GLint w );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex4iv( const GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex4s( GLshort x, GLshort y, GLshort z, GLshort w );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glVertex4sv( const GLshort *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glClipPlane( GLenum plane, const GLdouble *equation );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glColorMaterial( GLenum face, GLenum mode );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glFogf( GLenum pname, GLfloat param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glFogfv( GLenum pname, const GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glFogi( GLenum pname, GLint param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glFogiv( GLenum pname, const GLint *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLightf( GLenum light, GLenum pname, GLfloat param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLightfv( GLenum light, GLenum pname, const GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLighti( GLenum light, GLenum pname, GLint param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLightiv( GLenum light, GLenum pname, const GLint *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLightModelf( GLenum pname, GLfloat param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLightModelfv( GLenum pname, const GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLightModeli( GLenum pname, GLint param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLightModeliv( GLenum pname, const GLint *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLineStipple( GLint factor, GLushort pattern );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMaterialf( GLenum face, GLenum pname, GLfloat param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMaterialfv( GLenum face, GLenum pname, const GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMateriali( GLenum face, GLenum pname, GLint param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMaterialiv( GLenum face, GLenum pname, const GLint *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPolygonStipple( const GLubyte *mask );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glShadeModel( GLenum mode );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexEnvf( GLenum target, GLenum pname, GLfloat param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexEnvfv( GLenum target, GLenum pname, const GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexEnvi( GLenum target, GLenum pname, GLint param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexEnviv( GLenum target, GLenum pname, const GLint *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexGend( GLenum coord, GLenum pname, GLdouble param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexGendv( GLenum coord, GLenum pname, const GLdouble *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexGenf( GLenum coord, GLenum pname, GLfloat param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexGenfv( GLenum coord, GLenum pname, const GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexGeni( GLenum coord, GLenum pname, GLint param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTexGeniv( GLenum coord, GLenum pname, const GLint *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glFeedbackBuffer( GLsizei size, GLenum type, GLfloat *buffer );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glSelectBuffer( GLsizei size, GLuint *buffer );
NN_GLL_GL_API GLint NN_GLL_GL_APIENTRY glRenderMode( GLenum mode );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glInitNames(  );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLoadName( GLuint name );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPassThrough( GLfloat token );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPopName(  );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPushName( GLuint name );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glClearIndex( GLfloat c );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glIndexMask( GLuint mask );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glAccum( GLenum op, GLfloat value );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPopAttrib(  );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPushAttrib( GLbitfield mask );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMap1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMap1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMap2d( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMap2f( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMapGrid1d( GLint un, GLdouble u1, GLdouble u2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMapGrid1f( GLint un, GLfloat u1, GLfloat u2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMapGrid2d( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMapGrid2f( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalCoord1d( GLdouble u );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalCoord1dv( const GLdouble *u );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalCoord1f( GLfloat u );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalCoord1fv( const GLfloat *u );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalCoord2d( GLdouble u, GLdouble v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalCoord2dv( const GLdouble *u );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalCoord2f( GLfloat u, GLfloat v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalCoord2fv( const GLfloat *u );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalMesh1( GLenum mode, GLint i1, GLint i2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalPoint1( GLint i );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glEvalPoint2( GLint i, GLint j );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glAlphaFunc( GLenum func, GLfloat ref );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPixelZoom( GLfloat xfactor, GLfloat yfactor );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPixelTransferf( GLenum pname, GLfloat param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPixelTransferi( GLenum pname, GLint param );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPixelMapfv( GLenum map, GLsizei mapsize, const GLfloat *values );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPixelMapuiv( GLenum map, GLsizei mapsize, const GLuint *values );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPixelMapusv( GLenum map, GLsizei mapsize, const GLushort *values );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glCopyPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glDrawPixels( GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetClipPlane( GLenum plane, GLdouble *equation );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetLightfv( GLenum light, GLenum pname, GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetLightiv( GLenum light, GLenum pname, GLint *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetMapdv( GLenum target, GLenum query, GLdouble *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetMapfv( GLenum target, GLenum query, GLfloat *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetMapiv( GLenum target, GLenum query, GLint *v );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetMaterialfv( GLenum face, GLenum pname, GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetMaterialiv( GLenum face, GLenum pname, GLint *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetPixelMapfv( GLenum map, GLfloat *values );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetPixelMapuiv( GLenum map, GLuint *values );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetPixelMapusv( GLenum map, GLushort *values );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetPolygonStipple( GLubyte *mask );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetTexEnvfv( GLenum target, GLenum pname, GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetTexEnviv( GLenum target, GLenum pname, GLint *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetTexGendv( GLenum coord, GLenum pname, GLdouble *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetTexGenfv( GLenum coord, GLenum pname, GLfloat *params );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glGetTexGeniv( GLenum coord, GLenum pname, GLint *params );
NN_GLL_GL_API GLboolean NN_GLL_GL_APIENTRY glIsList( GLuint list );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glFrustum( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLoadIdentity(  );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLoadMatrixf( const GLfloat *m );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glLoadMatrixd( const GLdouble *m );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMatrixMode( GLenum mode );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMultMatrixf( const GLfloat *m );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glMultMatrixd( const GLdouble *m );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glOrtho( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPopMatrix(  );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glPushMatrix(  );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRotated( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glRotatef( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glScaled( GLdouble x, GLdouble y, GLdouble z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glScalef( GLfloat x, GLfloat y, GLfloat z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTranslated( GLdouble x, GLdouble y, GLdouble z );
NN_GLL_GL_API void NN_GLL_GL_APIENTRY glTranslatef( GLfloat x, GLfloat y, GLfloat z );
#else
#define glCullFace g_nngllCullFace
#define glFrontFace g_nngllFrontFace
#define glHint g_nngllHint
#define glLineWidth g_nngllLineWidth
#define glPointSize g_nngllPointSize
#define glPolygonMode g_nngllPolygonMode
#define glScissor g_nngllScissor
#define glTexParameterf g_nngllTexParameterf
#define glTexParameterfv g_nngllTexParameterfv
#define glTexParameteri g_nngllTexParameteri
#define glTexParameteriv g_nngllTexParameteriv
#define glTexImage1D g_nngllTexImage1D
#define glTexImage2D g_nngllTexImage2D
#define glDrawBuffer g_nngllDrawBuffer
#define glClear g_nngllClear
#define glClearColor g_nngllClearColor
#define glClearStencil g_nngllClearStencil
#define glClearDepth g_nngllClearDepth
#define glStencilMask g_nngllStencilMask
#define glColorMask g_nngllColorMask
#define glDepthMask g_nngllDepthMask
#define glDisable g_nngllDisable
#define glEnable g_nngllEnable
#define glFinish g_nngllFinish
#define glFlush g_nngllFlush
#define glBlendFunc g_nngllBlendFunc
#define glLogicOp g_nngllLogicOp
#define glStencilFunc g_nngllStencilFunc
#define glStencilOp g_nngllStencilOp
#define glDepthFunc g_nngllDepthFunc
#define glPixelStoref g_nngllPixelStoref
#define glPixelStorei g_nngllPixelStorei
#define glReadBuffer g_nngllReadBuffer
#define glReadPixels g_nngllReadPixels
#define glGetBooleanv g_nngllGetBooleanv
#define glGetDoublev g_nngllGetDoublev
#define glGetError g_nngllGetError
#define glGetFloatv g_nngllGetFloatv
#define glGetIntegerv g_nngllGetIntegerv
#define glGetString g_nngllGetString
#define glGetTexImage g_nngllGetTexImage
#define glGetTexParameterfv g_nngllGetTexParameterfv
#define glGetTexParameteriv g_nngllGetTexParameteriv
#define glGetTexLevelParameterfv g_nngllGetTexLevelParameterfv
#define glGetTexLevelParameteriv g_nngllGetTexLevelParameteriv
#define glIsEnabled g_nngllIsEnabled
#define glDepthRange g_nngllDepthRange
#define glViewport g_nngllViewport
#define glNewList g_nngllNewList
#define glEndList g_nngllEndList
#define glCallList g_nngllCallList
#define glCallLists g_nngllCallLists
#define glDeleteLists g_nngllDeleteLists
#define glGenLists g_nngllGenLists
#define glListBase g_nngllListBase
#define glBegin g_nngllBegin
#define glBitmap g_nngllBitmap
#define glColor3b g_nngllColor3b
#define glColor3bv g_nngllColor3bv
#define glColor3d g_nngllColor3d
#define glColor3dv g_nngllColor3dv
#define glColor3f g_nngllColor3f
#define glColor3fv g_nngllColor3fv
#define glColor3i g_nngllColor3i
#define glColor3iv g_nngllColor3iv
#define glColor3s g_nngllColor3s
#define glColor3sv g_nngllColor3sv
#define glColor3ub g_nngllColor3ub
#define glColor3ubv g_nngllColor3ubv
#define glColor3ui g_nngllColor3ui
#define glColor3uiv g_nngllColor3uiv
#define glColor3us g_nngllColor3us
#define glColor3usv g_nngllColor3usv
#define glColor4b g_nngllColor4b
#define glColor4bv g_nngllColor4bv
#define glColor4d g_nngllColor4d
#define glColor4dv g_nngllColor4dv
#define glColor4f g_nngllColor4f
#define glColor4fv g_nngllColor4fv
#define glColor4i g_nngllColor4i
#define glColor4iv g_nngllColor4iv
#define glColor4s g_nngllColor4s
#define glColor4sv g_nngllColor4sv
#define glColor4ub g_nngllColor4ub
#define glColor4ubv g_nngllColor4ubv
#define glColor4ui g_nngllColor4ui
#define glColor4uiv g_nngllColor4uiv
#define glColor4us g_nngllColor4us
#define glColor4usv g_nngllColor4usv
#define glEdgeFlag g_nngllEdgeFlag
#define glEdgeFlagv g_nngllEdgeFlagv
#define glEnd g_nngllEnd
#define glIndexd g_nngllIndexd
#define glIndexdv g_nngllIndexdv
#define glIndexf g_nngllIndexf
#define glIndexfv g_nngllIndexfv
#define glIndexi g_nngllIndexi
#define glIndexiv g_nngllIndexiv
#define glIndexs g_nngllIndexs
#define glIndexsv g_nngllIndexsv
#define glNormal3b g_nngllNormal3b
#define glNormal3bv g_nngllNormal3bv
#define glNormal3d g_nngllNormal3d
#define glNormal3dv g_nngllNormal3dv
#define glNormal3f g_nngllNormal3f
#define glNormal3fv g_nngllNormal3fv
#define glNormal3i g_nngllNormal3i
#define glNormal3iv g_nngllNormal3iv
#define glNormal3s g_nngllNormal3s
#define glNormal3sv g_nngllNormal3sv
#define glRasterPos2d g_nngllRasterPos2d
#define glRasterPos2dv g_nngllRasterPos2dv
#define glRasterPos2f g_nngllRasterPos2f
#define glRasterPos2fv g_nngllRasterPos2fv
#define glRasterPos2i g_nngllRasterPos2i
#define glRasterPos2iv g_nngllRasterPos2iv
#define glRasterPos2s g_nngllRasterPos2s
#define glRasterPos2sv g_nngllRasterPos2sv
#define glRasterPos3d g_nngllRasterPos3d
#define glRasterPos3dv g_nngllRasterPos3dv
#define glRasterPos3f g_nngllRasterPos3f
#define glRasterPos3fv g_nngllRasterPos3fv
#define glRasterPos3i g_nngllRasterPos3i
#define glRasterPos3iv g_nngllRasterPos3iv
#define glRasterPos3s g_nngllRasterPos3s
#define glRasterPos3sv g_nngllRasterPos3sv
#define glRasterPos4d g_nngllRasterPos4d
#define glRasterPos4dv g_nngllRasterPos4dv
#define glRasterPos4f g_nngllRasterPos4f
#define glRasterPos4fv g_nngllRasterPos4fv
#define glRasterPos4i g_nngllRasterPos4i
#define glRasterPos4iv g_nngllRasterPos4iv
#define glRasterPos4s g_nngllRasterPos4s
#define glRasterPos4sv g_nngllRasterPos4sv
#define glRectd g_nngllRectd
#define glRectdv g_nngllRectdv
#define glRectf g_nngllRectf
#define glRectfv g_nngllRectfv
#define glRecti g_nngllRecti
#define glRectiv g_nngllRectiv
#define glRects g_nngllRects
#define glRectsv g_nngllRectsv
#define glTexCoord1d g_nngllTexCoord1d
#define glTexCoord1dv g_nngllTexCoord1dv
#define glTexCoord1f g_nngllTexCoord1f
#define glTexCoord1fv g_nngllTexCoord1fv
#define glTexCoord1i g_nngllTexCoord1i
#define glTexCoord1iv g_nngllTexCoord1iv
#define glTexCoord1s g_nngllTexCoord1s
#define glTexCoord1sv g_nngllTexCoord1sv
#define glTexCoord2d g_nngllTexCoord2d
#define glTexCoord2dv g_nngllTexCoord2dv
#define glTexCoord2f g_nngllTexCoord2f
#define glTexCoord2fv g_nngllTexCoord2fv
#define glTexCoord2i g_nngllTexCoord2i
#define glTexCoord2iv g_nngllTexCoord2iv
#define glTexCoord2s g_nngllTexCoord2s
#define glTexCoord2sv g_nngllTexCoord2sv
#define glTexCoord3d g_nngllTexCoord3d
#define glTexCoord3dv g_nngllTexCoord3dv
#define glTexCoord3f g_nngllTexCoord3f
#define glTexCoord3fv g_nngllTexCoord3fv
#define glTexCoord3i g_nngllTexCoord3i
#define glTexCoord3iv g_nngllTexCoord3iv
#define glTexCoord3s g_nngllTexCoord3s
#define glTexCoord3sv g_nngllTexCoord3sv
#define glTexCoord4d g_nngllTexCoord4d
#define glTexCoord4dv g_nngllTexCoord4dv
#define glTexCoord4f g_nngllTexCoord4f
#define glTexCoord4fv g_nngllTexCoord4fv
#define glTexCoord4i g_nngllTexCoord4i
#define glTexCoord4iv g_nngllTexCoord4iv
#define glTexCoord4s g_nngllTexCoord4s
#define glTexCoord4sv g_nngllTexCoord4sv
#define glVertex2d g_nngllVertex2d
#define glVertex2dv g_nngllVertex2dv
#define glVertex2f g_nngllVertex2f
#define glVertex2fv g_nngllVertex2fv
#define glVertex2i g_nngllVertex2i
#define glVertex2iv g_nngllVertex2iv
#define glVertex2s g_nngllVertex2s
#define glVertex2sv g_nngllVertex2sv
#define glVertex3d g_nngllVertex3d
#define glVertex3dv g_nngllVertex3dv
#define glVertex3f g_nngllVertex3f
#define glVertex3fv g_nngllVertex3fv
#define glVertex3i g_nngllVertex3i
#define glVertex3iv g_nngllVertex3iv
#define glVertex3s g_nngllVertex3s
#define glVertex3sv g_nngllVertex3sv
#define glVertex4d g_nngllVertex4d
#define glVertex4dv g_nngllVertex4dv
#define glVertex4f g_nngllVertex4f
#define glVertex4fv g_nngllVertex4fv
#define glVertex4i g_nngllVertex4i
#define glVertex4iv g_nngllVertex4iv
#define glVertex4s g_nngllVertex4s
#define glVertex4sv g_nngllVertex4sv
#define glClipPlane g_nngllClipPlane
#define glColorMaterial g_nngllColorMaterial
#define glFogf g_nngllFogf
#define glFogfv g_nngllFogfv
#define glFogi g_nngllFogi
#define glFogiv g_nngllFogiv
#define glLightf g_nngllLightf
#define glLightfv g_nngllLightfv
#define glLighti g_nngllLighti
#define glLightiv g_nngllLightiv
#define glLightModelf g_nngllLightModelf
#define glLightModelfv g_nngllLightModelfv
#define glLightModeli g_nngllLightModeli
#define glLightModeliv g_nngllLightModeliv
#define glLineStipple g_nngllLineStipple
#define glMaterialf g_nngllMaterialf
#define glMaterialfv g_nngllMaterialfv
#define glMateriali g_nngllMateriali
#define glMaterialiv g_nngllMaterialiv
#define glPolygonStipple g_nngllPolygonStipple
#define glShadeModel g_nngllShadeModel
#define glTexEnvf g_nngllTexEnvf
#define glTexEnvfv g_nngllTexEnvfv
#define glTexEnvi g_nngllTexEnvi
#define glTexEnviv g_nngllTexEnviv
#define glTexGend g_nngllTexGend
#define glTexGendv g_nngllTexGendv
#define glTexGenf g_nngllTexGenf
#define glTexGenfv g_nngllTexGenfv
#define glTexGeni g_nngllTexGeni
#define glTexGeniv g_nngllTexGeniv
#define glFeedbackBuffer g_nngllFeedbackBuffer
#define glSelectBuffer g_nngllSelectBuffer
#define glRenderMode g_nngllRenderMode
#define glInitNames g_nngllInitNames
#define glLoadName g_nngllLoadName
#define glPassThrough g_nngllPassThrough
#define glPopName g_nngllPopName
#define glPushName g_nngllPushName
#define glClearAccum g_nngllClearAccum
#define glClearIndex g_nngllClearIndex
#define glIndexMask g_nngllIndexMask
#define glAccum g_nngllAccum
#define glPopAttrib g_nngllPopAttrib
#define glPushAttrib g_nngllPushAttrib
#define glMap1d g_nngllMap1d
#define glMap1f g_nngllMap1f
#define glMap2d g_nngllMap2d
#define glMap2f g_nngllMap2f
#define glMapGrid1d g_nngllMapGrid1d
#define glMapGrid1f g_nngllMapGrid1f
#define glMapGrid2d g_nngllMapGrid2d
#define glMapGrid2f g_nngllMapGrid2f
#define glEvalCoord1d g_nngllEvalCoord1d
#define glEvalCoord1dv g_nngllEvalCoord1dv
#define glEvalCoord1f g_nngllEvalCoord1f
#define glEvalCoord1fv g_nngllEvalCoord1fv
#define glEvalCoord2d g_nngllEvalCoord2d
#define glEvalCoord2dv g_nngllEvalCoord2dv
#define glEvalCoord2f g_nngllEvalCoord2f
#define glEvalCoord2fv g_nngllEvalCoord2fv
#define glEvalMesh1 g_nngllEvalMesh1
#define glEvalPoint1 g_nngllEvalPoint1
#define glEvalMesh2 g_nngllEvalMesh2
#define glEvalPoint2 g_nngllEvalPoint2
#define glAlphaFunc g_nngllAlphaFunc
#define glPixelZoom g_nngllPixelZoom
#define glPixelTransferf g_nngllPixelTransferf
#define glPixelTransferi g_nngllPixelTransferi
#define glPixelMapfv g_nngllPixelMapfv
#define glPixelMapuiv g_nngllPixelMapuiv
#define glPixelMapusv g_nngllPixelMapusv
#define glCopyPixels g_nngllCopyPixels
#define glDrawPixels g_nngllDrawPixels
#define glGetClipPlane g_nngllGetClipPlane
#define glGetLightfv g_nngllGetLightfv
#define glGetLightiv g_nngllGetLightiv
#define glGetMapdv g_nngllGetMapdv
#define glGetMapfv g_nngllGetMapfv
#define glGetMapiv g_nngllGetMapiv
#define glGetMaterialfv g_nngllGetMaterialfv
#define glGetMaterialiv g_nngllGetMaterialiv
#define glGetPixelMapfv g_nngllGetPixelMapfv
#define glGetPixelMapuiv g_nngllGetPixelMapuiv
#define glGetPixelMapusv g_nngllGetPixelMapusv
#define glGetPolygonStipple g_nngllGetPolygonStipple
#define glGetTexEnvfv g_nngllGetTexEnvfv
#define glGetTexEnviv g_nngllGetTexEnviv
#define glGetTexGendv g_nngllGetTexGendv
#define glGetTexGenfv g_nngllGetTexGenfv
#define glGetTexGeniv g_nngllGetTexGeniv
#define glIsList g_nngllIsList
#define glFrustum g_nngllFrustum
#define glLoadIdentity g_nngllLoadIdentity
#define glLoadMatrixf g_nngllLoadMatrixf
#define glLoadMatrixd g_nngllLoadMatrixd
#define glMatrixMode g_nngllMatrixMode
#define glMultMatrixf g_nngllMultMatrixf
#define glMultMatrixd g_nngllMultMatrixd
#define glOrtho g_nngllOrtho
#define glPopMatrix g_nngllPopMatrix
#define glPushMatrix g_nngllPushMatrix
#define glRotated g_nngllRotated
#define glRotatef g_nngllRotatef
#define glScaled g_nngllScaled
#define glScalef g_nngllScalef
#define glTranslated g_nngllTranslated
#define glTranslatef g_nngllTranslatef
NN_GLL_API glCullFaceType g_nngllCullFace;
NN_GLL_API glFrontFaceType g_nngllFrontFace;
NN_GLL_API glHintType g_nngllHint;
NN_GLL_API glLineWidthType g_nngllLineWidth;
NN_GLL_API glPointSizeType g_nngllPointSize;
NN_GLL_API glPolygonModeType g_nngllPolygonMode;
NN_GLL_API glScissorType g_nngllScissor;
NN_GLL_API glTexParameterfType g_nngllTexParameterf;
NN_GLL_API glTexParameterfvType g_nngllTexParameterfv;
NN_GLL_API glTexParameteriType g_nngllTexParameteri;
NN_GLL_API glTexParameterivType g_nngllTexParameteriv;
NN_GLL_API glTexImage1DType g_nngllTexImage1D;
NN_GLL_API glTexImage2DType g_nngllTexImage2D;
NN_GLL_API glDrawBufferType g_nngllDrawBuffer;
NN_GLL_API glClearType g_nngllClear;
NN_GLL_API glClearColorType g_nngllClearColor;
NN_GLL_API glClearStencilType g_nngllClearStencil;
NN_GLL_API glClearDepthType g_nngllClearDepth;
NN_GLL_API glStencilMaskType g_nngllStencilMask;
NN_GLL_API glColorMaskType g_nngllColorMask;
NN_GLL_API glDepthMaskType g_nngllDepthMask;
NN_GLL_API glDisableType g_nngllDisable;
NN_GLL_API glEnableType g_nngllEnable;
NN_GLL_API glFinishType g_nngllFinish;
NN_GLL_API glFlushType g_nngllFlush;
NN_GLL_API glBlendFuncType g_nngllBlendFunc;
NN_GLL_API glLogicOpType g_nngllLogicOp;
NN_GLL_API glStencilFuncType g_nngllStencilFunc;
NN_GLL_API glStencilOpType g_nngllStencilOp;
NN_GLL_API glDepthFuncType g_nngllDepthFunc;
NN_GLL_API glPixelStorefType g_nngllPixelStoref;
NN_GLL_API glPixelStoreiType g_nngllPixelStorei;
NN_GLL_API glReadBufferType g_nngllReadBuffer;
NN_GLL_API glReadPixelsType g_nngllReadPixels;
NN_GLL_API glGetBooleanvType g_nngllGetBooleanv;
NN_GLL_API glGetDoublevType g_nngllGetDoublev;
NN_GLL_API glGetErrorType g_nngllGetError;
NN_GLL_API glGetFloatvType g_nngllGetFloatv;
NN_GLL_API glGetIntegervType g_nngllGetIntegerv;
NN_GLL_API glGetStringType g_nngllGetString;
NN_GLL_API glGetTexImageType g_nngllGetTexImage;
NN_GLL_API glGetTexParameterfvType g_nngllGetTexParameterfv;
NN_GLL_API glGetTexParameterivType g_nngllGetTexParameteriv;
NN_GLL_API glGetTexLevelParameterfvType g_nngllGetTexLevelParameterfv;
NN_GLL_API glGetTexLevelParameterivType g_nngllGetTexLevelParameteriv;
NN_GLL_API glIsEnabledType g_nngllIsEnabled;
NN_GLL_API glDepthRangeType g_nngllDepthRange;
NN_GLL_API glViewportType g_nngllViewport;
NN_GLL_API glNewListType g_nngllNewList;
NN_GLL_API glEndListType g_nngllEndList;
NN_GLL_API glCallListType g_nngllCallList;
NN_GLL_API glCallListsType g_nngllCallLists;
NN_GLL_API glDeleteListsType g_nngllDeleteLists;
NN_GLL_API glGenListsType g_nngllGenLists;
NN_GLL_API glListBaseType g_nngllListBase;
NN_GLL_API glBeginType g_nngllBegin;
NN_GLL_API glBitmapType g_nngllBitmap;
NN_GLL_API glColor3bType g_nngllColor3b;
NN_GLL_API glColor3bvType g_nngllColor3bv;
NN_GLL_API glColor3dType g_nngllColor3d;
NN_GLL_API glColor3dvType g_nngllColor3dv;
NN_GLL_API glColor3fType g_nngllColor3f;
NN_GLL_API glColor3fvType g_nngllColor3fv;
NN_GLL_API glColor3iType g_nngllColor3i;
NN_GLL_API glColor3ivType g_nngllColor3iv;
NN_GLL_API glColor3sType g_nngllColor3s;
NN_GLL_API glColor3svType g_nngllColor3sv;
NN_GLL_API glColor3ubType g_nngllColor3ub;
NN_GLL_API glColor3ubvType g_nngllColor3ubv;
NN_GLL_API glColor3uiType g_nngllColor3ui;
NN_GLL_API glColor3uivType g_nngllColor3uiv;
NN_GLL_API glColor3usType g_nngllColor3us;
NN_GLL_API glColor3usvType g_nngllColor3usv;
NN_GLL_API glColor4bType g_nngllColor4b;
NN_GLL_API glColor4bvType g_nngllColor4bv;
NN_GLL_API glColor4dType g_nngllColor4d;
NN_GLL_API glColor4dvType g_nngllColor4dv;
NN_GLL_API glColor4fType g_nngllColor4f;
NN_GLL_API glColor4fvType g_nngllColor4fv;
NN_GLL_API glColor4iType g_nngllColor4i;
NN_GLL_API glColor4ivType g_nngllColor4iv;
NN_GLL_API glColor4sType g_nngllColor4s;
NN_GLL_API glColor4svType g_nngllColor4sv;
NN_GLL_API glColor4ubType g_nngllColor4ub;
NN_GLL_API glColor4ubvType g_nngllColor4ubv;
NN_GLL_API glColor4uiType g_nngllColor4ui;
NN_GLL_API glColor4uivType g_nngllColor4uiv;
NN_GLL_API glColor4usType g_nngllColor4us;
NN_GLL_API glColor4usvType g_nngllColor4usv;
NN_GLL_API glEdgeFlagType g_nngllEdgeFlag;
NN_GLL_API glEdgeFlagvType g_nngllEdgeFlagv;
NN_GLL_API glEndType g_nngllEnd;
NN_GLL_API glIndexdType g_nngllIndexd;
NN_GLL_API glIndexdvType g_nngllIndexdv;
NN_GLL_API glIndexfType g_nngllIndexf;
NN_GLL_API glIndexfvType g_nngllIndexfv;
NN_GLL_API glIndexiType g_nngllIndexi;
NN_GLL_API glIndexivType g_nngllIndexiv;
NN_GLL_API glIndexsType g_nngllIndexs;
NN_GLL_API glIndexsvType g_nngllIndexsv;
NN_GLL_API glNormal3bType g_nngllNormal3b;
NN_GLL_API glNormal3bvType g_nngllNormal3bv;
NN_GLL_API glNormal3dType g_nngllNormal3d;
NN_GLL_API glNormal3dvType g_nngllNormal3dv;
NN_GLL_API glNormal3fType g_nngllNormal3f;
NN_GLL_API glNormal3fvType g_nngllNormal3fv;
NN_GLL_API glNormal3iType g_nngllNormal3i;
NN_GLL_API glNormal3ivType g_nngllNormal3iv;
NN_GLL_API glNormal3sType g_nngllNormal3s;
NN_GLL_API glNormal3svType g_nngllNormal3sv;
NN_GLL_API glRasterPos2dType g_nngllRasterPos2d;
NN_GLL_API glRasterPos2dvType g_nngllRasterPos2dv;
NN_GLL_API glRasterPos2fType g_nngllRasterPos2f;
NN_GLL_API glRasterPos2fvType g_nngllRasterPos2fv;
NN_GLL_API glRasterPos2iType g_nngllRasterPos2i;
NN_GLL_API glRasterPos2ivType g_nngllRasterPos2iv;
NN_GLL_API glRasterPos2sType g_nngllRasterPos2s;
NN_GLL_API glRasterPos2svType g_nngllRasterPos2sv;
NN_GLL_API glRasterPos3dType g_nngllRasterPos3d;
NN_GLL_API glRasterPos3dvType g_nngllRasterPos3dv;
NN_GLL_API glRasterPos3fType g_nngllRasterPos3f;
NN_GLL_API glRasterPos3fvType g_nngllRasterPos3fv;
NN_GLL_API glRasterPos3iType g_nngllRasterPos3i;
NN_GLL_API glRasterPos3ivType g_nngllRasterPos3iv;
NN_GLL_API glRasterPos3sType g_nngllRasterPos3s;
NN_GLL_API glRasterPos3svType g_nngllRasterPos3sv;
NN_GLL_API glRasterPos4dType g_nngllRasterPos4d;
NN_GLL_API glRasterPos4dvType g_nngllRasterPos4dv;
NN_GLL_API glRasterPos4fType g_nngllRasterPos4f;
NN_GLL_API glRasterPos4fvType g_nngllRasterPos4fv;
NN_GLL_API glRasterPos4iType g_nngllRasterPos4i;
NN_GLL_API glRasterPos4ivType g_nngllRasterPos4iv;
NN_GLL_API glRasterPos4sType g_nngllRasterPos4s;
NN_GLL_API glRasterPos4svType g_nngllRasterPos4sv;
NN_GLL_API glRectdType g_nngllRectd;
NN_GLL_API glRectdvType g_nngllRectdv;
NN_GLL_API glRectfType g_nngllRectf;
NN_GLL_API glRectfvType g_nngllRectfv;
NN_GLL_API glRectiType g_nngllRecti;
NN_GLL_API glRectivType g_nngllRectiv;
NN_GLL_API glRectsType g_nngllRects;
NN_GLL_API glRectsvType g_nngllRectsv;
NN_GLL_API glTexCoord1dType g_nngllTexCoord1d;
NN_GLL_API glTexCoord1dvType g_nngllTexCoord1dv;
NN_GLL_API glTexCoord1fType g_nngllTexCoord1f;
NN_GLL_API glTexCoord1fvType g_nngllTexCoord1fv;
NN_GLL_API glTexCoord1iType g_nngllTexCoord1i;
NN_GLL_API glTexCoord1ivType g_nngllTexCoord1iv;
NN_GLL_API glTexCoord1sType g_nngllTexCoord1s;
NN_GLL_API glTexCoord1svType g_nngllTexCoord1sv;
NN_GLL_API glTexCoord2dType g_nngllTexCoord2d;
NN_GLL_API glTexCoord2dvType g_nngllTexCoord2dv;
NN_GLL_API glTexCoord2fType g_nngllTexCoord2f;
NN_GLL_API glTexCoord2fvType g_nngllTexCoord2fv;
NN_GLL_API glTexCoord2iType g_nngllTexCoord2i;
NN_GLL_API glTexCoord2ivType g_nngllTexCoord2iv;
NN_GLL_API glTexCoord2sType g_nngllTexCoord2s;
NN_GLL_API glTexCoord2svType g_nngllTexCoord2sv;
NN_GLL_API glTexCoord3dType g_nngllTexCoord3d;
NN_GLL_API glTexCoord3dvType g_nngllTexCoord3dv;
NN_GLL_API glTexCoord3fType g_nngllTexCoord3f;
NN_GLL_API glTexCoord3fvType g_nngllTexCoord3fv;
NN_GLL_API glTexCoord3iType g_nngllTexCoord3i;
NN_GLL_API glTexCoord3ivType g_nngllTexCoord3iv;
NN_GLL_API glTexCoord3sType g_nngllTexCoord3s;
NN_GLL_API glTexCoord3svType g_nngllTexCoord3sv;
NN_GLL_API glTexCoord4dType g_nngllTexCoord4d;
NN_GLL_API glTexCoord4dvType g_nngllTexCoord4dv;
NN_GLL_API glTexCoord4fType g_nngllTexCoord4f;
NN_GLL_API glTexCoord4fvType g_nngllTexCoord4fv;
NN_GLL_API glTexCoord4iType g_nngllTexCoord4i;
NN_GLL_API glTexCoord4ivType g_nngllTexCoord4iv;
NN_GLL_API glTexCoord4sType g_nngllTexCoord4s;
NN_GLL_API glTexCoord4svType g_nngllTexCoord4sv;
NN_GLL_API glVertex2dType g_nngllVertex2d;
NN_GLL_API glVertex2dvType g_nngllVertex2dv;
NN_GLL_API glVertex2fType g_nngllVertex2f;
NN_GLL_API glVertex2fvType g_nngllVertex2fv;
NN_GLL_API glVertex2iType g_nngllVertex2i;
NN_GLL_API glVertex2ivType g_nngllVertex2iv;
NN_GLL_API glVertex2sType g_nngllVertex2s;
NN_GLL_API glVertex2svType g_nngllVertex2sv;
NN_GLL_API glVertex3dType g_nngllVertex3d;
NN_GLL_API glVertex3dvType g_nngllVertex3dv;
NN_GLL_API glVertex3fType g_nngllVertex3f;
NN_GLL_API glVertex3fvType g_nngllVertex3fv;
NN_GLL_API glVertex3iType g_nngllVertex3i;
NN_GLL_API glVertex3ivType g_nngllVertex3iv;
NN_GLL_API glVertex3sType g_nngllVertex3s;
NN_GLL_API glVertex3svType g_nngllVertex3sv;
NN_GLL_API glVertex4dType g_nngllVertex4d;
NN_GLL_API glVertex4dvType g_nngllVertex4dv;
NN_GLL_API glVertex4fType g_nngllVertex4f;
NN_GLL_API glVertex4fvType g_nngllVertex4fv;
NN_GLL_API glVertex4iType g_nngllVertex4i;
NN_GLL_API glVertex4ivType g_nngllVertex4iv;
NN_GLL_API glVertex4sType g_nngllVertex4s;
NN_GLL_API glVertex4svType g_nngllVertex4sv;
NN_GLL_API glClipPlaneType g_nngllClipPlane;
NN_GLL_API glColorMaterialType g_nngllColorMaterial;
NN_GLL_API glFogfType g_nngllFogf;
NN_GLL_API glFogfvType g_nngllFogfv;
NN_GLL_API glFogiType g_nngllFogi;
NN_GLL_API glFogivType g_nngllFogiv;
NN_GLL_API glLightfType g_nngllLightf;
NN_GLL_API glLightfvType g_nngllLightfv;
NN_GLL_API glLightiType g_nngllLighti;
NN_GLL_API glLightivType g_nngllLightiv;
NN_GLL_API glLightModelfType g_nngllLightModelf;
NN_GLL_API glLightModelfvType g_nngllLightModelfv;
NN_GLL_API glLightModeliType g_nngllLightModeli;
NN_GLL_API glLightModelivType g_nngllLightModeliv;
NN_GLL_API glLineStippleType g_nngllLineStipple;
NN_GLL_API glMaterialfType g_nngllMaterialf;
NN_GLL_API glMaterialfvType g_nngllMaterialfv;
NN_GLL_API glMaterialiType g_nngllMateriali;
NN_GLL_API glMaterialivType g_nngllMaterialiv;
NN_GLL_API glPolygonStippleType g_nngllPolygonStipple;
NN_GLL_API glShadeModelType g_nngllShadeModel;
NN_GLL_API glTexEnvfType g_nngllTexEnvf;
NN_GLL_API glTexEnvfvType g_nngllTexEnvfv;
NN_GLL_API glTexEnviType g_nngllTexEnvi;
NN_GLL_API glTexEnvivType g_nngllTexEnviv;
NN_GLL_API glTexGendType g_nngllTexGend;
NN_GLL_API glTexGendvType g_nngllTexGendv;
NN_GLL_API glTexGenfType g_nngllTexGenf;
NN_GLL_API glTexGenfvType g_nngllTexGenfv;
NN_GLL_API glTexGeniType g_nngllTexGeni;
NN_GLL_API glTexGenivType g_nngllTexGeniv;
NN_GLL_API glFeedbackBufferType g_nngllFeedbackBuffer;
NN_GLL_API glSelectBufferType g_nngllSelectBuffer;
NN_GLL_API glRenderModeType g_nngllRenderMode;
NN_GLL_API glInitNamesType g_nngllInitNames;
NN_GLL_API glLoadNameType g_nngllLoadName;
NN_GLL_API glPassThroughType g_nngllPassThrough;
NN_GLL_API glPopNameType g_nngllPopName;
NN_GLL_API glPushNameType g_nngllPushName;
NN_GLL_API glClearAccumType g_nngllClearAccum;
NN_GLL_API glClearIndexType g_nngllClearIndex;
NN_GLL_API glIndexMaskType g_nngllIndexMask;
NN_GLL_API glAccumType g_nngllAccum;
NN_GLL_API glPopAttribType g_nngllPopAttrib;
NN_GLL_API glPushAttribType g_nngllPushAttrib;
NN_GLL_API glMap1dType g_nngllMap1d;
NN_GLL_API glMap1fType g_nngllMap1f;
NN_GLL_API glMap2dType g_nngllMap2d;
NN_GLL_API glMap2fType g_nngllMap2f;
NN_GLL_API glMapGrid1dType g_nngllMapGrid1d;
NN_GLL_API glMapGrid1fType g_nngllMapGrid1f;
NN_GLL_API glMapGrid2dType g_nngllMapGrid2d;
NN_GLL_API glMapGrid2fType g_nngllMapGrid2f;
NN_GLL_API glEvalCoord1dType g_nngllEvalCoord1d;
NN_GLL_API glEvalCoord1dvType g_nngllEvalCoord1dv;
NN_GLL_API glEvalCoord1fType g_nngllEvalCoord1f;
NN_GLL_API glEvalCoord1fvType g_nngllEvalCoord1fv;
NN_GLL_API glEvalCoord2dType g_nngllEvalCoord2d;
NN_GLL_API glEvalCoord2dvType g_nngllEvalCoord2dv;
NN_GLL_API glEvalCoord2fType g_nngllEvalCoord2f;
NN_GLL_API glEvalCoord2fvType g_nngllEvalCoord2fv;
NN_GLL_API glEvalMesh1Type g_nngllEvalMesh1;
NN_GLL_API glEvalPoint1Type g_nngllEvalPoint1;
NN_GLL_API glEvalMesh2Type g_nngllEvalMesh2;
NN_GLL_API glEvalPoint2Type g_nngllEvalPoint2;
NN_GLL_API glAlphaFuncType g_nngllAlphaFunc;
NN_GLL_API glPixelZoomType g_nngllPixelZoom;
NN_GLL_API glPixelTransferfType g_nngllPixelTransferf;
NN_GLL_API glPixelTransferiType g_nngllPixelTransferi;
NN_GLL_API glPixelMapfvType g_nngllPixelMapfv;
NN_GLL_API glPixelMapuivType g_nngllPixelMapuiv;
NN_GLL_API glPixelMapusvType g_nngllPixelMapusv;
NN_GLL_API glCopyPixelsType g_nngllCopyPixels;
NN_GLL_API glDrawPixelsType g_nngllDrawPixels;
NN_GLL_API glGetClipPlaneType g_nngllGetClipPlane;
NN_GLL_API glGetLightfvType g_nngllGetLightfv;
NN_GLL_API glGetLightivType g_nngllGetLightiv;
NN_GLL_API glGetMapdvType g_nngllGetMapdv;
NN_GLL_API glGetMapfvType g_nngllGetMapfv;
NN_GLL_API glGetMapivType g_nngllGetMapiv;
NN_GLL_API glGetMaterialfvType g_nngllGetMaterialfv;
NN_GLL_API glGetMaterialivType g_nngllGetMaterialiv;
NN_GLL_API glGetPixelMapfvType g_nngllGetPixelMapfv;
NN_GLL_API glGetPixelMapuivType g_nngllGetPixelMapuiv;
NN_GLL_API glGetPixelMapusvType g_nngllGetPixelMapusv;
NN_GLL_API glGetPolygonStippleType g_nngllGetPolygonStipple;
NN_GLL_API glGetTexEnvfvType g_nngllGetTexEnvfv;
NN_GLL_API glGetTexEnvivType g_nngllGetTexEnviv;
NN_GLL_API glGetTexGendvType g_nngllGetTexGendv;
NN_GLL_API glGetTexGenfvType g_nngllGetTexGenfv;
NN_GLL_API glGetTexGenivType g_nngllGetTexGeniv;
NN_GLL_API glIsListType g_nngllIsList;
NN_GLL_API glFrustumType g_nngllFrustum;
NN_GLL_API glLoadIdentityType g_nngllLoadIdentity;
NN_GLL_API glLoadMatrixfType g_nngllLoadMatrixf;
NN_GLL_API glLoadMatrixdType g_nngllLoadMatrixd;
NN_GLL_API glMatrixModeType g_nngllMatrixMode;
NN_GLL_API glMultMatrixfType g_nngllMultMatrixf;
NN_GLL_API glMultMatrixdType g_nngllMultMatrixd;
NN_GLL_API glOrthoType g_nngllOrtho;
NN_GLL_API glPopMatrixType g_nngllPopMatrix;
NN_GLL_API glPushMatrixType g_nngllPushMatrix;
NN_GLL_API glRotatedType g_nngllRotated;
NN_GLL_API glRotatefType g_nngllRotatef;
NN_GLL_API glScaledType g_nngllScaled;
NN_GLL_API glScalefType g_nngllScalef;
NN_GLL_API glTranslatedType g_nngllTranslated;
NN_GLL_API glTranslatefType g_nngllTranslatef;
#endif // defined( NN_BUILD_CONFIG_OS_WIN32 )
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_1_0();
#endif // GL_VERSION_1_0

#if !defined(GL_VERSION_1_1)
#define GL_VERSION_1_1

typedef float GLclampf;
typedef double GLclampd;
#define GL_COLOR_LOGIC_OP 0x0BF2 // NOLINT
#define GL_POLYGON_OFFSET_UNITS 0x2A00 // NOLINT
#define GL_POLYGON_OFFSET_POINT 0x2A01 // NOLINT
#define GL_POLYGON_OFFSET_LINE 0x2A02 // NOLINT
#define GL_POLYGON_OFFSET_FILL 0x8037 // NOLINT
#define GL_POLYGON_OFFSET_FACTOR 0x8038 // NOLINT
#define GL_TEXTURE_BINDING_1D 0x8068 // NOLINT
#define GL_TEXTURE_BINDING_2D 0x8069 // NOLINT
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003 // NOLINT
#define GL_TEXTURE_RED_SIZE 0x805C // NOLINT
#define GL_TEXTURE_GREEN_SIZE 0x805D // NOLINT
#define GL_TEXTURE_BLUE_SIZE 0x805E // NOLINT
#define GL_TEXTURE_ALPHA_SIZE 0x805F // NOLINT
#define GL_DOUBLE 0x140A // NOLINT
#define GL_PROXY_TEXTURE_1D 0x8063 // NOLINT
#define GL_PROXY_TEXTURE_2D 0x8064 // NOLINT
#define GL_R3_G3_B2 0x2A10 // NOLINT
#define GL_RGB4 0x804F // NOLINT
#define GL_RGB5 0x8050 // NOLINT
#define GL_RGB8 0x8051 // NOLINT
#define GL_RGB10 0x8052 // NOLINT
#define GL_RGB12 0x8053 // NOLINT
#define GL_RGB16 0x8054 // NOLINT
#define GL_RGBA2 0x8055 // NOLINT
#define GL_RGBA4 0x8056 // NOLINT
#define GL_RGB5_A1 0x8057 // NOLINT
#define GL_RGBA8 0x8058 // NOLINT
#define GL_RGB10_A2 0x8059 // NOLINT
#define GL_RGBA12 0x805A // NOLINT
#define GL_RGBA16 0x805B // NOLINT
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001 // NOLINT
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002 // NOLINT
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF // NOLINT
#define GL_VERTEX_ARRAY_POINTER 0x808E // NOLINT
#define GL_NORMAL_ARRAY_POINTER 0x808F // NOLINT
#define GL_COLOR_ARRAY_POINTER 0x8090 // NOLINT
#define GL_INDEX_ARRAY_POINTER 0x8091 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092 // NOLINT
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093 // NOLINT
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0 // NOLINT
#define GL_SELECTION_BUFFER_POINTER 0x0DF3 // NOLINT
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1 // NOLINT
#define GL_INDEX_LOGIC_OP 0x0BF1 // NOLINT
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B // NOLINT
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1 // NOLINT
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2 // NOLINT
#define GL_SELECTION_BUFFER_SIZE 0x0DF4 // NOLINT
#define GL_VERTEX_ARRAY 0x8074 // NOLINT
#define GL_NORMAL_ARRAY 0x8075 // NOLINT
#define GL_COLOR_ARRAY 0x8076 // NOLINT
#define GL_INDEX_ARRAY 0x8077 // NOLINT
#define GL_TEXTURE_COORD_ARRAY 0x8078 // NOLINT
#define GL_EDGE_FLAG_ARRAY 0x8079 // NOLINT
#define GL_VERTEX_ARRAY_SIZE 0x807A // NOLINT
#define GL_VERTEX_ARRAY_TYPE 0x807B // NOLINT
#define GL_VERTEX_ARRAY_STRIDE 0x807C // NOLINT
#define GL_NORMAL_ARRAY_TYPE 0x807E // NOLINT
#define GL_NORMAL_ARRAY_STRIDE 0x807F // NOLINT
#define GL_COLOR_ARRAY_SIZE 0x8081 // NOLINT
#define GL_COLOR_ARRAY_TYPE 0x8082 // NOLINT
#define GL_COLOR_ARRAY_STRIDE 0x8083 // NOLINT
#define GL_INDEX_ARRAY_TYPE 0x8085 // NOLINT
#define GL_INDEX_ARRAY_STRIDE 0x8086 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A // NOLINT
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C // NOLINT
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060 // NOLINT
#define GL_TEXTURE_INTENSITY_SIZE 0x8061 // NOLINT
#define GL_TEXTURE_PRIORITY 0x8066 // NOLINT
#define GL_TEXTURE_RESIDENT 0x8067 // NOLINT
#define GL_ALPHA4 0x803B // NOLINT
#define GL_ALPHA8 0x803C // NOLINT
#define GL_ALPHA12 0x803D // NOLINT
#define GL_ALPHA16 0x803E // NOLINT
#define GL_LUMINANCE4 0x803F // NOLINT
#define GL_LUMINANCE8 0x8040 // NOLINT
#define GL_LUMINANCE12 0x8041 // NOLINT
#define GL_LUMINANCE16 0x8042 // NOLINT
#define GL_LUMINANCE4_ALPHA4 0x8043 // NOLINT
#define GL_LUMINANCE6_ALPHA2 0x8044 // NOLINT
#define GL_LUMINANCE8_ALPHA8 0x8045 // NOLINT
#define GL_LUMINANCE12_ALPHA4 0x8046 // NOLINT
#define GL_LUMINANCE12_ALPHA12 0x8047 // NOLINT
#define GL_LUMINANCE16_ALPHA16 0x8048 // NOLINT
#define GL_INTENSITY 0x8049 // NOLINT
#define GL_INTENSITY4 0x804A // NOLINT
#define GL_INTENSITY8 0x804B // NOLINT
#define GL_INTENSITY12 0x804C // NOLINT
#define GL_INTENSITY16 0x804D // NOLINT
#define GL_V2F 0x2A20 // NOLINT
#define GL_V3F 0x2A21 // NOLINT
#define GL_C4UB_V2F 0x2A22 // NOLINT
#define GL_C4UB_V3F 0x2A23 // NOLINT
#define GL_C3F_V3F 0x2A24 // NOLINT
#define GL_N3F_V3F 0x2A25 // NOLINT
#define GL_C4F_N3F_V3F 0x2A26 // NOLINT
#define GL_T2F_V3F 0x2A27 // NOLINT
#define GL_T4F_V4F 0x2A28 // NOLINT
#define GL_T2F_C4UB_V3F 0x2A29 // NOLINT
#define GL_T2F_C3F_V3F 0x2A2A // NOLINT
#define GL_T2F_N3F_V3F 0x2A2B // NOLINT
#define GL_T2F_C4F_N3F_V3F 0x2A2C // NOLINT
#define GL_T4F_C4F_N3F_V4F 0x2A2D // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDrawArraysType )( GLenum mode, GLint first, GLsizei count );
typedef void ( NN_GLL_GL_APIENTRY *glDrawElementsType )( GLenum mode, GLsizei count, GLenum type, const void *indices );
typedef void ( NN_GLL_GL_APIENTRY *glGetPointervType )( GLenum pname, void **params );
typedef void ( NN_GLL_GL_APIENTRY *glPolygonOffsetType )( GLfloat factor, GLfloat units );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTexImage1DType )( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTexImage2DType )( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTexSubImage1DType )( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTexSubImage2DType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glTexSubImage1DType )( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTexSubImage2DType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glBindTextureType )( GLenum target, GLuint texture );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteTexturesType )( GLsizei n, const GLuint *textures );
typedef void ( NN_GLL_GL_APIENTRY *glGenTexturesType )( GLsizei n, GLuint *textures );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsTextureType )( GLuint texture );
typedef void ( NN_GLL_GL_APIENTRY *glArrayElementType )( GLint i );
typedef void ( NN_GLL_GL_APIENTRY *glColorPointerType )( GLint size, GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glDisableClientStateType )( GLenum array );
typedef void ( NN_GLL_GL_APIENTRY *glEdgeFlagPointerType )( GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glEnableClientStateType )( GLenum array );
typedef void ( NN_GLL_GL_APIENTRY *glIndexPointerType )( GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glInterleavedArraysType )( GLenum format, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glNormalPointerType )( GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordPointerType )( GLint size, GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glVertexPointerType )( GLint size, GLenum type, GLsizei stride, const void *pointer );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glAreTexturesResidentType )( GLsizei n, const GLuint *textures, GLboolean *residences );
typedef void ( NN_GLL_GL_APIENTRY *glPrioritizeTexturesType )( GLsizei n, const GLuint *textures, const GLfloat *priorities );
typedef void ( NN_GLL_GL_APIENTRY *glIndexubType )( GLubyte c );
typedef void ( NN_GLL_GL_APIENTRY *glIndexubvType )( const GLubyte *c );
typedef void ( NN_GLL_GL_APIENTRY *glPopClientAttribType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glPushClientAttribType )( GLbitfield mask );
#define glDrawArrays g_nngllDrawArrays
#define glDrawElements g_nngllDrawElements
#define glGetPointerv g_nngllGetPointerv
#define glPolygonOffset g_nngllPolygonOffset
#define glCopyTexImage1D g_nngllCopyTexImage1D
#define glCopyTexImage2D g_nngllCopyTexImage2D
#define glCopyTexSubImage1D g_nngllCopyTexSubImage1D
#define glCopyTexSubImage2D g_nngllCopyTexSubImage2D
#define glTexSubImage1D g_nngllTexSubImage1D
#define glTexSubImage2D g_nngllTexSubImage2D
#define glBindTexture g_nngllBindTexture
#define glDeleteTextures g_nngllDeleteTextures
#define glGenTextures g_nngllGenTextures
#define glIsTexture g_nngllIsTexture
#define glArrayElement g_nngllArrayElement
#define glColorPointer g_nngllColorPointer
#define glDisableClientState g_nngllDisableClientState
#define glEdgeFlagPointer g_nngllEdgeFlagPointer
#define glEnableClientState g_nngllEnableClientState
#define glIndexPointer g_nngllIndexPointer
#define glInterleavedArrays g_nngllInterleavedArrays
#define glNormalPointer g_nngllNormalPointer
#define glTexCoordPointer g_nngllTexCoordPointer
#define glVertexPointer g_nngllVertexPointer
#define glAreTexturesResident g_nngllAreTexturesResident
#define glPrioritizeTextures g_nngllPrioritizeTextures
#define glIndexub g_nngllIndexub
#define glIndexubv g_nngllIndexubv
#define glPopClientAttrib g_nngllPopClientAttrib
#define glPushClientAttrib g_nngllPushClientAttrib
NN_GLL_API glDrawArraysType g_nngllDrawArrays;
NN_GLL_API glDrawElementsType g_nngllDrawElements;
NN_GLL_API glGetPointervType g_nngllGetPointerv;
NN_GLL_API glPolygonOffsetType g_nngllPolygonOffset;
NN_GLL_API glCopyTexImage1DType g_nngllCopyTexImage1D;
NN_GLL_API glCopyTexImage2DType g_nngllCopyTexImage2D;
NN_GLL_API glCopyTexSubImage1DType g_nngllCopyTexSubImage1D;
NN_GLL_API glCopyTexSubImage2DType g_nngllCopyTexSubImage2D;
NN_GLL_API glTexSubImage1DType g_nngllTexSubImage1D;
NN_GLL_API glTexSubImage2DType g_nngllTexSubImage2D;
NN_GLL_API glBindTextureType g_nngllBindTexture;
NN_GLL_API glDeleteTexturesType g_nngllDeleteTextures;
NN_GLL_API glGenTexturesType g_nngllGenTextures;
NN_GLL_API glIsTextureType g_nngllIsTexture;
NN_GLL_API glArrayElementType g_nngllArrayElement;
NN_GLL_API glColorPointerType g_nngllColorPointer;
NN_GLL_API glDisableClientStateType g_nngllDisableClientState;
NN_GLL_API glEdgeFlagPointerType g_nngllEdgeFlagPointer;
NN_GLL_API glEnableClientStateType g_nngllEnableClientState;
NN_GLL_API glIndexPointerType g_nngllIndexPointer;
NN_GLL_API glInterleavedArraysType g_nngllInterleavedArrays;
NN_GLL_API glNormalPointerType g_nngllNormalPointer;
NN_GLL_API glTexCoordPointerType g_nngllTexCoordPointer;
NN_GLL_API glVertexPointerType g_nngllVertexPointer;
NN_GLL_API glAreTexturesResidentType g_nngllAreTexturesResident;
NN_GLL_API glPrioritizeTexturesType g_nngllPrioritizeTextures;
NN_GLL_API glIndexubType g_nngllIndexub;
NN_GLL_API glIndexubvType g_nngllIndexubv;
NN_GLL_API glPopClientAttribType g_nngllPopClientAttrib;
NN_GLL_API glPushClientAttribType g_nngllPushClientAttrib;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_1_1();
#endif // GL_VERSION_1_1

#if !defined(GL_VERSION_1_2)
#define GL_VERSION_1_2

#define GL_UNSIGNED_BYTE_3_3_2 0x8032 // NOLINT
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033 // NOLINT
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034 // NOLINT
#define GL_UNSIGNED_INT_8_8_8_8 0x8035 // NOLINT
#define GL_UNSIGNED_INT_10_10_10_2 0x8036 // NOLINT
#define GL_TEXTURE_BINDING_3D 0x806A // NOLINT
#define GL_PACK_SKIP_IMAGES 0x806B // NOLINT
#define GL_PACK_IMAGE_HEIGHT 0x806C // NOLINT
#define GL_UNPACK_SKIP_IMAGES 0x806D // NOLINT
#define GL_UNPACK_IMAGE_HEIGHT 0x806E // NOLINT
#define GL_TEXTURE_3D 0x806F // NOLINT
#define GL_PROXY_TEXTURE_3D 0x8070 // NOLINT
#define GL_TEXTURE_DEPTH 0x8071 // NOLINT
#define GL_TEXTURE_WRAP_R 0x8072 // NOLINT
#define GL_MAX_3D_TEXTURE_SIZE 0x8073 // NOLINT
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362 // NOLINT
#define GL_UNSIGNED_SHORT_5_6_5 0x8363 // NOLINT
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364 // NOLINT
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365 // NOLINT
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366 // NOLINT
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367 // NOLINT
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368 // NOLINT
#define GL_BGR 0x80E0 // NOLINT
#define GL_BGRA 0x80E1 // NOLINT
#define GL_MAX_ELEMENTS_VERTICES 0x80E8 // NOLINT
#define GL_MAX_ELEMENTS_INDICES 0x80E9 // NOLINT
#define GL_CLAMP_TO_EDGE 0x812F // NOLINT
#define GL_TEXTURE_MIN_LOD 0x813A // NOLINT
#define GL_TEXTURE_MAX_LOD 0x813B // NOLINT
#define GL_TEXTURE_BASE_LEVEL 0x813C // NOLINT
#define GL_TEXTURE_MAX_LEVEL 0x813D // NOLINT
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12 // NOLINT
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13 // NOLINT
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22 // NOLINT
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23 // NOLINT
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E // NOLINT
#define GL_RESCALE_NORMAL 0x803A // NOLINT
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8 // NOLINT
#define GL_SINGLE_COLOR 0x81F9 // NOLINT
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA // NOLINT
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDrawRangeElementsType )( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices );
typedef void ( NN_GLL_GL_APIENTRY *glTexImage3DType )( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTexSubImage3DType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTexSubImage3DType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
#define glDrawRangeElements g_nngllDrawRangeElements
#define glTexImage3D g_nngllTexImage3D
#define glTexSubImage3D g_nngllTexSubImage3D
#define glCopyTexSubImage3D g_nngllCopyTexSubImage3D
NN_GLL_API glDrawRangeElementsType g_nngllDrawRangeElements;
NN_GLL_API glTexImage3DType g_nngllTexImage3D;
NN_GLL_API glTexSubImage3DType g_nngllTexSubImage3D;
NN_GLL_API glCopyTexSubImage3DType g_nngllCopyTexSubImage3D;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_1_2();
#endif // GL_VERSION_1_2

#if !defined(GL_VERSION_1_3)
#define GL_VERSION_1_3

#define GL_TEXTURE0 0x84C0 // NOLINT
#define GL_TEXTURE1 0x84C1 // NOLINT
#define GL_TEXTURE2 0x84C2 // NOLINT
#define GL_TEXTURE3 0x84C3 // NOLINT
#define GL_TEXTURE4 0x84C4 // NOLINT
#define GL_TEXTURE5 0x84C5 // NOLINT
#define GL_TEXTURE6 0x84C6 // NOLINT
#define GL_TEXTURE7 0x84C7 // NOLINT
#define GL_TEXTURE8 0x84C8 // NOLINT
#define GL_TEXTURE9 0x84C9 // NOLINT
#define GL_TEXTURE10 0x84CA // NOLINT
#define GL_TEXTURE11 0x84CB // NOLINT
#define GL_TEXTURE12 0x84CC // NOLINT
#define GL_TEXTURE13 0x84CD // NOLINT
#define GL_TEXTURE14 0x84CE // NOLINT
#define GL_TEXTURE15 0x84CF // NOLINT
#define GL_TEXTURE16 0x84D0 // NOLINT
#define GL_TEXTURE17 0x84D1 // NOLINT
#define GL_TEXTURE18 0x84D2 // NOLINT
#define GL_TEXTURE19 0x84D3 // NOLINT
#define GL_TEXTURE20 0x84D4 // NOLINT
#define GL_TEXTURE21 0x84D5 // NOLINT
#define GL_TEXTURE22 0x84D6 // NOLINT
#define GL_TEXTURE23 0x84D7 // NOLINT
#define GL_TEXTURE24 0x84D8 // NOLINT
#define GL_TEXTURE25 0x84D9 // NOLINT
#define GL_TEXTURE26 0x84DA // NOLINT
#define GL_TEXTURE27 0x84DB // NOLINT
#define GL_TEXTURE28 0x84DC // NOLINT
#define GL_TEXTURE29 0x84DD // NOLINT
#define GL_TEXTURE30 0x84DE // NOLINT
#define GL_TEXTURE31 0x84DF // NOLINT
#define GL_ACTIVE_TEXTURE 0x84E0 // NOLINT
#define GL_MULTISAMPLE 0x809D // NOLINT
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E // NOLINT
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F // NOLINT
#define GL_SAMPLE_COVERAGE 0x80A0 // NOLINT
#define GL_SAMPLE_BUFFERS 0x80A8 // NOLINT
#define GL_SAMPLES 0x80A9 // NOLINT
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA // NOLINT
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB // NOLINT
#define GL_TEXTURE_CUBE_MAP 0x8513 // NOLINT
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514 // NOLINT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515 // NOLINT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516 // NOLINT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517 // NOLINT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518 // NOLINT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519 // NOLINT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A // NOLINT
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B // NOLINT
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C // NOLINT
#define GL_COMPRESSED_RGB 0x84ED // NOLINT
#define GL_COMPRESSED_RGBA 0x84EE // NOLINT
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF // NOLINT
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0 // NOLINT
#define GL_TEXTURE_COMPRESSED 0x86A1 // NOLINT
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2 // NOLINT
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3 // NOLINT
#define GL_CLAMP_TO_BORDER 0x812D // NOLINT
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1 // NOLINT
#define GL_MAX_TEXTURE_UNITS 0x84E2 // NOLINT
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3 // NOLINT
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4 // NOLINT
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5 // NOLINT
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6 // NOLINT
#define GL_MULTISAMPLE_BIT 0x20000000 // NOLINT
#define GL_NORMAL_MAP 0x8511 // NOLINT
#define GL_REFLECTION_MAP 0x8512 // NOLINT
#define GL_COMPRESSED_ALPHA 0x84E9 // NOLINT
#define GL_COMPRESSED_LUMINANCE 0x84EA // NOLINT
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB // NOLINT
#define GL_COMPRESSED_INTENSITY 0x84EC // NOLINT
#define GL_COMBINE 0x8570 // NOLINT
#define GL_COMBINE_RGB 0x8571 // NOLINT
#define GL_COMBINE_ALPHA 0x8572 // NOLINT
#define GL_SOURCE0_RGB 0x8580 // NOLINT
#define GL_SOURCE1_RGB 0x8581 // NOLINT
#define GL_SOURCE2_RGB 0x8582 // NOLINT
#define GL_SOURCE0_ALPHA 0x8588 // NOLINT
#define GL_SOURCE1_ALPHA 0x8589 // NOLINT
#define GL_SOURCE2_ALPHA 0x858A // NOLINT
#define GL_OPERAND0_RGB 0x8590 // NOLINT
#define GL_OPERAND1_RGB 0x8591 // NOLINT
#define GL_OPERAND2_RGB 0x8592 // NOLINT
#define GL_OPERAND0_ALPHA 0x8598 // NOLINT
#define GL_OPERAND1_ALPHA 0x8599 // NOLINT
#define GL_OPERAND2_ALPHA 0x859A // NOLINT
#define GL_RGB_SCALE 0x8573 // NOLINT
#define GL_ADD_SIGNED 0x8574 // NOLINT
#define GL_INTERPOLATE 0x8575 // NOLINT
#define GL_SUBTRACT 0x84E7 // NOLINT
#define GL_CONSTANT 0x8576 // NOLINT
#define GL_PRIMARY_COLOR 0x8577 // NOLINT
#define GL_PREVIOUS 0x8578 // NOLINT
#define GL_DOT3_RGB 0x86AE // NOLINT
#define GL_DOT3_RGBA 0x86AF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glActiveTextureType )( GLenum texture );
typedef void ( NN_GLL_GL_APIENTRY *glSampleCoverageType )( GLfloat value, GLboolean invert );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexImage3DType )( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexImage2DType )( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexImage1DType )( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexSubImage3DType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexSubImage2DType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexSubImage1DType )( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetCompressedTexImageType )( GLenum target, GLint level, void *img );
typedef void ( NN_GLL_GL_APIENTRY *glClientActiveTextureType )( GLenum texture );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1dType )( GLenum target, GLdouble s );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1dvType )( GLenum target, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1fType )( GLenum target, GLfloat s );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1fvType )( GLenum target, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1iType )( GLenum target, GLint s );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1ivType )( GLenum target, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1sType )( GLenum target, GLshort s );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1svType )( GLenum target, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2dType )( GLenum target, GLdouble s, GLdouble t );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2dvType )( GLenum target, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2fType )( GLenum target, GLfloat s, GLfloat t );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2fvType )( GLenum target, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2iType )( GLenum target, GLint s, GLint t );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2ivType )( GLenum target, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2sType )( GLenum target, GLshort s, GLshort t );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2svType )( GLenum target, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3dType )( GLenum target, GLdouble s, GLdouble t, GLdouble r );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3dvType )( GLenum target, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3fType )( GLenum target, GLfloat s, GLfloat t, GLfloat r );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3fvType )( GLenum target, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3iType )( GLenum target, GLint s, GLint t, GLint r );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3ivType )( GLenum target, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3sType )( GLenum target, GLshort s, GLshort t, GLshort r );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3svType )( GLenum target, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4dType )( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4dvType )( GLenum target, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4fType )( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4fvType )( GLenum target, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4iType )( GLenum target, GLint s, GLint t, GLint r, GLint q );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4ivType )( GLenum target, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4sType )( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4svType )( GLenum target, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glLoadTransposeMatrixfType )( const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glLoadTransposeMatrixdType )( const GLdouble *m );
typedef void ( NN_GLL_GL_APIENTRY *glMultTransposeMatrixfType )( const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMultTransposeMatrixdType )( const GLdouble *m );
#define glActiveTexture g_nngllActiveTexture
#define glSampleCoverage g_nngllSampleCoverage
#define glCompressedTexImage3D g_nngllCompressedTexImage3D
#define glCompressedTexImage2D g_nngllCompressedTexImage2D
#define glCompressedTexImage1D g_nngllCompressedTexImage1D
#define glCompressedTexSubImage3D g_nngllCompressedTexSubImage3D
#define glCompressedTexSubImage2D g_nngllCompressedTexSubImage2D
#define glCompressedTexSubImage1D g_nngllCompressedTexSubImage1D
#define glGetCompressedTexImage g_nngllGetCompressedTexImage
#define glClientActiveTexture g_nngllClientActiveTexture
#define glMultiTexCoord1d g_nngllMultiTexCoord1d
#define glMultiTexCoord1dv g_nngllMultiTexCoord1dv
#define glMultiTexCoord1f g_nngllMultiTexCoord1f
#define glMultiTexCoord1fv g_nngllMultiTexCoord1fv
#define glMultiTexCoord1i g_nngllMultiTexCoord1i
#define glMultiTexCoord1iv g_nngllMultiTexCoord1iv
#define glMultiTexCoord1s g_nngllMultiTexCoord1s
#define glMultiTexCoord1sv g_nngllMultiTexCoord1sv
#define glMultiTexCoord2d g_nngllMultiTexCoord2d
#define glMultiTexCoord2dv g_nngllMultiTexCoord2dv
#define glMultiTexCoord2f g_nngllMultiTexCoord2f
#define glMultiTexCoord2fv g_nngllMultiTexCoord2fv
#define glMultiTexCoord2i g_nngllMultiTexCoord2i
#define glMultiTexCoord2iv g_nngllMultiTexCoord2iv
#define glMultiTexCoord2s g_nngllMultiTexCoord2s
#define glMultiTexCoord2sv g_nngllMultiTexCoord2sv
#define glMultiTexCoord3d g_nngllMultiTexCoord3d
#define glMultiTexCoord3dv g_nngllMultiTexCoord3dv
#define glMultiTexCoord3f g_nngllMultiTexCoord3f
#define glMultiTexCoord3fv g_nngllMultiTexCoord3fv
#define glMultiTexCoord3i g_nngllMultiTexCoord3i
#define glMultiTexCoord3iv g_nngllMultiTexCoord3iv
#define glMultiTexCoord3s g_nngllMultiTexCoord3s
#define glMultiTexCoord3sv g_nngllMultiTexCoord3sv
#define glMultiTexCoord4d g_nngllMultiTexCoord4d
#define glMultiTexCoord4dv g_nngllMultiTexCoord4dv
#define glMultiTexCoord4f g_nngllMultiTexCoord4f
#define glMultiTexCoord4fv g_nngllMultiTexCoord4fv
#define glMultiTexCoord4i g_nngllMultiTexCoord4i
#define glMultiTexCoord4iv g_nngllMultiTexCoord4iv
#define glMultiTexCoord4s g_nngllMultiTexCoord4s
#define glMultiTexCoord4sv g_nngllMultiTexCoord4sv
#define glLoadTransposeMatrixf g_nngllLoadTransposeMatrixf
#define glLoadTransposeMatrixd g_nngllLoadTransposeMatrixd
#define glMultTransposeMatrixf g_nngllMultTransposeMatrixf
#define glMultTransposeMatrixd g_nngllMultTransposeMatrixd
NN_GLL_API glActiveTextureType g_nngllActiveTexture;
NN_GLL_API glSampleCoverageType g_nngllSampleCoverage;
NN_GLL_API glCompressedTexImage3DType g_nngllCompressedTexImage3D;
NN_GLL_API glCompressedTexImage2DType g_nngllCompressedTexImage2D;
NN_GLL_API glCompressedTexImage1DType g_nngllCompressedTexImage1D;
NN_GLL_API glCompressedTexSubImage3DType g_nngllCompressedTexSubImage3D;
NN_GLL_API glCompressedTexSubImage2DType g_nngllCompressedTexSubImage2D;
NN_GLL_API glCompressedTexSubImage1DType g_nngllCompressedTexSubImage1D;
NN_GLL_API glGetCompressedTexImageType g_nngllGetCompressedTexImage;
NN_GLL_API glClientActiveTextureType g_nngllClientActiveTexture;
NN_GLL_API glMultiTexCoord1dType g_nngllMultiTexCoord1d;
NN_GLL_API glMultiTexCoord1dvType g_nngllMultiTexCoord1dv;
NN_GLL_API glMultiTexCoord1fType g_nngllMultiTexCoord1f;
NN_GLL_API glMultiTexCoord1fvType g_nngllMultiTexCoord1fv;
NN_GLL_API glMultiTexCoord1iType g_nngllMultiTexCoord1i;
NN_GLL_API glMultiTexCoord1ivType g_nngllMultiTexCoord1iv;
NN_GLL_API glMultiTexCoord1sType g_nngllMultiTexCoord1s;
NN_GLL_API glMultiTexCoord1svType g_nngllMultiTexCoord1sv;
NN_GLL_API glMultiTexCoord2dType g_nngllMultiTexCoord2d;
NN_GLL_API glMultiTexCoord2dvType g_nngllMultiTexCoord2dv;
NN_GLL_API glMultiTexCoord2fType g_nngllMultiTexCoord2f;
NN_GLL_API glMultiTexCoord2fvType g_nngllMultiTexCoord2fv;
NN_GLL_API glMultiTexCoord2iType g_nngllMultiTexCoord2i;
NN_GLL_API glMultiTexCoord2ivType g_nngllMultiTexCoord2iv;
NN_GLL_API glMultiTexCoord2sType g_nngllMultiTexCoord2s;
NN_GLL_API glMultiTexCoord2svType g_nngllMultiTexCoord2sv;
NN_GLL_API glMultiTexCoord3dType g_nngllMultiTexCoord3d;
NN_GLL_API glMultiTexCoord3dvType g_nngllMultiTexCoord3dv;
NN_GLL_API glMultiTexCoord3fType g_nngllMultiTexCoord3f;
NN_GLL_API glMultiTexCoord3fvType g_nngllMultiTexCoord3fv;
NN_GLL_API glMultiTexCoord3iType g_nngllMultiTexCoord3i;
NN_GLL_API glMultiTexCoord3ivType g_nngllMultiTexCoord3iv;
NN_GLL_API glMultiTexCoord3sType g_nngllMultiTexCoord3s;
NN_GLL_API glMultiTexCoord3svType g_nngllMultiTexCoord3sv;
NN_GLL_API glMultiTexCoord4dType g_nngllMultiTexCoord4d;
NN_GLL_API glMultiTexCoord4dvType g_nngllMultiTexCoord4dv;
NN_GLL_API glMultiTexCoord4fType g_nngllMultiTexCoord4f;
NN_GLL_API glMultiTexCoord4fvType g_nngllMultiTexCoord4fv;
NN_GLL_API glMultiTexCoord4iType g_nngllMultiTexCoord4i;
NN_GLL_API glMultiTexCoord4ivType g_nngllMultiTexCoord4iv;
NN_GLL_API glMultiTexCoord4sType g_nngllMultiTexCoord4s;
NN_GLL_API glMultiTexCoord4svType g_nngllMultiTexCoord4sv;
NN_GLL_API glLoadTransposeMatrixfType g_nngllLoadTransposeMatrixf;
NN_GLL_API glLoadTransposeMatrixdType g_nngllLoadTransposeMatrixd;
NN_GLL_API glMultTransposeMatrixfType g_nngllMultTransposeMatrixf;
NN_GLL_API glMultTransposeMatrixdType g_nngllMultTransposeMatrixd;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_1_3();
#endif // GL_VERSION_1_3

#if !defined(GL_VERSION_1_4)
#define GL_VERSION_1_4

#define GL_BLEND_DST_RGB 0x80C8 // NOLINT
#define GL_BLEND_SRC_RGB 0x80C9 // NOLINT
#define GL_BLEND_DST_ALPHA 0x80CA // NOLINT
#define GL_BLEND_SRC_ALPHA 0x80CB // NOLINT
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128 // NOLINT
#define GL_DEPTH_COMPONENT16 0x81A5 // NOLINT
#define GL_DEPTH_COMPONENT24 0x81A6 // NOLINT
#define GL_DEPTH_COMPONENT32 0x81A7 // NOLINT
#define GL_MIRRORED_REPEAT 0x8370 // NOLINT
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD // NOLINT
#define GL_TEXTURE_LOD_BIAS 0x8501 // NOLINT
#define GL_INCR_WRAP 0x8507 // NOLINT
#define GL_DECR_WRAP 0x8508 // NOLINT
#define GL_TEXTURE_DEPTH_SIZE 0x884A // NOLINT
#define GL_TEXTURE_COMPARE_MODE 0x884C // NOLINT
#define GL_TEXTURE_COMPARE_FUNC 0x884D // NOLINT
#define GL_POINT_SIZE_MIN 0x8126 // NOLINT
#define GL_POINT_SIZE_MAX 0x8127 // NOLINT
#define GL_POINT_DISTANCE_ATTENUATION 0x8129 // NOLINT
#define GL_GENERATE_MIPMAP 0x8191 // NOLINT
#define GL_GENERATE_MIPMAP_HINT 0x8192 // NOLINT
#define GL_FOG_COORDINATE_SOURCE 0x8450 // NOLINT
#define GL_FOG_COORDINATE 0x8451 // NOLINT
#define GL_FRAGMENT_DEPTH 0x8452 // NOLINT
#define GL_CURRENT_FOG_COORDINATE 0x8453 // NOLINT
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454 // NOLINT
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455 // NOLINT
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456 // NOLINT
#define GL_FOG_COORDINATE_ARRAY 0x8457 // NOLINT
#define GL_COLOR_SUM 0x8458 // NOLINT
#define GL_CURRENT_SECONDARY_COLOR 0x8459 // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D // NOLINT
#define GL_SECONDARY_COLOR_ARRAY 0x845E // NOLINT
#define GL_TEXTURE_FILTER_CONTROL 0x8500 // NOLINT
#define GL_DEPTH_TEXTURE_MODE 0x884B // NOLINT
#define GL_COMPARE_R_TO_TEXTURE 0x884E // NOLINT
#define GL_BLEND_COLOR 0x8005 // NOLINT
#define GL_BLEND_EQUATION 0x8009 // NOLINT
#define GL_CONSTANT_COLOR 0x8001 // NOLINT
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002 // NOLINT
#define GL_CONSTANT_ALPHA 0x8003 // NOLINT
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004 // NOLINT
#define GL_FUNC_ADD 0x8006 // NOLINT
#define GL_FUNC_REVERSE_SUBTRACT 0x800B // NOLINT
#define GL_FUNC_SUBTRACT 0x800A // NOLINT
#define GL_MIN 0x8007 // NOLINT
#define GL_MAX 0x8008 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBlendFuncSeparateType )( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawArraysType )( GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawElementsType )( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount );
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterfType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterfvType )( GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glPointParameteriType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterivType )( GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoordfType )( GLfloat coord );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoordfvType )( const GLfloat *coord );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoorddType )( GLdouble coord );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoorddvType )( const GLdouble *coord );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoordPointerType )( GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3bType )( GLbyte red, GLbyte green, GLbyte blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3bvType )( const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3dType )( GLdouble red, GLdouble green, GLdouble blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3fType )( GLfloat red, GLfloat green, GLfloat blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3iType )( GLint red, GLint green, GLint blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3sType )( GLshort red, GLshort green, GLshort blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3ubType )( GLubyte red, GLubyte green, GLubyte blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3ubvType )( const GLubyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3uiType )( GLuint red, GLuint green, GLuint blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3uivType )( const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3usType )( GLushort red, GLushort green, GLushort blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3usvType )( const GLushort *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColorPointerType )( GLint size, GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2dType )( GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2fType )( GLfloat x, GLfloat y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2iType )( GLint x, GLint y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2sType )( GLshort x, GLshort y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3dType )( GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3dvType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3fType )( GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3fvType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3iType )( GLint x, GLint y, GLint z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3ivType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3sType )( GLshort x, GLshort y, GLshort z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3svType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glBlendColorType )( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
typedef void ( NN_GLL_GL_APIENTRY *glBlendEquationType )( GLenum mode );
#define glBlendFuncSeparate g_nngllBlendFuncSeparate
#define glMultiDrawArrays g_nngllMultiDrawArrays
#define glMultiDrawElements g_nngllMultiDrawElements
#define glPointParameterf g_nngllPointParameterf
#define glPointParameterfv g_nngllPointParameterfv
#define glPointParameteri g_nngllPointParameteri
#define glPointParameteriv g_nngllPointParameteriv
#define glFogCoordf g_nngllFogCoordf
#define glFogCoordfv g_nngllFogCoordfv
#define glFogCoordd g_nngllFogCoordd
#define glFogCoorddv g_nngllFogCoorddv
#define glFogCoordPointer g_nngllFogCoordPointer
#define glSecondaryColor3b g_nngllSecondaryColor3b
#define glSecondaryColor3bv g_nngllSecondaryColor3bv
#define glSecondaryColor3d g_nngllSecondaryColor3d
#define glSecondaryColor3dv g_nngllSecondaryColor3dv
#define glSecondaryColor3f g_nngllSecondaryColor3f
#define glSecondaryColor3fv g_nngllSecondaryColor3fv
#define glSecondaryColor3i g_nngllSecondaryColor3i
#define glSecondaryColor3iv g_nngllSecondaryColor3iv
#define glSecondaryColor3s g_nngllSecondaryColor3s
#define glSecondaryColor3sv g_nngllSecondaryColor3sv
#define glSecondaryColor3ub g_nngllSecondaryColor3ub
#define glSecondaryColor3ubv g_nngllSecondaryColor3ubv
#define glSecondaryColor3ui g_nngllSecondaryColor3ui
#define glSecondaryColor3uiv g_nngllSecondaryColor3uiv
#define glSecondaryColor3us g_nngllSecondaryColor3us
#define glSecondaryColor3usv g_nngllSecondaryColor3usv
#define glSecondaryColorPointer g_nngllSecondaryColorPointer
#define glWindowPos2d g_nngllWindowPos2d
#define glWindowPos2dv g_nngllWindowPos2dv
#define glWindowPos2f g_nngllWindowPos2f
#define glWindowPos2fv g_nngllWindowPos2fv
#define glWindowPos2i g_nngllWindowPos2i
#define glWindowPos2iv g_nngllWindowPos2iv
#define glWindowPos2s g_nngllWindowPos2s
#define glWindowPos2sv g_nngllWindowPos2sv
#define glWindowPos3d g_nngllWindowPos3d
#define glWindowPos3dv g_nngllWindowPos3dv
#define glWindowPos3f g_nngllWindowPos3f
#define glWindowPos3fv g_nngllWindowPos3fv
#define glWindowPos3i g_nngllWindowPos3i
#define glWindowPos3iv g_nngllWindowPos3iv
#define glWindowPos3s g_nngllWindowPos3s
#define glWindowPos3sv g_nngllWindowPos3sv
#define glBlendColor g_nngllBlendColor
#define glBlendEquation g_nngllBlendEquation
NN_GLL_API glBlendFuncSeparateType g_nngllBlendFuncSeparate;
NN_GLL_API glMultiDrawArraysType g_nngllMultiDrawArrays;
NN_GLL_API glMultiDrawElementsType g_nngllMultiDrawElements;
NN_GLL_API glPointParameterfType g_nngllPointParameterf;
NN_GLL_API glPointParameterfvType g_nngllPointParameterfv;
NN_GLL_API glPointParameteriType g_nngllPointParameteri;
NN_GLL_API glPointParameterivType g_nngllPointParameteriv;
NN_GLL_API glFogCoordfType g_nngllFogCoordf;
NN_GLL_API glFogCoordfvType g_nngllFogCoordfv;
NN_GLL_API glFogCoorddType g_nngllFogCoordd;
NN_GLL_API glFogCoorddvType g_nngllFogCoorddv;
NN_GLL_API glFogCoordPointerType g_nngllFogCoordPointer;
NN_GLL_API glSecondaryColor3bType g_nngllSecondaryColor3b;
NN_GLL_API glSecondaryColor3bvType g_nngllSecondaryColor3bv;
NN_GLL_API glSecondaryColor3dType g_nngllSecondaryColor3d;
NN_GLL_API glSecondaryColor3dvType g_nngllSecondaryColor3dv;
NN_GLL_API glSecondaryColor3fType g_nngllSecondaryColor3f;
NN_GLL_API glSecondaryColor3fvType g_nngllSecondaryColor3fv;
NN_GLL_API glSecondaryColor3iType g_nngllSecondaryColor3i;
NN_GLL_API glSecondaryColor3ivType g_nngllSecondaryColor3iv;
NN_GLL_API glSecondaryColor3sType g_nngllSecondaryColor3s;
NN_GLL_API glSecondaryColor3svType g_nngllSecondaryColor3sv;
NN_GLL_API glSecondaryColor3ubType g_nngllSecondaryColor3ub;
NN_GLL_API glSecondaryColor3ubvType g_nngllSecondaryColor3ubv;
NN_GLL_API glSecondaryColor3uiType g_nngllSecondaryColor3ui;
NN_GLL_API glSecondaryColor3uivType g_nngllSecondaryColor3uiv;
NN_GLL_API glSecondaryColor3usType g_nngllSecondaryColor3us;
NN_GLL_API glSecondaryColor3usvType g_nngllSecondaryColor3usv;
NN_GLL_API glSecondaryColorPointerType g_nngllSecondaryColorPointer;
NN_GLL_API glWindowPos2dType g_nngllWindowPos2d;
NN_GLL_API glWindowPos2dvType g_nngllWindowPos2dv;
NN_GLL_API glWindowPos2fType g_nngllWindowPos2f;
NN_GLL_API glWindowPos2fvType g_nngllWindowPos2fv;
NN_GLL_API glWindowPos2iType g_nngllWindowPos2i;
NN_GLL_API glWindowPos2ivType g_nngllWindowPos2iv;
NN_GLL_API glWindowPos2sType g_nngllWindowPos2s;
NN_GLL_API glWindowPos2svType g_nngllWindowPos2sv;
NN_GLL_API glWindowPos3dType g_nngllWindowPos3d;
NN_GLL_API glWindowPos3dvType g_nngllWindowPos3dv;
NN_GLL_API glWindowPos3fType g_nngllWindowPos3f;
NN_GLL_API glWindowPos3fvType g_nngllWindowPos3fv;
NN_GLL_API glWindowPos3iType g_nngllWindowPos3i;
NN_GLL_API glWindowPos3ivType g_nngllWindowPos3iv;
NN_GLL_API glWindowPos3sType g_nngllWindowPos3s;
NN_GLL_API glWindowPos3svType g_nngllWindowPos3sv;
NN_GLL_API glBlendColorType g_nngllBlendColor;
NN_GLL_API glBlendEquationType g_nngllBlendEquation;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_1_4();
#endif // GL_VERSION_1_4

#if !defined(GL_VERSION_1_5)
#define GL_VERSION_1_5

typedef ptrdiff_t GLsizeiptr;
typedef ptrdiff_t GLintptr;
#define GL_BUFFER_SIZE 0x8764 // NOLINT
#define GL_BUFFER_USAGE 0x8765 // NOLINT
#define GL_QUERY_COUNTER_BITS 0x8864 // NOLINT
#define GL_CURRENT_QUERY 0x8865 // NOLINT
#define GL_QUERY_RESULT 0x8866 // NOLINT
#define GL_QUERY_RESULT_AVAILABLE 0x8867 // NOLINT
#define GL_ARRAY_BUFFER 0x8892 // NOLINT
#define GL_ELEMENT_ARRAY_BUFFER 0x8893 // NOLINT
#define GL_ARRAY_BUFFER_BINDING 0x8894 // NOLINT
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F // NOLINT
#define GL_READ_ONLY 0x88B8 // NOLINT
#define GL_WRITE_ONLY 0x88B9 // NOLINT
#define GL_READ_WRITE 0x88BA // NOLINT
#define GL_BUFFER_ACCESS 0x88BB // NOLINT
#define GL_BUFFER_MAPPED 0x88BC // NOLINT
#define GL_BUFFER_MAP_POINTER 0x88BD // NOLINT
#define GL_STREAM_DRAW 0x88E0 // NOLINT
#define GL_STREAM_READ 0x88E1 // NOLINT
#define GL_STREAM_COPY 0x88E2 // NOLINT
#define GL_STATIC_DRAW 0x88E4 // NOLINT
#define GL_STATIC_READ 0x88E5 // NOLINT
#define GL_STATIC_COPY 0x88E6 // NOLINT
#define GL_DYNAMIC_DRAW 0x88E8 // NOLINT
#define GL_DYNAMIC_READ 0x88E9 // NOLINT
#define GL_DYNAMIC_COPY 0x88EA // NOLINT
#define GL_SAMPLES_PASSED 0x8914 // NOLINT
#define GL_SRC1_ALPHA 0x8589 // NOLINT
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896 // NOLINT
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897 // NOLINT
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898 // NOLINT
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A // NOLINT
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C // NOLINT
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D // NOLINT
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E // NOLINT
#define GL_FOG_COORD_SRC 0x8450 // NOLINT
#define GL_FOG_COORD 0x8451 // NOLINT
#define GL_CURRENT_FOG_COORD 0x8453 // NOLINT
#define GL_FOG_COORD_ARRAY_TYPE 0x8454 // NOLINT
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455 // NOLINT
#define GL_FOG_COORD_ARRAY_POINTER 0x8456 // NOLINT
#define GL_FOG_COORD_ARRAY 0x8457 // NOLINT
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D // NOLINT
#define GL_SRC0_RGB 0x8580 // NOLINT
#define GL_SRC1_RGB 0x8581 // NOLINT
#define GL_SRC2_RGB 0x8582 // NOLINT
#define GL_SRC0_ALPHA 0x8588 // NOLINT
#define GL_SRC2_ALPHA 0x858A // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGenQueriesType )( GLsizei n, GLuint *ids );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteQueriesType )( GLsizei n, const GLuint *ids );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsQueryType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glBeginQueryType )( GLenum target, GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glEndQueryType )( GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryivType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryObjectivType )( GLuint id, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryObjectuivType )( GLuint id, GLenum pname, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glBindBufferType )( GLenum target, GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteBuffersType )( GLsizei n, const GLuint *buffers );
typedef void ( NN_GLL_GL_APIENTRY *glGenBuffersType )( GLsizei n, GLuint *buffers );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsBufferType )( GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glBufferDataType )( GLenum target, GLsizeiptr size, const void *data, GLenum usage );
typedef void ( NN_GLL_GL_APIENTRY *glBufferSubDataType )( GLenum target, GLintptr offset, GLsizeiptr size, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetBufferSubDataType )( GLenum target, GLintptr offset, GLsizeiptr size, void *data );
typedef void *( NN_GLL_GL_APIENTRY *glMapBufferType )( GLenum target, GLenum access );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glUnmapBufferType )( GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glGetBufferParameterivType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetBufferPointervType )( GLenum target, GLenum pname, void **params );
#define glGenQueries g_nngllGenQueries
#define glDeleteQueries g_nngllDeleteQueries
#define glIsQuery g_nngllIsQuery
#define glBeginQuery g_nngllBeginQuery
#define glEndQuery g_nngllEndQuery
#define glGetQueryiv g_nngllGetQueryiv
#define glGetQueryObjectiv g_nngllGetQueryObjectiv
#define glGetQueryObjectuiv g_nngllGetQueryObjectuiv
#define glBindBuffer g_nngllBindBuffer
#define glDeleteBuffers g_nngllDeleteBuffers
#define glGenBuffers g_nngllGenBuffers
#define glIsBuffer g_nngllIsBuffer
#define glBufferData g_nngllBufferData
#define glBufferSubData g_nngllBufferSubData
#define glGetBufferSubData g_nngllGetBufferSubData
#define glMapBuffer g_nngllMapBuffer
#define glUnmapBuffer g_nngllUnmapBuffer
#define glGetBufferParameteriv g_nngllGetBufferParameteriv
#define glGetBufferPointerv g_nngllGetBufferPointerv
NN_GLL_API glGenQueriesType g_nngllGenQueries;
NN_GLL_API glDeleteQueriesType g_nngllDeleteQueries;
NN_GLL_API glIsQueryType g_nngllIsQuery;
NN_GLL_API glBeginQueryType g_nngllBeginQuery;
NN_GLL_API glEndQueryType g_nngllEndQuery;
NN_GLL_API glGetQueryivType g_nngllGetQueryiv;
NN_GLL_API glGetQueryObjectivType g_nngllGetQueryObjectiv;
NN_GLL_API glGetQueryObjectuivType g_nngllGetQueryObjectuiv;
NN_GLL_API glBindBufferType g_nngllBindBuffer;
NN_GLL_API glDeleteBuffersType g_nngllDeleteBuffers;
NN_GLL_API glGenBuffersType g_nngllGenBuffers;
NN_GLL_API glIsBufferType g_nngllIsBuffer;
NN_GLL_API glBufferDataType g_nngllBufferData;
NN_GLL_API glBufferSubDataType g_nngllBufferSubData;
NN_GLL_API glGetBufferSubDataType g_nngllGetBufferSubData;
NN_GLL_API glMapBufferType g_nngllMapBuffer;
NN_GLL_API glUnmapBufferType g_nngllUnmapBuffer;
NN_GLL_API glGetBufferParameterivType g_nngllGetBufferParameteriv;
NN_GLL_API glGetBufferPointervType g_nngllGetBufferPointerv;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_1_5();
#endif // GL_VERSION_1_5

#if !defined(GL_VERSION_2_0)
#define GL_VERSION_2_0

typedef char GLchar;
#define GL_BLEND_EQUATION_RGB 0x8009 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625 // NOLINT
#define GL_CURRENT_VERTEX_ATTRIB 0x8626 // NOLINT
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645 // NOLINT
#define GL_STENCIL_BACK_FUNC 0x8800 // NOLINT
#define GL_STENCIL_BACK_FAIL 0x8801 // NOLINT
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802 // NOLINT
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803 // NOLINT
#define GL_MAX_DRAW_BUFFERS 0x8824 // NOLINT
#define GL_DRAW_BUFFER0 0x8825 // NOLINT
#define GL_DRAW_BUFFER1 0x8826 // NOLINT
#define GL_DRAW_BUFFER2 0x8827 // NOLINT
#define GL_DRAW_BUFFER3 0x8828 // NOLINT
#define GL_DRAW_BUFFER4 0x8829 // NOLINT
#define GL_DRAW_BUFFER5 0x882A // NOLINT
#define GL_DRAW_BUFFER6 0x882B // NOLINT
#define GL_DRAW_BUFFER7 0x882C // NOLINT
#define GL_DRAW_BUFFER8 0x882D // NOLINT
#define GL_DRAW_BUFFER9 0x882E // NOLINT
#define GL_DRAW_BUFFER10 0x882F // NOLINT
#define GL_DRAW_BUFFER11 0x8830 // NOLINT
#define GL_DRAW_BUFFER12 0x8831 // NOLINT
#define GL_DRAW_BUFFER13 0x8832 // NOLINT
#define GL_DRAW_BUFFER14 0x8833 // NOLINT
#define GL_DRAW_BUFFER15 0x8834 // NOLINT
#define GL_BLEND_EQUATION_ALPHA 0x883D // NOLINT
#define GL_MAX_VERTEX_ATTRIBS 0x8869 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A // NOLINT
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872 // NOLINT
#define GL_FRAGMENT_SHADER 0x8B30 // NOLINT
#define GL_VERTEX_SHADER 0x8B31 // NOLINT
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49 // NOLINT
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A // NOLINT
#define GL_MAX_VARYING_FLOATS 0x8B4B // NOLINT
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C // NOLINT
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D // NOLINT
#define GL_SHADER_TYPE 0x8B4F // NOLINT
#define GL_FLOAT_VEC2 0x8B50 // NOLINT
#define GL_FLOAT_VEC3 0x8B51 // NOLINT
#define GL_FLOAT_VEC4 0x8B52 // NOLINT
#define GL_INT_VEC2 0x8B53 // NOLINT
#define GL_INT_VEC3 0x8B54 // NOLINT
#define GL_INT_VEC4 0x8B55 // NOLINT
#define GL_BOOL 0x8B56 // NOLINT
#define GL_BOOL_VEC2 0x8B57 // NOLINT
#define GL_BOOL_VEC3 0x8B58 // NOLINT
#define GL_BOOL_VEC4 0x8B59 // NOLINT
#define GL_FLOAT_MAT2 0x8B5A // NOLINT
#define GL_FLOAT_MAT3 0x8B5B // NOLINT
#define GL_FLOAT_MAT4 0x8B5C // NOLINT
#define GL_SAMPLER_1D 0x8B5D // NOLINT
#define GL_SAMPLER_2D 0x8B5E // NOLINT
#define GL_SAMPLER_3D 0x8B5F // NOLINT
#define GL_SAMPLER_CUBE 0x8B60 // NOLINT
#define GL_SAMPLER_1D_SHADOW 0x8B61 // NOLINT
#define GL_SAMPLER_2D_SHADOW 0x8B62 // NOLINT
#define GL_DELETE_STATUS 0x8B80 // NOLINT
#define GL_COMPILE_STATUS 0x8B81 // NOLINT
#define GL_LINK_STATUS 0x8B82 // NOLINT
#define GL_VALIDATE_STATUS 0x8B83 // NOLINT
#define GL_INFO_LOG_LENGTH 0x8B84 // NOLINT
#define GL_ATTACHED_SHADERS 0x8B85 // NOLINT
#define GL_ACTIVE_UNIFORMS 0x8B86 // NOLINT
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87 // NOLINT
#define GL_SHADER_SOURCE_LENGTH 0x8B88 // NOLINT
#define GL_ACTIVE_ATTRIBUTES 0x8B89 // NOLINT
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A // NOLINT
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B // NOLINT
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C // NOLINT
#define GL_CURRENT_PROGRAM 0x8B8D // NOLINT
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0 // NOLINT
#define GL_LOWER_LEFT 0x8CA1 // NOLINT
#define GL_UPPER_LEFT 0x8CA2 // NOLINT
#define GL_STENCIL_BACK_REF 0x8CA3 // NOLINT
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4 // NOLINT
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5 // NOLINT
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643 // NOLINT
#define GL_POINT_SPRITE 0x8861 // NOLINT
#define GL_COORD_REPLACE 0x8862 // NOLINT
#define GL_MAX_TEXTURE_COORDS 0x8871 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBlendEquationSeparateType )( GLenum modeRGB, GLenum modeAlpha );
typedef void ( NN_GLL_GL_APIENTRY *glDrawBuffersType )( GLsizei n, const GLenum *bufs );
typedef void ( NN_GLL_GL_APIENTRY *glStencilOpSeparateType )( GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass );
typedef void ( NN_GLL_GL_APIENTRY *glStencilFuncSeparateType )( GLenum face, GLenum func, GLint ref, GLuint mask );
typedef void ( NN_GLL_GL_APIENTRY *glStencilMaskSeparateType )( GLenum face, GLuint mask );
typedef void ( NN_GLL_GL_APIENTRY *glAttachShaderType )( GLuint program, GLuint shader );
typedef void ( NN_GLL_GL_APIENTRY *glBindAttribLocationType )( GLuint program, GLuint index, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glCompileShaderType )( GLuint shader );
typedef GLuint ( NN_GLL_GL_APIENTRY *glCreateProgramType )(  );
typedef GLuint ( NN_GLL_GL_APIENTRY *glCreateShaderType )( GLenum type );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteProgramType )( GLuint program );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteShaderType )( GLuint shader );
typedef void ( NN_GLL_GL_APIENTRY *glDetachShaderType )( GLuint program, GLuint shader );
typedef void ( NN_GLL_GL_APIENTRY *glDisableVertexAttribArrayType )( GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glEnableVertexAttribArrayType )( GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveAttribType )( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveUniformType )( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetAttachedShadersType )( GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetAttribLocationType )( GLuint program, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramivType )( GLuint program, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramInfoLogType )( GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
typedef void ( NN_GLL_GL_APIENTRY *glGetShaderivType )( GLuint shader, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetShaderInfoLogType )( GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
typedef void ( NN_GLL_GL_APIENTRY *glGetShaderSourceType )( GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetUniformLocationType )( GLuint program, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformfvType )( GLuint program, GLint location, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformivType )( GLuint program, GLint location, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribdvType )( GLuint index, GLenum pname, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribfvType )( GLuint index, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribivType )( GLuint index, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribPointervType )( GLuint index, GLenum pname, void **pointer );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsProgramType )( GLuint program );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsShaderType )( GLuint shader );
typedef void ( NN_GLL_GL_APIENTRY *glLinkProgramType )( GLuint program );
typedef void ( NN_GLL_GL_APIENTRY *glShaderSourceType )( GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length );
typedef void ( NN_GLL_GL_APIENTRY *glUseProgramType )( GLuint program );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1fType )( GLint location, GLfloat v0 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2fType )( GLint location, GLfloat v0, GLfloat v1 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3fType )( GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4fType )( GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1iType )( GLint location, GLint v0 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2iType )( GLint location, GLint v0, GLint v1 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3iType )( GLint location, GLint v0, GLint v1, GLint v2 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4iType )( GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1fvType )( GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2fvType )( GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3fvType )( GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4fvType )( GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1ivType )( GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2ivType )( GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3ivType )( GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4ivType )( GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix2fvType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix3fvType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix4fvType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glValidateProgramType )( GLuint program );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1dType )( GLuint index, GLdouble x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1dvType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1fType )( GLuint index, GLfloat x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1fvType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1sType )( GLuint index, GLshort x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1svType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2dType )( GLuint index, GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2dvType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2fType )( GLuint index, GLfloat x, GLfloat y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2fvType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2sType )( GLuint index, GLshort x, GLshort y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2svType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3dType )( GLuint index, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3dvType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3fType )( GLuint index, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3fvType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3sType )( GLuint index, GLshort x, GLshort y, GLshort z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3svType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NbvType )( GLuint index, const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NivType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NsvType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NubType )( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NubvType )( GLuint index, const GLubyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NuivType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NusvType )( GLuint index, const GLushort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4bvType )( GLuint index, const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4dType )( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4dvType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4fType )( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4fvType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4ivType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4sType )( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4svType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4ubvType )( GLuint index, const GLubyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4uivType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4usvType )( GLuint index, const GLushort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribPointerType )( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer );
#define glBlendEquationSeparate g_nngllBlendEquationSeparate
#define glDrawBuffers g_nngllDrawBuffers
#define glStencilOpSeparate g_nngllStencilOpSeparate
#define glStencilFuncSeparate g_nngllStencilFuncSeparate
#define glStencilMaskSeparate g_nngllStencilMaskSeparate
#define glAttachShader g_nngllAttachShader
#define glBindAttribLocation g_nngllBindAttribLocation
#define glCompileShader g_nngllCompileShader
#define glCreateProgram g_nngllCreateProgram
#define glCreateShader g_nngllCreateShader
#define glDeleteProgram g_nngllDeleteProgram
#define glDeleteShader g_nngllDeleteShader
#define glDetachShader g_nngllDetachShader
#define glDisableVertexAttribArray g_nngllDisableVertexAttribArray
#define glEnableVertexAttribArray g_nngllEnableVertexAttribArray
#define glGetActiveAttrib g_nngllGetActiveAttrib
#define glGetActiveUniform g_nngllGetActiveUniform
#define glGetAttachedShaders g_nngllGetAttachedShaders
#define glGetAttribLocation g_nngllGetAttribLocation
#define glGetProgramiv g_nngllGetProgramiv
#define glGetProgramInfoLog g_nngllGetProgramInfoLog
#define glGetShaderiv g_nngllGetShaderiv
#define glGetShaderInfoLog g_nngllGetShaderInfoLog
#define glGetShaderSource g_nngllGetShaderSource
#define glGetUniformLocation g_nngllGetUniformLocation
#define glGetUniformfv g_nngllGetUniformfv
#define glGetUniformiv g_nngllGetUniformiv
#define glGetVertexAttribdv g_nngllGetVertexAttribdv
#define glGetVertexAttribfv g_nngllGetVertexAttribfv
#define glGetVertexAttribiv g_nngllGetVertexAttribiv
#define glGetVertexAttribPointerv g_nngllGetVertexAttribPointerv
#define glIsProgram g_nngllIsProgram
#define glIsShader g_nngllIsShader
#define glLinkProgram g_nngllLinkProgram
#define glShaderSource g_nngllShaderSource
#define glUseProgram g_nngllUseProgram
#define glUniform1f g_nngllUniform1f
#define glUniform2f g_nngllUniform2f
#define glUniform3f g_nngllUniform3f
#define glUniform4f g_nngllUniform4f
#define glUniform1i g_nngllUniform1i
#define glUniform2i g_nngllUniform2i
#define glUniform3i g_nngllUniform3i
#define glUniform4i g_nngllUniform4i
#define glUniform1fv g_nngllUniform1fv
#define glUniform2fv g_nngllUniform2fv
#define glUniform3fv g_nngllUniform3fv
#define glUniform4fv g_nngllUniform4fv
#define glUniform1iv g_nngllUniform1iv
#define glUniform2iv g_nngllUniform2iv
#define glUniform3iv g_nngllUniform3iv
#define glUniform4iv g_nngllUniform4iv
#define glUniformMatrix2fv g_nngllUniformMatrix2fv
#define glUniformMatrix3fv g_nngllUniformMatrix3fv
#define glUniformMatrix4fv g_nngllUniformMatrix4fv
#define glValidateProgram g_nngllValidateProgram
#define glVertexAttrib1d g_nngllVertexAttrib1d
#define glVertexAttrib1dv g_nngllVertexAttrib1dv
#define glVertexAttrib1f g_nngllVertexAttrib1f
#define glVertexAttrib1fv g_nngllVertexAttrib1fv
#define glVertexAttrib1s g_nngllVertexAttrib1s
#define glVertexAttrib1sv g_nngllVertexAttrib1sv
#define glVertexAttrib2d g_nngllVertexAttrib2d
#define glVertexAttrib2dv g_nngllVertexAttrib2dv
#define glVertexAttrib2f g_nngllVertexAttrib2f
#define glVertexAttrib2fv g_nngllVertexAttrib2fv
#define glVertexAttrib2s g_nngllVertexAttrib2s
#define glVertexAttrib2sv g_nngllVertexAttrib2sv
#define glVertexAttrib3d g_nngllVertexAttrib3d
#define glVertexAttrib3dv g_nngllVertexAttrib3dv
#define glVertexAttrib3f g_nngllVertexAttrib3f
#define glVertexAttrib3fv g_nngllVertexAttrib3fv
#define glVertexAttrib3s g_nngllVertexAttrib3s
#define glVertexAttrib3sv g_nngllVertexAttrib3sv
#define glVertexAttrib4Nbv g_nngllVertexAttrib4Nbv
#define glVertexAttrib4Niv g_nngllVertexAttrib4Niv
#define glVertexAttrib4Nsv g_nngllVertexAttrib4Nsv
#define glVertexAttrib4Nub g_nngllVertexAttrib4Nub
#define glVertexAttrib4Nubv g_nngllVertexAttrib4Nubv
#define glVertexAttrib4Nuiv g_nngllVertexAttrib4Nuiv
#define glVertexAttrib4Nusv g_nngllVertexAttrib4Nusv
#define glVertexAttrib4bv g_nngllVertexAttrib4bv
#define glVertexAttrib4d g_nngllVertexAttrib4d
#define glVertexAttrib4dv g_nngllVertexAttrib4dv
#define glVertexAttrib4f g_nngllVertexAttrib4f
#define glVertexAttrib4fv g_nngllVertexAttrib4fv
#define glVertexAttrib4iv g_nngllVertexAttrib4iv
#define glVertexAttrib4s g_nngllVertexAttrib4s
#define glVertexAttrib4sv g_nngllVertexAttrib4sv
#define glVertexAttrib4ubv g_nngllVertexAttrib4ubv
#define glVertexAttrib4uiv g_nngllVertexAttrib4uiv
#define glVertexAttrib4usv g_nngllVertexAttrib4usv
#define glVertexAttribPointer g_nngllVertexAttribPointer
NN_GLL_API glBlendEquationSeparateType g_nngllBlendEquationSeparate;
NN_GLL_API glDrawBuffersType g_nngllDrawBuffers;
NN_GLL_API glStencilOpSeparateType g_nngllStencilOpSeparate;
NN_GLL_API glStencilFuncSeparateType g_nngllStencilFuncSeparate;
NN_GLL_API glStencilMaskSeparateType g_nngllStencilMaskSeparate;
NN_GLL_API glAttachShaderType g_nngllAttachShader;
NN_GLL_API glBindAttribLocationType g_nngllBindAttribLocation;
NN_GLL_API glCompileShaderType g_nngllCompileShader;
NN_GLL_API glCreateProgramType g_nngllCreateProgram;
NN_GLL_API glCreateShaderType g_nngllCreateShader;
NN_GLL_API glDeleteProgramType g_nngllDeleteProgram;
NN_GLL_API glDeleteShaderType g_nngllDeleteShader;
NN_GLL_API glDetachShaderType g_nngllDetachShader;
NN_GLL_API glDisableVertexAttribArrayType g_nngllDisableVertexAttribArray;
NN_GLL_API glEnableVertexAttribArrayType g_nngllEnableVertexAttribArray;
NN_GLL_API glGetActiveAttribType g_nngllGetActiveAttrib;
NN_GLL_API glGetActiveUniformType g_nngllGetActiveUniform;
NN_GLL_API glGetAttachedShadersType g_nngllGetAttachedShaders;
NN_GLL_API glGetAttribLocationType g_nngllGetAttribLocation;
NN_GLL_API glGetProgramivType g_nngllGetProgramiv;
NN_GLL_API glGetProgramInfoLogType g_nngllGetProgramInfoLog;
NN_GLL_API glGetShaderivType g_nngllGetShaderiv;
NN_GLL_API glGetShaderInfoLogType g_nngllGetShaderInfoLog;
NN_GLL_API glGetShaderSourceType g_nngllGetShaderSource;
NN_GLL_API glGetUniformLocationType g_nngllGetUniformLocation;
NN_GLL_API glGetUniformfvType g_nngllGetUniformfv;
NN_GLL_API glGetUniformivType g_nngllGetUniformiv;
NN_GLL_API glGetVertexAttribdvType g_nngllGetVertexAttribdv;
NN_GLL_API glGetVertexAttribfvType g_nngllGetVertexAttribfv;
NN_GLL_API glGetVertexAttribivType g_nngllGetVertexAttribiv;
NN_GLL_API glGetVertexAttribPointervType g_nngllGetVertexAttribPointerv;
NN_GLL_API glIsProgramType g_nngllIsProgram;
NN_GLL_API glIsShaderType g_nngllIsShader;
NN_GLL_API glLinkProgramType g_nngllLinkProgram;
NN_GLL_API glShaderSourceType g_nngllShaderSource;
NN_GLL_API glUseProgramType g_nngllUseProgram;
NN_GLL_API glUniform1fType g_nngllUniform1f;
NN_GLL_API glUniform2fType g_nngllUniform2f;
NN_GLL_API glUniform3fType g_nngllUniform3f;
NN_GLL_API glUniform4fType g_nngllUniform4f;
NN_GLL_API glUniform1iType g_nngllUniform1i;
NN_GLL_API glUniform2iType g_nngllUniform2i;
NN_GLL_API glUniform3iType g_nngllUniform3i;
NN_GLL_API glUniform4iType g_nngllUniform4i;
NN_GLL_API glUniform1fvType g_nngllUniform1fv;
NN_GLL_API glUniform2fvType g_nngllUniform2fv;
NN_GLL_API glUniform3fvType g_nngllUniform3fv;
NN_GLL_API glUniform4fvType g_nngllUniform4fv;
NN_GLL_API glUniform1ivType g_nngllUniform1iv;
NN_GLL_API glUniform2ivType g_nngllUniform2iv;
NN_GLL_API glUniform3ivType g_nngllUniform3iv;
NN_GLL_API glUniform4ivType g_nngllUniform4iv;
NN_GLL_API glUniformMatrix2fvType g_nngllUniformMatrix2fv;
NN_GLL_API glUniformMatrix3fvType g_nngllUniformMatrix3fv;
NN_GLL_API glUniformMatrix4fvType g_nngllUniformMatrix4fv;
NN_GLL_API glValidateProgramType g_nngllValidateProgram;
NN_GLL_API glVertexAttrib1dType g_nngllVertexAttrib1d;
NN_GLL_API glVertexAttrib1dvType g_nngllVertexAttrib1dv;
NN_GLL_API glVertexAttrib1fType g_nngllVertexAttrib1f;
NN_GLL_API glVertexAttrib1fvType g_nngllVertexAttrib1fv;
NN_GLL_API glVertexAttrib1sType g_nngllVertexAttrib1s;
NN_GLL_API glVertexAttrib1svType g_nngllVertexAttrib1sv;
NN_GLL_API glVertexAttrib2dType g_nngllVertexAttrib2d;
NN_GLL_API glVertexAttrib2dvType g_nngllVertexAttrib2dv;
NN_GLL_API glVertexAttrib2fType g_nngllVertexAttrib2f;
NN_GLL_API glVertexAttrib2fvType g_nngllVertexAttrib2fv;
NN_GLL_API glVertexAttrib2sType g_nngllVertexAttrib2s;
NN_GLL_API glVertexAttrib2svType g_nngllVertexAttrib2sv;
NN_GLL_API glVertexAttrib3dType g_nngllVertexAttrib3d;
NN_GLL_API glVertexAttrib3dvType g_nngllVertexAttrib3dv;
NN_GLL_API glVertexAttrib3fType g_nngllVertexAttrib3f;
NN_GLL_API glVertexAttrib3fvType g_nngllVertexAttrib3fv;
NN_GLL_API glVertexAttrib3sType g_nngllVertexAttrib3s;
NN_GLL_API glVertexAttrib3svType g_nngllVertexAttrib3sv;
NN_GLL_API glVertexAttrib4NbvType g_nngllVertexAttrib4Nbv;
NN_GLL_API glVertexAttrib4NivType g_nngllVertexAttrib4Niv;
NN_GLL_API glVertexAttrib4NsvType g_nngllVertexAttrib4Nsv;
NN_GLL_API glVertexAttrib4NubType g_nngllVertexAttrib4Nub;
NN_GLL_API glVertexAttrib4NubvType g_nngllVertexAttrib4Nubv;
NN_GLL_API glVertexAttrib4NuivType g_nngllVertexAttrib4Nuiv;
NN_GLL_API glVertexAttrib4NusvType g_nngllVertexAttrib4Nusv;
NN_GLL_API glVertexAttrib4bvType g_nngllVertexAttrib4bv;
NN_GLL_API glVertexAttrib4dType g_nngllVertexAttrib4d;
NN_GLL_API glVertexAttrib4dvType g_nngllVertexAttrib4dv;
NN_GLL_API glVertexAttrib4fType g_nngllVertexAttrib4f;
NN_GLL_API glVertexAttrib4fvType g_nngllVertexAttrib4fv;
NN_GLL_API glVertexAttrib4ivType g_nngllVertexAttrib4iv;
NN_GLL_API glVertexAttrib4sType g_nngllVertexAttrib4s;
NN_GLL_API glVertexAttrib4svType g_nngllVertexAttrib4sv;
NN_GLL_API glVertexAttrib4ubvType g_nngllVertexAttrib4ubv;
NN_GLL_API glVertexAttrib4uivType g_nngllVertexAttrib4uiv;
NN_GLL_API glVertexAttrib4usvType g_nngllVertexAttrib4usv;
NN_GLL_API glVertexAttribPointerType g_nngllVertexAttribPointer;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_2_0();
#endif // GL_VERSION_2_0

#if !defined(GL_VERSION_2_1)
#define GL_VERSION_2_1

#define GL_PIXEL_PACK_BUFFER 0x88EB // NOLINT
#define GL_PIXEL_UNPACK_BUFFER 0x88EC // NOLINT
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED // NOLINT
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF // NOLINT
#define GL_FLOAT_MAT2x3 0x8B65 // NOLINT
#define GL_FLOAT_MAT2x4 0x8B66 // NOLINT
#define GL_FLOAT_MAT3x2 0x8B67 // NOLINT
#define GL_FLOAT_MAT3x4 0x8B68 // NOLINT
#define GL_FLOAT_MAT4x2 0x8B69 // NOLINT
#define GL_FLOAT_MAT4x3 0x8B6A // NOLINT
#define GL_SRGB 0x8C40 // NOLINT
#define GL_SRGB8 0x8C41 // NOLINT
#define GL_SRGB_ALPHA 0x8C42 // NOLINT
#define GL_SRGB8_ALPHA8 0x8C43 // NOLINT
#define GL_COMPRESSED_SRGB 0x8C48 // NOLINT
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49 // NOLINT
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F // NOLINT
#define GL_SLUMINANCE_ALPHA 0x8C44 // NOLINT
#define GL_SLUMINANCE8_ALPHA8 0x8C45 // NOLINT
#define GL_SLUMINANCE 0x8C46 // NOLINT
#define GL_SLUMINANCE8 0x8C47 // NOLINT
#define GL_COMPRESSED_SLUMINANCE 0x8C4A // NOLINT
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix2x3fvType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix3x2fvType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix2x4fvType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix4x2fvType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix3x4fvType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix4x3fvType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
#define glUniformMatrix2x3fv g_nngllUniformMatrix2x3fv
#define glUniformMatrix3x2fv g_nngllUniformMatrix3x2fv
#define glUniformMatrix2x4fv g_nngllUniformMatrix2x4fv
#define glUniformMatrix4x2fv g_nngllUniformMatrix4x2fv
#define glUniformMatrix3x4fv g_nngllUniformMatrix3x4fv
#define glUniformMatrix4x3fv g_nngllUniformMatrix4x3fv
NN_GLL_API glUniformMatrix2x3fvType g_nngllUniformMatrix2x3fv;
NN_GLL_API glUniformMatrix3x2fvType g_nngllUniformMatrix3x2fv;
NN_GLL_API glUniformMatrix2x4fvType g_nngllUniformMatrix2x4fv;
NN_GLL_API glUniformMatrix4x2fvType g_nngllUniformMatrix4x2fv;
NN_GLL_API glUniformMatrix3x4fvType g_nngllUniformMatrix3x4fv;
NN_GLL_API glUniformMatrix4x3fvType g_nngllUniformMatrix4x3fv;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_2_1();
#endif // GL_VERSION_2_1

#if !defined(GL_VERSION_3_0)
#define GL_VERSION_3_0

typedef unsigned short GLhalf;
#define GL_COMPARE_REF_TO_TEXTURE 0x884E // NOLINT
#define GL_CLIP_DISTANCE0 0x3000 // NOLINT
#define GL_CLIP_DISTANCE1 0x3001 // NOLINT
#define GL_CLIP_DISTANCE2 0x3002 // NOLINT
#define GL_CLIP_DISTANCE3 0x3003 // NOLINT
#define GL_CLIP_DISTANCE4 0x3004 // NOLINT
#define GL_CLIP_DISTANCE5 0x3005 // NOLINT
#define GL_CLIP_DISTANCE6 0x3006 // NOLINT
#define GL_CLIP_DISTANCE7 0x3007 // NOLINT
#define GL_MAX_CLIP_DISTANCES 0x0D32 // NOLINT
#define GL_MAJOR_VERSION 0x821B // NOLINT
#define GL_MINOR_VERSION 0x821C // NOLINT
#define GL_NUM_EXTENSIONS 0x821D // NOLINT
#define GL_CONTEXT_FLAGS 0x821E // NOLINT
#define GL_COMPRESSED_RED 0x8225 // NOLINT
#define GL_COMPRESSED_RG 0x8226 // NOLINT
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001 // NOLINT
#define GL_RGBA32F 0x8814 // NOLINT
#define GL_RGB32F 0x8815 // NOLINT
#define GL_RGBA16F 0x881A // NOLINT
#define GL_RGB16F 0x881B // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD // NOLINT
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF // NOLINT
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904 // NOLINT
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905 // NOLINT
#define GL_CLAMP_READ_COLOR 0x891C // NOLINT
#define GL_FIXED_ONLY 0x891D // NOLINT
#define GL_MAX_VARYING_COMPONENTS 0x8B4B // NOLINT
#define GL_TEXTURE_1D_ARRAY 0x8C18 // NOLINT
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19 // NOLINT
#define GL_TEXTURE_2D_ARRAY 0x8C1A // NOLINT
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B // NOLINT
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C // NOLINT
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D // NOLINT
#define GL_R11F_G11F_B10F 0x8C3A // NOLINT
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B // NOLINT
#define GL_RGB9_E5 0x8C3D // NOLINT
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E // NOLINT
#define GL_TEXTURE_SHARED_SIZE 0x8C3F // NOLINT
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F // NOLINT
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80 // NOLINT
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85 // NOLINT
#define GL_PRIMITIVES_GENERATED 0x8C87 // NOLINT
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88 // NOLINT
#define GL_RASTERIZER_DISCARD 0x8C89 // NOLINT
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A // NOLINT
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B // NOLINT
#define GL_INTERLEAVED_ATTRIBS 0x8C8C // NOLINT
#define GL_SEPARATE_ATTRIBS 0x8C8D // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F // NOLINT
#define GL_RGBA32UI 0x8D70 // NOLINT
#define GL_RGB32UI 0x8D71 // NOLINT
#define GL_RGBA16UI 0x8D76 // NOLINT
#define GL_RGB16UI 0x8D77 // NOLINT
#define GL_RGBA8UI 0x8D7C // NOLINT
#define GL_RGB8UI 0x8D7D // NOLINT
#define GL_RGBA32I 0x8D82 // NOLINT
#define GL_RGB32I 0x8D83 // NOLINT
#define GL_RGBA16I 0x8D88 // NOLINT
#define GL_RGB16I 0x8D89 // NOLINT
#define GL_RGBA8I 0x8D8E // NOLINT
#define GL_RGB8I 0x8D8F // NOLINT
#define GL_RED_INTEGER 0x8D94 // NOLINT
#define GL_GREEN_INTEGER 0x8D95 // NOLINT
#define GL_BLUE_INTEGER 0x8D96 // NOLINT
#define GL_RGB_INTEGER 0x8D98 // NOLINT
#define GL_RGBA_INTEGER 0x8D99 // NOLINT
#define GL_BGR_INTEGER 0x8D9A // NOLINT
#define GL_BGRA_INTEGER 0x8D9B // NOLINT
#define GL_SAMPLER_1D_ARRAY 0x8DC0 // NOLINT
#define GL_SAMPLER_2D_ARRAY 0x8DC1 // NOLINT
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3 // NOLINT
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4 // NOLINT
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5 // NOLINT
#define GL_UNSIGNED_INT_VEC2 0x8DC6 // NOLINT
#define GL_UNSIGNED_INT_VEC3 0x8DC7 // NOLINT
#define GL_UNSIGNED_INT_VEC4 0x8DC8 // NOLINT
#define GL_INT_SAMPLER_1D 0x8DC9 // NOLINT
#define GL_INT_SAMPLER_2D 0x8DCA // NOLINT
#define GL_INT_SAMPLER_3D 0x8DCB // NOLINT
#define GL_INT_SAMPLER_CUBE 0x8DCC // NOLINT
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE // NOLINT
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7 // NOLINT
#define GL_QUERY_WAIT 0x8E13 // NOLINT
#define GL_QUERY_NO_WAIT 0x8E14 // NOLINT
#define GL_QUERY_BY_REGION_WAIT 0x8E15 // NOLINT
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16 // NOLINT
#define GL_BUFFER_ACCESS_FLAGS 0x911F // NOLINT
#define GL_BUFFER_MAP_LENGTH 0x9120 // NOLINT
#define GL_BUFFER_MAP_OFFSET 0x9121 // NOLINT
#define GL_DEPTH_COMPONENT32F 0x8CAC // NOLINT
#define GL_DEPTH32F_STENCIL8 0x8CAD // NOLINT
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD // NOLINT
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217 // NOLINT
#define GL_FRAMEBUFFER_DEFAULT 0x8218 // NOLINT
#define GL_FRAMEBUFFER_UNDEFINED 0x8219 // NOLINT
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A // NOLINT
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8 // NOLINT
#define GL_DEPTH_STENCIL 0x84F9 // NOLINT
#define GL_UNSIGNED_INT_24_8 0x84FA // NOLINT
#define GL_DEPTH24_STENCIL8 0x88F0 // NOLINT
#define GL_TEXTURE_STENCIL_SIZE 0x88F1 // NOLINT
#define GL_TEXTURE_RED_TYPE 0x8C10 // NOLINT
#define GL_TEXTURE_GREEN_TYPE 0x8C11 // NOLINT
#define GL_TEXTURE_BLUE_TYPE 0x8C12 // NOLINT
#define GL_TEXTURE_ALPHA_TYPE 0x8C13 // NOLINT
#define GL_TEXTURE_DEPTH_TYPE 0x8C16 // NOLINT
#define GL_UNSIGNED_NORMALIZED 0x8C17 // NOLINT
#define GL_FRAMEBUFFER_BINDING 0x8CA6 // NOLINT
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6 // NOLINT
#define GL_RENDERBUFFER_BINDING 0x8CA7 // NOLINT
#define GL_READ_FRAMEBUFFER 0x8CA8 // NOLINT
#define GL_DRAW_FRAMEBUFFER 0x8CA9 // NOLINT
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA // NOLINT
#define GL_RENDERBUFFER_SAMPLES 0x8CAB // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4 // NOLINT
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC // NOLINT
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD // NOLINT
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF // NOLINT
#define GL_COLOR_ATTACHMENT0 0x8CE0 // NOLINT
#define GL_COLOR_ATTACHMENT1 0x8CE1 // NOLINT
#define GL_COLOR_ATTACHMENT2 0x8CE2 // NOLINT
#define GL_COLOR_ATTACHMENT3 0x8CE3 // NOLINT
#define GL_COLOR_ATTACHMENT4 0x8CE4 // NOLINT
#define GL_COLOR_ATTACHMENT5 0x8CE5 // NOLINT
#define GL_COLOR_ATTACHMENT6 0x8CE6 // NOLINT
#define GL_COLOR_ATTACHMENT7 0x8CE7 // NOLINT
#define GL_COLOR_ATTACHMENT8 0x8CE8 // NOLINT
#define GL_COLOR_ATTACHMENT9 0x8CE9 // NOLINT
#define GL_COLOR_ATTACHMENT10 0x8CEA // NOLINT
#define GL_COLOR_ATTACHMENT11 0x8CEB // NOLINT
#define GL_COLOR_ATTACHMENT12 0x8CEC // NOLINT
#define GL_COLOR_ATTACHMENT13 0x8CED // NOLINT
#define GL_COLOR_ATTACHMENT14 0x8CEE // NOLINT
#define GL_COLOR_ATTACHMENT15 0x8CEF // NOLINT
#define GL_COLOR_ATTACHMENT16 0x8CF0 // NOLINT
#define GL_COLOR_ATTACHMENT17 0x8CF1 // NOLINT
#define GL_COLOR_ATTACHMENT18 0x8CF2 // NOLINT
#define GL_COLOR_ATTACHMENT19 0x8CF3 // NOLINT
#define GL_COLOR_ATTACHMENT20 0x8CF4 // NOLINT
#define GL_COLOR_ATTACHMENT21 0x8CF5 // NOLINT
#define GL_COLOR_ATTACHMENT22 0x8CF6 // NOLINT
#define GL_COLOR_ATTACHMENT23 0x8CF7 // NOLINT
#define GL_COLOR_ATTACHMENT24 0x8CF8 // NOLINT
#define GL_COLOR_ATTACHMENT25 0x8CF9 // NOLINT
#define GL_COLOR_ATTACHMENT26 0x8CFA // NOLINT
#define GL_COLOR_ATTACHMENT27 0x8CFB // NOLINT
#define GL_COLOR_ATTACHMENT28 0x8CFC // NOLINT
#define GL_COLOR_ATTACHMENT29 0x8CFD // NOLINT
#define GL_COLOR_ATTACHMENT30 0x8CFE // NOLINT
#define GL_COLOR_ATTACHMENT31 0x8CFF // NOLINT
#define GL_DEPTH_ATTACHMENT 0x8D00 // NOLINT
#define GL_STENCIL_ATTACHMENT 0x8D20 // NOLINT
#define GL_FRAMEBUFFER 0x8D40 // NOLINT
#define GL_RENDERBUFFER 0x8D41 // NOLINT
#define GL_RENDERBUFFER_WIDTH 0x8D42 // NOLINT
#define GL_RENDERBUFFER_HEIGHT 0x8D43 // NOLINT
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44 // NOLINT
#define GL_STENCIL_INDEX1 0x8D46 // NOLINT
#define GL_STENCIL_INDEX4 0x8D47 // NOLINT
#define GL_STENCIL_INDEX8 0x8D48 // NOLINT
#define GL_STENCIL_INDEX16 0x8D49 // NOLINT
#define GL_RENDERBUFFER_RED_SIZE 0x8D50 // NOLINT
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51 // NOLINT
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52 // NOLINT
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53 // NOLINT
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54 // NOLINT
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56 // NOLINT
#define GL_MAX_SAMPLES 0x8D57 // NOLINT
#define GL_INDEX 0x8222 // NOLINT
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14 // NOLINT
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15 // NOLINT
#define GL_FRAMEBUFFER_SRGB 0x8DB9 // NOLINT
#define GL_HALF_FLOAT 0x140B // NOLINT
#define GL_MAP_READ_BIT 0x0001 // NOLINT
#define GL_MAP_WRITE_BIT 0x0002 // NOLINT
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004 // NOLINT
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008 // NOLINT
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010 // NOLINT
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020 // NOLINT
#define GL_COMPRESSED_RED_RGTC1 0x8DBB // NOLINT
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC // NOLINT
#define GL_COMPRESSED_RG_RGTC2 0x8DBD // NOLINT
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE // NOLINT
#define GL_RG 0x8227 // NOLINT
#define GL_RG_INTEGER 0x8228 // NOLINT
#define GL_R8 0x8229 // NOLINT
#define GL_R16 0x822A // NOLINT
#define GL_RG8 0x822B // NOLINT
#define GL_RG16 0x822C // NOLINT
#define GL_R16F 0x822D // NOLINT
#define GL_R32F 0x822E // NOLINT
#define GL_RG16F 0x822F // NOLINT
#define GL_RG32F 0x8230 // NOLINT
#define GL_R8I 0x8231 // NOLINT
#define GL_R8UI 0x8232 // NOLINT
#define GL_R16I 0x8233 // NOLINT
#define GL_R16UI 0x8234 // NOLINT
#define GL_R32I 0x8235 // NOLINT
#define GL_R32UI 0x8236 // NOLINT
#define GL_RG8I 0x8237 // NOLINT
#define GL_RG8UI 0x8238 // NOLINT
#define GL_RG16I 0x8239 // NOLINT
#define GL_RG16UI 0x823A // NOLINT
#define GL_RG32I 0x823B // NOLINT
#define GL_RG32UI 0x823C // NOLINT
#define GL_VERTEX_ARRAY_BINDING 0x85B5 // NOLINT
#define GL_CLAMP_VERTEX_COLOR 0x891A // NOLINT
#define GL_CLAMP_FRAGMENT_COLOR 0x891B // NOLINT
#define GL_ALPHA_INTEGER 0x8D97 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glColorMaskiType )( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a );
typedef void ( NN_GLL_GL_APIENTRY *glGetBooleani_vType )( GLenum target, GLuint index, GLboolean *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetIntegeri_vType )( GLenum target, GLuint index, GLint *data );
typedef void ( NN_GLL_GL_APIENTRY *glEnableiType )( GLenum target, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glDisableiType )( GLenum target, GLuint index );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsEnablediType )( GLenum target, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glBeginTransformFeedbackType )( GLenum primitiveMode );
typedef void ( NN_GLL_GL_APIENTRY *glEndTransformFeedbackType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glBindBufferRangeType )( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
typedef void ( NN_GLL_GL_APIENTRY *glBindBufferBaseType )( GLenum target, GLuint index, GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glTransformFeedbackVaryingsType )( GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode );
typedef void ( NN_GLL_GL_APIENTRY *glGetTransformFeedbackVaryingType )( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glClampColorType )( GLenum target, GLenum clamp );
typedef void ( NN_GLL_GL_APIENTRY *glBeginConditionalRenderType )( GLuint id, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glEndConditionalRenderType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribIPointerType )( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribIivType )( GLuint index, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribIuivType )( GLuint index, GLenum pname, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI1iType )( GLuint index, GLint x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI2iType )( GLuint index, GLint x, GLint y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI3iType )( GLuint index, GLint x, GLint y, GLint z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4iType )( GLuint index, GLint x, GLint y, GLint z, GLint w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI1uiType )( GLuint index, GLuint x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI2uiType )( GLuint index, GLuint x, GLuint y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI3uiType )( GLuint index, GLuint x, GLuint y, GLuint z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4uiType )( GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI1ivType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI2ivType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI3ivType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4ivType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI1uivType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI2uivType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI3uivType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4uivType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4bvType )( GLuint index, const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4svType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4ubvType )( GLuint index, const GLubyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4usvType )( GLuint index, const GLushort *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformuivType )( GLuint program, GLint location, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glBindFragDataLocationType )( GLuint program, GLuint color, const GLchar *name );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetFragDataLocationType )( GLuint program, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1uiType )( GLint location, GLuint v0 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2uiType )( GLint location, GLuint v0, GLuint v1 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3uiType )( GLint location, GLuint v0, GLuint v1, GLuint v2 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4uiType )( GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1uivType )( GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2uivType )( GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3uivType )( GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4uivType )( GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glTexParameterIivType )( GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glTexParameterIuivType )( GLenum target, GLenum pname, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexParameterIivType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexParameterIuivType )( GLenum target, GLenum pname, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glClearBufferivType )( GLenum buffer, GLint drawbuffer, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glClearBufferuivType )( GLenum buffer, GLint drawbuffer, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glClearBufferfvType )( GLenum buffer, GLint drawbuffer, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glClearBufferfiType )( GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil );
typedef const GLubyte *( NN_GLL_GL_APIENTRY *glGetStringiType )( GLenum name, GLuint index );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsRenderbufferType )( GLuint renderbuffer );
typedef void ( NN_GLL_GL_APIENTRY *glBindRenderbufferType )( GLenum target, GLuint renderbuffer );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteRenderbuffersType )( GLsizei n, const GLuint *renderbuffers );
typedef void ( NN_GLL_GL_APIENTRY *glGenRenderbuffersType )( GLsizei n, GLuint *renderbuffers );
typedef void ( NN_GLL_GL_APIENTRY *glRenderbufferStorageType )( GLenum target, GLenum internalformat, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glGetRenderbufferParameterivType )( GLenum target, GLenum pname, GLint *params );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsFramebufferType )( GLuint framebuffer );
typedef void ( NN_GLL_GL_APIENTRY *glBindFramebufferType )( GLenum target, GLuint framebuffer );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteFramebuffersType )( GLsizei n, const GLuint *framebuffers );
typedef void ( NN_GLL_GL_APIENTRY *glGenFramebuffersType )( GLsizei n, GLuint *framebuffers );
typedef GLenum ( NN_GLL_GL_APIENTRY *glCheckFramebufferStatusType )( GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTexture1DType )( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTexture2DType )( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTexture3DType )( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferRenderbufferType )( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
typedef void ( NN_GLL_GL_APIENTRY *glGetFramebufferAttachmentParameterivType )( GLenum target, GLenum attachment, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGenerateMipmapType )( GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glBlitFramebufferType )( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
typedef void ( NN_GLL_GL_APIENTRY *glRenderbufferStorageMultisampleType )( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTextureLayerType )( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
typedef void *( NN_GLL_GL_APIENTRY *glMapBufferRangeType )( GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access );
typedef void ( NN_GLL_GL_APIENTRY *glFlushMappedBufferRangeType )( GLenum target, GLintptr offset, GLsizeiptr length );
typedef void ( NN_GLL_GL_APIENTRY *glBindVertexArrayType )( GLuint array );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteVertexArraysType )( GLsizei n, const GLuint *arrays );
typedef void ( NN_GLL_GL_APIENTRY *glGenVertexArraysType )( GLsizei n, GLuint *arrays );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsVertexArrayType )( GLuint array );
#define glColorMaski g_nngllColorMaski
#define glGetBooleani_v g_nngllGetBooleani_v
#define glGetIntegeri_v g_nngllGetIntegeri_v
#define glEnablei g_nngllEnablei
#define glDisablei g_nngllDisablei
#define glIsEnabledi g_nngllIsEnabledi
#define glBeginTransformFeedback g_nngllBeginTransformFeedback
#define glEndTransformFeedback g_nngllEndTransformFeedback
#define glBindBufferRange g_nngllBindBufferRange
#define glBindBufferBase g_nngllBindBufferBase
#define glTransformFeedbackVaryings g_nngllTransformFeedbackVaryings
#define glGetTransformFeedbackVarying g_nngllGetTransformFeedbackVarying
#define glClampColor g_nngllClampColor
#define glBeginConditionalRender g_nngllBeginConditionalRender
#define glEndConditionalRender g_nngllEndConditionalRender
#define glVertexAttribIPointer g_nngllVertexAttribIPointer
#define glGetVertexAttribIiv g_nngllGetVertexAttribIiv
#define glGetVertexAttribIuiv g_nngllGetVertexAttribIuiv
#define glVertexAttribI1i g_nngllVertexAttribI1i
#define glVertexAttribI2i g_nngllVertexAttribI2i
#define glVertexAttribI3i g_nngllVertexAttribI3i
#define glVertexAttribI4i g_nngllVertexAttribI4i
#define glVertexAttribI1ui g_nngllVertexAttribI1ui
#define glVertexAttribI2ui g_nngllVertexAttribI2ui
#define glVertexAttribI3ui g_nngllVertexAttribI3ui
#define glVertexAttribI4ui g_nngllVertexAttribI4ui
#define glVertexAttribI1iv g_nngllVertexAttribI1iv
#define glVertexAttribI2iv g_nngllVertexAttribI2iv
#define glVertexAttribI3iv g_nngllVertexAttribI3iv
#define glVertexAttribI4iv g_nngllVertexAttribI4iv
#define glVertexAttribI1uiv g_nngllVertexAttribI1uiv
#define glVertexAttribI2uiv g_nngllVertexAttribI2uiv
#define glVertexAttribI3uiv g_nngllVertexAttribI3uiv
#define glVertexAttribI4uiv g_nngllVertexAttribI4uiv
#define glVertexAttribI4bv g_nngllVertexAttribI4bv
#define glVertexAttribI4sv g_nngllVertexAttribI4sv
#define glVertexAttribI4ubv g_nngllVertexAttribI4ubv
#define glVertexAttribI4usv g_nngllVertexAttribI4usv
#define glGetUniformuiv g_nngllGetUniformuiv
#define glBindFragDataLocation g_nngllBindFragDataLocation
#define glGetFragDataLocation g_nngllGetFragDataLocation
#define glUniform1ui g_nngllUniform1ui
#define glUniform2ui g_nngllUniform2ui
#define glUniform3ui g_nngllUniform3ui
#define glUniform4ui g_nngllUniform4ui
#define glUniform1uiv g_nngllUniform1uiv
#define glUniform2uiv g_nngllUniform2uiv
#define glUniform3uiv g_nngllUniform3uiv
#define glUniform4uiv g_nngllUniform4uiv
#define glTexParameterIiv g_nngllTexParameterIiv
#define glTexParameterIuiv g_nngllTexParameterIuiv
#define glGetTexParameterIiv g_nngllGetTexParameterIiv
#define glGetTexParameterIuiv g_nngllGetTexParameterIuiv
#define glClearBufferiv g_nngllClearBufferiv
#define glClearBufferuiv g_nngllClearBufferuiv
#define glClearBufferfv g_nngllClearBufferfv
#define glClearBufferfi g_nngllClearBufferfi
#define glGetStringi g_nngllGetStringi
#define glIsRenderbuffer g_nngllIsRenderbuffer
#define glBindRenderbuffer g_nngllBindRenderbuffer
#define glDeleteRenderbuffers g_nngllDeleteRenderbuffers
#define glGenRenderbuffers g_nngllGenRenderbuffers
#define glRenderbufferStorage g_nngllRenderbufferStorage
#define glGetRenderbufferParameteriv g_nngllGetRenderbufferParameteriv
#define glIsFramebuffer g_nngllIsFramebuffer
#define glBindFramebuffer g_nngllBindFramebuffer
#define glDeleteFramebuffers g_nngllDeleteFramebuffers
#define glGenFramebuffers g_nngllGenFramebuffers
#define glCheckFramebufferStatus g_nngllCheckFramebufferStatus
#define glFramebufferTexture1D g_nngllFramebufferTexture1D
#define glFramebufferTexture2D g_nngllFramebufferTexture2D
#define glFramebufferTexture3D g_nngllFramebufferTexture3D
#define glFramebufferRenderbuffer g_nngllFramebufferRenderbuffer
#define glGetFramebufferAttachmentParameteriv g_nngllGetFramebufferAttachmentParameteriv
#define glGenerateMipmap g_nngllGenerateMipmap
#define glBlitFramebuffer g_nngllBlitFramebuffer
#define glRenderbufferStorageMultisample g_nngllRenderbufferStorageMultisample
#define glFramebufferTextureLayer g_nngllFramebufferTextureLayer
#define glMapBufferRange g_nngllMapBufferRange
#define glFlushMappedBufferRange g_nngllFlushMappedBufferRange
#define glBindVertexArray g_nngllBindVertexArray
#define glDeleteVertexArrays g_nngllDeleteVertexArrays
#define glGenVertexArrays g_nngllGenVertexArrays
#define glIsVertexArray g_nngllIsVertexArray
NN_GLL_API glColorMaskiType g_nngllColorMaski;
NN_GLL_API glGetBooleani_vType g_nngllGetBooleani_v;
NN_GLL_API glGetIntegeri_vType g_nngllGetIntegeri_v;
NN_GLL_API glEnableiType g_nngllEnablei;
NN_GLL_API glDisableiType g_nngllDisablei;
NN_GLL_API glIsEnablediType g_nngllIsEnabledi;
NN_GLL_API glBeginTransformFeedbackType g_nngllBeginTransformFeedback;
NN_GLL_API glEndTransformFeedbackType g_nngllEndTransformFeedback;
NN_GLL_API glBindBufferRangeType g_nngllBindBufferRange;
NN_GLL_API glBindBufferBaseType g_nngllBindBufferBase;
NN_GLL_API glTransformFeedbackVaryingsType g_nngllTransformFeedbackVaryings;
NN_GLL_API glGetTransformFeedbackVaryingType g_nngllGetTransformFeedbackVarying;
NN_GLL_API glClampColorType g_nngllClampColor;
NN_GLL_API glBeginConditionalRenderType g_nngllBeginConditionalRender;
NN_GLL_API glEndConditionalRenderType g_nngllEndConditionalRender;
NN_GLL_API glVertexAttribIPointerType g_nngllVertexAttribIPointer;
NN_GLL_API glGetVertexAttribIivType g_nngllGetVertexAttribIiv;
NN_GLL_API glGetVertexAttribIuivType g_nngllGetVertexAttribIuiv;
NN_GLL_API glVertexAttribI1iType g_nngllVertexAttribI1i;
NN_GLL_API glVertexAttribI2iType g_nngllVertexAttribI2i;
NN_GLL_API glVertexAttribI3iType g_nngllVertexAttribI3i;
NN_GLL_API glVertexAttribI4iType g_nngllVertexAttribI4i;
NN_GLL_API glVertexAttribI1uiType g_nngllVertexAttribI1ui;
NN_GLL_API glVertexAttribI2uiType g_nngllVertexAttribI2ui;
NN_GLL_API glVertexAttribI3uiType g_nngllVertexAttribI3ui;
NN_GLL_API glVertexAttribI4uiType g_nngllVertexAttribI4ui;
NN_GLL_API glVertexAttribI1ivType g_nngllVertexAttribI1iv;
NN_GLL_API glVertexAttribI2ivType g_nngllVertexAttribI2iv;
NN_GLL_API glVertexAttribI3ivType g_nngllVertexAttribI3iv;
NN_GLL_API glVertexAttribI4ivType g_nngllVertexAttribI4iv;
NN_GLL_API glVertexAttribI1uivType g_nngllVertexAttribI1uiv;
NN_GLL_API glVertexAttribI2uivType g_nngllVertexAttribI2uiv;
NN_GLL_API glVertexAttribI3uivType g_nngllVertexAttribI3uiv;
NN_GLL_API glVertexAttribI4uivType g_nngllVertexAttribI4uiv;
NN_GLL_API glVertexAttribI4bvType g_nngllVertexAttribI4bv;
NN_GLL_API glVertexAttribI4svType g_nngllVertexAttribI4sv;
NN_GLL_API glVertexAttribI4ubvType g_nngllVertexAttribI4ubv;
NN_GLL_API glVertexAttribI4usvType g_nngllVertexAttribI4usv;
NN_GLL_API glGetUniformuivType g_nngllGetUniformuiv;
NN_GLL_API glBindFragDataLocationType g_nngllBindFragDataLocation;
NN_GLL_API glGetFragDataLocationType g_nngllGetFragDataLocation;
NN_GLL_API glUniform1uiType g_nngllUniform1ui;
NN_GLL_API glUniform2uiType g_nngllUniform2ui;
NN_GLL_API glUniform3uiType g_nngllUniform3ui;
NN_GLL_API glUniform4uiType g_nngllUniform4ui;
NN_GLL_API glUniform1uivType g_nngllUniform1uiv;
NN_GLL_API glUniform2uivType g_nngllUniform2uiv;
NN_GLL_API glUniform3uivType g_nngllUniform3uiv;
NN_GLL_API glUniform4uivType g_nngllUniform4uiv;
NN_GLL_API glTexParameterIivType g_nngllTexParameterIiv;
NN_GLL_API glTexParameterIuivType g_nngllTexParameterIuiv;
NN_GLL_API glGetTexParameterIivType g_nngllGetTexParameterIiv;
NN_GLL_API glGetTexParameterIuivType g_nngllGetTexParameterIuiv;
NN_GLL_API glClearBufferivType g_nngllClearBufferiv;
NN_GLL_API glClearBufferuivType g_nngllClearBufferuiv;
NN_GLL_API glClearBufferfvType g_nngllClearBufferfv;
NN_GLL_API glClearBufferfiType g_nngllClearBufferfi;
NN_GLL_API glGetStringiType g_nngllGetStringi;
NN_GLL_API glIsRenderbufferType g_nngllIsRenderbuffer;
NN_GLL_API glBindRenderbufferType g_nngllBindRenderbuffer;
NN_GLL_API glDeleteRenderbuffersType g_nngllDeleteRenderbuffers;
NN_GLL_API glGenRenderbuffersType g_nngllGenRenderbuffers;
NN_GLL_API glRenderbufferStorageType g_nngllRenderbufferStorage;
NN_GLL_API glGetRenderbufferParameterivType g_nngllGetRenderbufferParameteriv;
NN_GLL_API glIsFramebufferType g_nngllIsFramebuffer;
NN_GLL_API glBindFramebufferType g_nngllBindFramebuffer;
NN_GLL_API glDeleteFramebuffersType g_nngllDeleteFramebuffers;
NN_GLL_API glGenFramebuffersType g_nngllGenFramebuffers;
NN_GLL_API glCheckFramebufferStatusType g_nngllCheckFramebufferStatus;
NN_GLL_API glFramebufferTexture1DType g_nngllFramebufferTexture1D;
NN_GLL_API glFramebufferTexture2DType g_nngllFramebufferTexture2D;
NN_GLL_API glFramebufferTexture3DType g_nngllFramebufferTexture3D;
NN_GLL_API glFramebufferRenderbufferType g_nngllFramebufferRenderbuffer;
NN_GLL_API glGetFramebufferAttachmentParameterivType g_nngllGetFramebufferAttachmentParameteriv;
NN_GLL_API glGenerateMipmapType g_nngllGenerateMipmap;
NN_GLL_API glBlitFramebufferType g_nngllBlitFramebuffer;
NN_GLL_API glRenderbufferStorageMultisampleType g_nngllRenderbufferStorageMultisample;
NN_GLL_API glFramebufferTextureLayerType g_nngllFramebufferTextureLayer;
NN_GLL_API glMapBufferRangeType g_nngllMapBufferRange;
NN_GLL_API glFlushMappedBufferRangeType g_nngllFlushMappedBufferRange;
NN_GLL_API glBindVertexArrayType g_nngllBindVertexArray;
NN_GLL_API glDeleteVertexArraysType g_nngllDeleteVertexArrays;
NN_GLL_API glGenVertexArraysType g_nngllGenVertexArrays;
NN_GLL_API glIsVertexArrayType g_nngllIsVertexArray;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_3_0();
#endif // GL_VERSION_3_0

#if !defined(GL_VERSION_3_1)
#define GL_VERSION_3_1

#define GL_SAMPLER_2D_RECT 0x8B63 // NOLINT
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64 // NOLINT
#define GL_SAMPLER_BUFFER 0x8DC2 // NOLINT
#define GL_INT_SAMPLER_2D_RECT 0x8DCD // NOLINT
#define GL_INT_SAMPLER_BUFFER 0x8DD0 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8 // NOLINT
#define GL_TEXTURE_BUFFER 0x8C2A // NOLINT
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B // NOLINT
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C // NOLINT
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D // NOLINT
#define GL_TEXTURE_RECTANGLE 0x84F5 // NOLINT
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6 // NOLINT
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7 // NOLINT
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8 // NOLINT
#define GL_R8_SNORM 0x8F94 // NOLINT
#define GL_RG8_SNORM 0x8F95 // NOLINT
#define GL_RGB8_SNORM 0x8F96 // NOLINT
#define GL_RGBA8_SNORM 0x8F97 // NOLINT
#define GL_R16_SNORM 0x8F98 // NOLINT
#define GL_RG16_SNORM 0x8F99 // NOLINT
#define GL_RGB16_SNORM 0x8F9A // NOLINT
#define GL_RGBA16_SNORM 0x8F9B // NOLINT
#define GL_SIGNED_NORMALIZED 0x8F9C // NOLINT
#define GL_PRIMITIVE_RESTART 0x8F9D // NOLINT
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E // NOLINT
#define GL_COPY_READ_BUFFER 0x8F36 // NOLINT
#define GL_COPY_WRITE_BUFFER 0x8F37 // NOLINT
#define GL_UNIFORM_BUFFER 0x8A11 // NOLINT
#define GL_UNIFORM_BUFFER_BINDING 0x8A28 // NOLINT
#define GL_UNIFORM_BUFFER_START 0x8A29 // NOLINT
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A // NOLINT
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B // NOLINT
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C // NOLINT
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D // NOLINT
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E // NOLINT
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F // NOLINT
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30 // NOLINT
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31 // NOLINT
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32 // NOLINT
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33 // NOLINT
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34 // NOLINT
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35 // NOLINT
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36 // NOLINT
#define GL_UNIFORM_TYPE 0x8A37 // NOLINT
#define GL_UNIFORM_SIZE 0x8A38 // NOLINT
#define GL_UNIFORM_NAME_LENGTH 0x8A39 // NOLINT
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A // NOLINT
#define GL_UNIFORM_OFFSET 0x8A3B // NOLINT
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C // NOLINT
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D // NOLINT
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E // NOLINT
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F // NOLINT
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40 // NOLINT
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41 // NOLINT
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42 // NOLINT
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43 // NOLINT
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44 // NOLINT
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45 // NOLINT
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46 // NOLINT
// Tagged as uint
#define GL_INVALID_INDEX 0xFFFFFFFF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDrawArraysInstancedType )( GLenum mode, GLint first, GLsizei count, GLsizei instancecount );
typedef void ( NN_GLL_GL_APIENTRY *glDrawElementsInstancedType )( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount );
typedef void ( NN_GLL_GL_APIENTRY *glTexBufferType )( GLenum target, GLenum internalformat, GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glPrimitiveRestartIndexType )( GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glCopyBufferSubDataType )( GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformIndicesType )( GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveUniformsivType )( GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveUniformNameType )( GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGetUniformBlockIndexType )( GLuint program, const GLchar *uniformBlockName );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveUniformBlockivType )( GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveUniformBlockNameType )( GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName );
typedef void ( NN_GLL_GL_APIENTRY *glUniformBlockBindingType )( GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding );
#define glDrawArraysInstanced g_nngllDrawArraysInstanced
#define glDrawElementsInstanced g_nngllDrawElementsInstanced
#define glTexBuffer g_nngllTexBuffer
#define glPrimitiveRestartIndex g_nngllPrimitiveRestartIndex
#define glCopyBufferSubData g_nngllCopyBufferSubData
#define glGetUniformIndices g_nngllGetUniformIndices
#define glGetActiveUniformsiv g_nngllGetActiveUniformsiv
#define glGetActiveUniformName g_nngllGetActiveUniformName
#define glGetUniformBlockIndex g_nngllGetUniformBlockIndex
#define glGetActiveUniformBlockiv g_nngllGetActiveUniformBlockiv
#define glGetActiveUniformBlockName g_nngllGetActiveUniformBlockName
#define glUniformBlockBinding g_nngllUniformBlockBinding
NN_GLL_API glDrawArraysInstancedType g_nngllDrawArraysInstanced;
NN_GLL_API glDrawElementsInstancedType g_nngllDrawElementsInstanced;
NN_GLL_API glTexBufferType g_nngllTexBuffer;
NN_GLL_API glPrimitiveRestartIndexType g_nngllPrimitiveRestartIndex;
NN_GLL_API glCopyBufferSubDataType g_nngllCopyBufferSubData;
NN_GLL_API glGetUniformIndicesType g_nngllGetUniformIndices;
NN_GLL_API glGetActiveUniformsivType g_nngllGetActiveUniformsiv;
NN_GLL_API glGetActiveUniformNameType g_nngllGetActiveUniformName;
NN_GLL_API glGetUniformBlockIndexType g_nngllGetUniformBlockIndex;
NN_GLL_API glGetActiveUniformBlockivType g_nngllGetActiveUniformBlockiv;
NN_GLL_API glGetActiveUniformBlockNameType g_nngllGetActiveUniformBlockName;
NN_GLL_API glUniformBlockBindingType g_nngllUniformBlockBinding;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_3_1();
#endif // GL_VERSION_3_1

#if !defined(GL_VERSION_3_2)
#define GL_VERSION_3_2

typedef struct __GLsync *GLsync;
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h> // NOLINT
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h> // NOLINT
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h> // NOLINT
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h> // NOLINT
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h> // NOLINT
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h> // NOLINT
#endif
#endif
typedef uint64_t GLuint64;
typedef int64_t GLint64;
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001 // NOLINT
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002 // NOLINT
#define GL_LINES_ADJACENCY 0x000A // NOLINT
#define GL_LINE_STRIP_ADJACENCY 0x000B // NOLINT
#define GL_TRIANGLES_ADJACENCY 0x000C // NOLINT
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D // NOLINT
#define GL_PROGRAM_POINT_SIZE 0x8642 // NOLINT
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8 // NOLINT
#define GL_GEOMETRY_SHADER 0x8DD9 // NOLINT
#define GL_GEOMETRY_VERTICES_OUT 0x8916 // NOLINT
#define GL_GEOMETRY_INPUT_TYPE 0x8917 // NOLINT
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918 // NOLINT
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF // NOLINT
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0 // NOLINT
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1 // NOLINT
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122 // NOLINT
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123 // NOLINT
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124 // NOLINT
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125 // NOLINT
#define GL_CONTEXT_PROFILE_MASK 0x9126 // NOLINT
#define GL_DEPTH_CLAMP 0x864F // NOLINT
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C // NOLINT
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D // NOLINT
#define GL_LAST_VERTEX_CONVENTION 0x8E4E // NOLINT
#define GL_PROVOKING_VERTEX 0x8E4F // NOLINT
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F // NOLINT
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111 // NOLINT
#define GL_OBJECT_TYPE 0x9112 // NOLINT
#define GL_SYNC_CONDITION 0x9113 // NOLINT
#define GL_SYNC_STATUS 0x9114 // NOLINT
#define GL_SYNC_FLAGS 0x9115 // NOLINT
#define GL_SYNC_FENCE 0x9116 // NOLINT
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117 // NOLINT
#define GL_UNSIGNALED 0x9118 // NOLINT
#define GL_SIGNALED 0x9119 // NOLINT
#define GL_ALREADY_SIGNALED 0x911A // NOLINT
#define GL_TIMEOUT_EXPIRED 0x911B // NOLINT
#define GL_CONDITION_SATISFIED 0x911C // NOLINT
#define GL_WAIT_FAILED 0x911D // NOLINT
// Tagged as uint64
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF // NOLINT
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001 // NOLINT
#define GL_SAMPLE_POSITION 0x8E50 // NOLINT
#define GL_SAMPLE_MASK 0x8E51 // NOLINT
#define GL_SAMPLE_MASK_VALUE 0x8E52 // NOLINT
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59 // NOLINT
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100 // NOLINT
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101 // NOLINT
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102 // NOLINT
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103 // NOLINT
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104 // NOLINT
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105 // NOLINT
#define GL_TEXTURE_SAMPLES 0x9106 // NOLINT
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107 // NOLINT
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108 // NOLINT
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A // NOLINT
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B // NOLINT
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D // NOLINT
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E // NOLINT
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F // NOLINT
#define GL_MAX_INTEGER_SAMPLES 0x9110 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDrawElementsBaseVertexType )( GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex );
typedef void ( NN_GLL_GL_APIENTRY *glDrawRangeElementsBaseVertexType )( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex );
typedef void ( NN_GLL_GL_APIENTRY *glDrawElementsInstancedBaseVertexType )( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawElementsBaseVertexType )( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex );
typedef void ( NN_GLL_GL_APIENTRY *glProvokingVertexType )( GLenum mode );
typedef GLsync ( NN_GLL_GL_APIENTRY *glFenceSyncType )( GLenum condition, GLbitfield flags );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsSyncType )( GLsync sync );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteSyncType )( GLsync sync );
typedef GLenum ( NN_GLL_GL_APIENTRY *glClientWaitSyncType )( GLsync sync, GLbitfield flags, GLuint64 timeout );
typedef void ( NN_GLL_GL_APIENTRY *glWaitSyncType )( GLsync sync, GLbitfield flags, GLuint64 timeout );
typedef void ( NN_GLL_GL_APIENTRY *glGetInteger64vType )( GLenum pname, GLint64 *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetSyncivType )( GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetInteger64i_vType )( GLenum target, GLuint index, GLint64 *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetBufferParameteri64vType )( GLenum target, GLenum pname, GLint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTextureType )( GLenum target, GLenum attachment, GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glTexImage2DMultisampleType )( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
typedef void ( NN_GLL_GL_APIENTRY *glTexImage3DMultisampleType )( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultisamplefvType )( GLenum pname, GLuint index, GLfloat *val );
typedef void ( NN_GLL_GL_APIENTRY *glSampleMaskiType )( GLuint maskNumber, GLbitfield mask );
#define glDrawElementsBaseVertex g_nngllDrawElementsBaseVertex
#define glDrawRangeElementsBaseVertex g_nngllDrawRangeElementsBaseVertex
#define glDrawElementsInstancedBaseVertex g_nngllDrawElementsInstancedBaseVertex
#define glMultiDrawElementsBaseVertex g_nngllMultiDrawElementsBaseVertex
#define glProvokingVertex g_nngllProvokingVertex
#define glFenceSync g_nngllFenceSync
#define glIsSync g_nngllIsSync
#define glDeleteSync g_nngllDeleteSync
#define glClientWaitSync g_nngllClientWaitSync
#define glWaitSync g_nngllWaitSync
#define glGetInteger64v g_nngllGetInteger64v
#define glGetSynciv g_nngllGetSynciv
#define glGetInteger64i_v g_nngllGetInteger64i_v
#define glGetBufferParameteri64v g_nngllGetBufferParameteri64v
#define glFramebufferTexture g_nngllFramebufferTexture
#define glTexImage2DMultisample g_nngllTexImage2DMultisample
#define glTexImage3DMultisample g_nngllTexImage3DMultisample
#define glGetMultisamplefv g_nngllGetMultisamplefv
#define glSampleMaski g_nngllSampleMaski
NN_GLL_API glDrawElementsBaseVertexType g_nngllDrawElementsBaseVertex;
NN_GLL_API glDrawRangeElementsBaseVertexType g_nngllDrawRangeElementsBaseVertex;
NN_GLL_API glDrawElementsInstancedBaseVertexType g_nngllDrawElementsInstancedBaseVertex;
NN_GLL_API glMultiDrawElementsBaseVertexType g_nngllMultiDrawElementsBaseVertex;
NN_GLL_API glProvokingVertexType g_nngllProvokingVertex;
NN_GLL_API glFenceSyncType g_nngllFenceSync;
NN_GLL_API glIsSyncType g_nngllIsSync;
NN_GLL_API glDeleteSyncType g_nngllDeleteSync;
NN_GLL_API glClientWaitSyncType g_nngllClientWaitSync;
NN_GLL_API glWaitSyncType g_nngllWaitSync;
NN_GLL_API glGetInteger64vType g_nngllGetInteger64v;
NN_GLL_API glGetSyncivType g_nngllGetSynciv;
NN_GLL_API glGetInteger64i_vType g_nngllGetInteger64i_v;
NN_GLL_API glGetBufferParameteri64vType g_nngllGetBufferParameteri64v;
NN_GLL_API glFramebufferTextureType g_nngllFramebufferTexture;
NN_GLL_API glTexImage2DMultisampleType g_nngllTexImage2DMultisample;
NN_GLL_API glTexImage3DMultisampleType g_nngllTexImage3DMultisample;
NN_GLL_API glGetMultisamplefvType g_nngllGetMultisamplefv;
NN_GLL_API glSampleMaskiType g_nngllSampleMaski;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_3_2();
#endif // GL_VERSION_3_2

#if !defined(GL_VERSION_3_3)
#define GL_VERSION_3_3

#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE // NOLINT
#define GL_SRC1_COLOR 0x88F9 // NOLINT
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA // NOLINT
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB // NOLINT
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC // NOLINT
#define GL_ANY_SAMPLES_PASSED 0x8C2F // NOLINT
#define GL_SAMPLER_BINDING 0x8919 // NOLINT
#define GL_RGB10_A2UI 0x906F // NOLINT
#define GL_TEXTURE_SWIZZLE_R 0x8E42 // NOLINT
#define GL_TEXTURE_SWIZZLE_G 0x8E43 // NOLINT
#define GL_TEXTURE_SWIZZLE_B 0x8E44 // NOLINT
#define GL_TEXTURE_SWIZZLE_A 0x8E45 // NOLINT
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46 // NOLINT
#define GL_TIME_ELAPSED 0x88BF // NOLINT
#define GL_TIMESTAMP 0x8E28 // NOLINT
#define GL_INT_2_10_10_10_REV 0x8D9F // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBindFragDataLocationIndexedType )( GLuint program, GLuint colorNumber, GLuint index, const GLchar *name );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetFragDataIndexType )( GLuint program, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGenSamplersType )( GLsizei count, GLuint *samplers );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteSamplersType )( GLsizei count, const GLuint *samplers );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsSamplerType )( GLuint sampler );
typedef void ( NN_GLL_GL_APIENTRY *glBindSamplerType )( GLuint unit, GLuint sampler );
typedef void ( NN_GLL_GL_APIENTRY *glSamplerParameteriType )( GLuint sampler, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glSamplerParameterivType )( GLuint sampler, GLenum pname, const GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glSamplerParameterfType )( GLuint sampler, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glSamplerParameterfvType )( GLuint sampler, GLenum pname, const GLfloat *param );
typedef void ( NN_GLL_GL_APIENTRY *glSamplerParameterIivType )( GLuint sampler, GLenum pname, const GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glSamplerParameterIuivType )( GLuint sampler, GLenum pname, const GLuint *param );
typedef void ( NN_GLL_GL_APIENTRY *glGetSamplerParameterivType )( GLuint sampler, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetSamplerParameterIivType )( GLuint sampler, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetSamplerParameterfvType )( GLuint sampler, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetSamplerParameterIuivType )( GLuint sampler, GLenum pname, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glQueryCounterType )( GLuint id, GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryObjecti64vType )( GLuint id, GLenum pname, GLint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryObjectui64vType )( GLuint id, GLenum pname, GLuint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribDivisorType )( GLuint index, GLuint divisor );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribP1uiType )( GLuint index, GLenum type, GLboolean normalized, GLuint value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribP1uivType )( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribP2uiType )( GLuint index, GLenum type, GLboolean normalized, GLuint value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribP2uivType )( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribP3uiType )( GLuint index, GLenum type, GLboolean normalized, GLuint value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribP3uivType )( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribP4uiType )( GLuint index, GLenum type, GLboolean normalized, GLuint value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribP4uivType )( GLuint index, GLenum type, GLboolean normalized, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexP2uiType )( GLenum type, GLuint value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexP2uivType )( GLenum type, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexP3uiType )( GLenum type, GLuint value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexP3uivType )( GLenum type, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexP4uiType )( GLenum type, GLuint value );
typedef void ( NN_GLL_GL_APIENTRY *glVertexP4uivType )( GLenum type, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordP1uiType )( GLenum type, GLuint coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordP1uivType )( GLenum type, const GLuint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordP2uiType )( GLenum type, GLuint coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordP2uivType )( GLenum type, const GLuint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordP3uiType )( GLenum type, GLuint coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordP3uivType )( GLenum type, const GLuint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordP4uiType )( GLenum type, GLuint coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordP4uivType )( GLenum type, const GLuint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoordP1uiType )( GLenum texture, GLenum type, GLuint coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoordP1uivType )( GLenum texture, GLenum type, const GLuint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoordP2uiType )( GLenum texture, GLenum type, GLuint coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoordP2uivType )( GLenum texture, GLenum type, const GLuint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoordP3uiType )( GLenum texture, GLenum type, GLuint coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoordP3uivType )( GLenum texture, GLenum type, const GLuint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoordP4uiType )( GLenum texture, GLenum type, GLuint coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoordP4uivType )( GLenum texture, GLenum type, const GLuint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glNormalP3uiType )( GLenum type, GLuint coords );
typedef void ( NN_GLL_GL_APIENTRY *glNormalP3uivType )( GLenum type, const GLuint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glColorP3uiType )( GLenum type, GLuint color );
typedef void ( NN_GLL_GL_APIENTRY *glColorP3uivType )( GLenum type, const GLuint *color );
typedef void ( NN_GLL_GL_APIENTRY *glColorP4uiType )( GLenum type, GLuint color );
typedef void ( NN_GLL_GL_APIENTRY *glColorP4uivType )( GLenum type, const GLuint *color );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColorP3uiType )( GLenum type, GLuint color );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColorP3uivType )( GLenum type, const GLuint *color );
#define glBindFragDataLocationIndexed g_nngllBindFragDataLocationIndexed
#define glGetFragDataIndex g_nngllGetFragDataIndex
#define glGenSamplers g_nngllGenSamplers
#define glDeleteSamplers g_nngllDeleteSamplers
#define glIsSampler g_nngllIsSampler
#define glBindSampler g_nngllBindSampler
#define glSamplerParameteri g_nngllSamplerParameteri
#define glSamplerParameteriv g_nngllSamplerParameteriv
#define glSamplerParameterf g_nngllSamplerParameterf
#define glSamplerParameterfv g_nngllSamplerParameterfv
#define glSamplerParameterIiv g_nngllSamplerParameterIiv
#define glSamplerParameterIuiv g_nngllSamplerParameterIuiv
#define glGetSamplerParameteriv g_nngllGetSamplerParameteriv
#define glGetSamplerParameterIiv g_nngllGetSamplerParameterIiv
#define glGetSamplerParameterfv g_nngllGetSamplerParameterfv
#define glGetSamplerParameterIuiv g_nngllGetSamplerParameterIuiv
#define glQueryCounter g_nngllQueryCounter
#define glGetQueryObjecti64v g_nngllGetQueryObjecti64v
#define glGetQueryObjectui64v g_nngllGetQueryObjectui64v
#define glVertexAttribDivisor g_nngllVertexAttribDivisor
#define glVertexAttribP1ui g_nngllVertexAttribP1ui
#define glVertexAttribP1uiv g_nngllVertexAttribP1uiv
#define glVertexAttribP2ui g_nngllVertexAttribP2ui
#define glVertexAttribP2uiv g_nngllVertexAttribP2uiv
#define glVertexAttribP3ui g_nngllVertexAttribP3ui
#define glVertexAttribP3uiv g_nngllVertexAttribP3uiv
#define glVertexAttribP4ui g_nngllVertexAttribP4ui
#define glVertexAttribP4uiv g_nngllVertexAttribP4uiv
#define glVertexP2ui g_nngllVertexP2ui
#define glVertexP2uiv g_nngllVertexP2uiv
#define glVertexP3ui g_nngllVertexP3ui
#define glVertexP3uiv g_nngllVertexP3uiv
#define glVertexP4ui g_nngllVertexP4ui
#define glVertexP4uiv g_nngllVertexP4uiv
#define glTexCoordP1ui g_nngllTexCoordP1ui
#define glTexCoordP1uiv g_nngllTexCoordP1uiv
#define glTexCoordP2ui g_nngllTexCoordP2ui
#define glTexCoordP2uiv g_nngllTexCoordP2uiv
#define glTexCoordP3ui g_nngllTexCoordP3ui
#define glTexCoordP3uiv g_nngllTexCoordP3uiv
#define glTexCoordP4ui g_nngllTexCoordP4ui
#define glTexCoordP4uiv g_nngllTexCoordP4uiv
#define glMultiTexCoordP1ui g_nngllMultiTexCoordP1ui
#define glMultiTexCoordP1uiv g_nngllMultiTexCoordP1uiv
#define glMultiTexCoordP2ui g_nngllMultiTexCoordP2ui
#define glMultiTexCoordP2uiv g_nngllMultiTexCoordP2uiv
#define glMultiTexCoordP3ui g_nngllMultiTexCoordP3ui
#define glMultiTexCoordP3uiv g_nngllMultiTexCoordP3uiv
#define glMultiTexCoordP4ui g_nngllMultiTexCoordP4ui
#define glMultiTexCoordP4uiv g_nngllMultiTexCoordP4uiv
#define glNormalP3ui g_nngllNormalP3ui
#define glNormalP3uiv g_nngllNormalP3uiv
#define glColorP3ui g_nngllColorP3ui
#define glColorP3uiv g_nngllColorP3uiv
#define glColorP4ui g_nngllColorP4ui
#define glColorP4uiv g_nngllColorP4uiv
#define glSecondaryColorP3ui g_nngllSecondaryColorP3ui
#define glSecondaryColorP3uiv g_nngllSecondaryColorP3uiv
NN_GLL_API glBindFragDataLocationIndexedType g_nngllBindFragDataLocationIndexed;
NN_GLL_API glGetFragDataIndexType g_nngllGetFragDataIndex;
NN_GLL_API glGenSamplersType g_nngllGenSamplers;
NN_GLL_API glDeleteSamplersType g_nngllDeleteSamplers;
NN_GLL_API glIsSamplerType g_nngllIsSampler;
NN_GLL_API glBindSamplerType g_nngllBindSampler;
NN_GLL_API glSamplerParameteriType g_nngllSamplerParameteri;
NN_GLL_API glSamplerParameterivType g_nngllSamplerParameteriv;
NN_GLL_API glSamplerParameterfType g_nngllSamplerParameterf;
NN_GLL_API glSamplerParameterfvType g_nngllSamplerParameterfv;
NN_GLL_API glSamplerParameterIivType g_nngllSamplerParameterIiv;
NN_GLL_API glSamplerParameterIuivType g_nngllSamplerParameterIuiv;
NN_GLL_API glGetSamplerParameterivType g_nngllGetSamplerParameteriv;
NN_GLL_API glGetSamplerParameterIivType g_nngllGetSamplerParameterIiv;
NN_GLL_API glGetSamplerParameterfvType g_nngllGetSamplerParameterfv;
NN_GLL_API glGetSamplerParameterIuivType g_nngllGetSamplerParameterIuiv;
NN_GLL_API glQueryCounterType g_nngllQueryCounter;
NN_GLL_API glGetQueryObjecti64vType g_nngllGetQueryObjecti64v;
NN_GLL_API glGetQueryObjectui64vType g_nngllGetQueryObjectui64v;
NN_GLL_API glVertexAttribDivisorType g_nngllVertexAttribDivisor;
NN_GLL_API glVertexAttribP1uiType g_nngllVertexAttribP1ui;
NN_GLL_API glVertexAttribP1uivType g_nngllVertexAttribP1uiv;
NN_GLL_API glVertexAttribP2uiType g_nngllVertexAttribP2ui;
NN_GLL_API glVertexAttribP2uivType g_nngllVertexAttribP2uiv;
NN_GLL_API glVertexAttribP3uiType g_nngllVertexAttribP3ui;
NN_GLL_API glVertexAttribP3uivType g_nngllVertexAttribP3uiv;
NN_GLL_API glVertexAttribP4uiType g_nngllVertexAttribP4ui;
NN_GLL_API glVertexAttribP4uivType g_nngllVertexAttribP4uiv;
NN_GLL_API glVertexP2uiType g_nngllVertexP2ui;
NN_GLL_API glVertexP2uivType g_nngllVertexP2uiv;
NN_GLL_API glVertexP3uiType g_nngllVertexP3ui;
NN_GLL_API glVertexP3uivType g_nngllVertexP3uiv;
NN_GLL_API glVertexP4uiType g_nngllVertexP4ui;
NN_GLL_API glVertexP4uivType g_nngllVertexP4uiv;
NN_GLL_API glTexCoordP1uiType g_nngllTexCoordP1ui;
NN_GLL_API glTexCoordP1uivType g_nngllTexCoordP1uiv;
NN_GLL_API glTexCoordP2uiType g_nngllTexCoordP2ui;
NN_GLL_API glTexCoordP2uivType g_nngllTexCoordP2uiv;
NN_GLL_API glTexCoordP3uiType g_nngllTexCoordP3ui;
NN_GLL_API glTexCoordP3uivType g_nngllTexCoordP3uiv;
NN_GLL_API glTexCoordP4uiType g_nngllTexCoordP4ui;
NN_GLL_API glTexCoordP4uivType g_nngllTexCoordP4uiv;
NN_GLL_API glMultiTexCoordP1uiType g_nngllMultiTexCoordP1ui;
NN_GLL_API glMultiTexCoordP1uivType g_nngllMultiTexCoordP1uiv;
NN_GLL_API glMultiTexCoordP2uiType g_nngllMultiTexCoordP2ui;
NN_GLL_API glMultiTexCoordP2uivType g_nngllMultiTexCoordP2uiv;
NN_GLL_API glMultiTexCoordP3uiType g_nngllMultiTexCoordP3ui;
NN_GLL_API glMultiTexCoordP3uivType g_nngllMultiTexCoordP3uiv;
NN_GLL_API glMultiTexCoordP4uiType g_nngllMultiTexCoordP4ui;
NN_GLL_API glMultiTexCoordP4uivType g_nngllMultiTexCoordP4uiv;
NN_GLL_API glNormalP3uiType g_nngllNormalP3ui;
NN_GLL_API glNormalP3uivType g_nngllNormalP3uiv;
NN_GLL_API glColorP3uiType g_nngllColorP3ui;
NN_GLL_API glColorP3uivType g_nngllColorP3uiv;
NN_GLL_API glColorP4uiType g_nngllColorP4ui;
NN_GLL_API glColorP4uivType g_nngllColorP4uiv;
NN_GLL_API glSecondaryColorP3uiType g_nngllSecondaryColorP3ui;
NN_GLL_API glSecondaryColorP3uivType g_nngllSecondaryColorP3uiv;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_3_3();
#endif // GL_VERSION_3_3

#if !defined(GL_VERSION_4_0)
#define GL_VERSION_4_0

#define GL_SAMPLE_SHADING 0x8C36 // NOLINT
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37 // NOLINT
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E // NOLINT
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F // NOLINT
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009 // NOLINT
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A // NOLINT
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B // NOLINT
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C // NOLINT
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D // NOLINT
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F // NOLINT
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F // NOLINT
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43 // NOLINT
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F // NOLINT
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A // NOLINT
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B // NOLINT
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C // NOLINT
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D // NOLINT
#define GL_MAX_VERTEX_STREAMS 0x8E71 // NOLINT
#define GL_DOUBLE_VEC2 0x8FFC // NOLINT
#define GL_DOUBLE_VEC3 0x8FFD // NOLINT
#define GL_DOUBLE_VEC4 0x8FFE // NOLINT
#define GL_DOUBLE_MAT2 0x8F46 // NOLINT
#define GL_DOUBLE_MAT3 0x8F47 // NOLINT
#define GL_DOUBLE_MAT4 0x8F48 // NOLINT
#define GL_DOUBLE_MAT2x3 0x8F49 // NOLINT
#define GL_DOUBLE_MAT2x4 0x8F4A // NOLINT
#define GL_DOUBLE_MAT3x2 0x8F4B // NOLINT
#define GL_DOUBLE_MAT3x4 0x8F4C // NOLINT
#define GL_DOUBLE_MAT4x2 0x8F4D // NOLINT
#define GL_DOUBLE_MAT4x3 0x8F4E // NOLINT
#define GL_ACTIVE_SUBROUTINES 0x8DE5 // NOLINT
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6 // NOLINT
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47 // NOLINT
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48 // NOLINT
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49 // NOLINT
#define GL_MAX_SUBROUTINES 0x8DE7 // NOLINT
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8 // NOLINT
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A // NOLINT
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B // NOLINT
#define GL_PATCHES 0x000E // NOLINT
#define GL_PATCH_VERTICES 0x8E72 // NOLINT
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73 // NOLINT
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74 // NOLINT
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75 // NOLINT
#define GL_TESS_GEN_MODE 0x8E76 // NOLINT
#define GL_TESS_GEN_SPACING 0x8E77 // NOLINT
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78 // NOLINT
#define GL_TESS_GEN_POINT_MODE 0x8E79 // NOLINT
#define GL_ISOLINES 0x8E7A // NOLINT
#define GL_FRACTIONAL_ODD 0x8E7B // NOLINT
#define GL_FRACTIONAL_EVEN 0x8E7C // NOLINT
#define GL_MAX_PATCH_VERTICES 0x8E7D // NOLINT
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E // NOLINT
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F // NOLINT
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80 // NOLINT
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81 // NOLINT
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82 // NOLINT
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83 // NOLINT
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84 // NOLINT
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85 // NOLINT
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86 // NOLINT
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89 // NOLINT
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A // NOLINT
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C // NOLINT
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D // NOLINT
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E // NOLINT
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F // NOLINT
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0 // NOLINT
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1 // NOLINT
#define GL_TESS_EVALUATION_SHADER 0x8E87 // NOLINT
#define GL_TESS_CONTROL_SHADER 0x8E88 // NOLINT
#define GL_TRANSFORM_FEEDBACK 0x8E22 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25 // NOLINT
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glMinSampleShadingType )( GLfloat value );
typedef void ( NN_GLL_GL_APIENTRY *glBlendEquationiType )( GLuint buf, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glBlendEquationSeparateiType )( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
typedef void ( NN_GLL_GL_APIENTRY *glBlendFunciType )( GLuint buf, GLenum src, GLenum dst );
typedef void ( NN_GLL_GL_APIENTRY *glBlendFuncSeparateiType )( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
typedef void ( NN_GLL_GL_APIENTRY *glDrawArraysIndirectType )( GLenum mode, const void *indirect );
typedef void ( NN_GLL_GL_APIENTRY *glDrawElementsIndirectType )( GLenum mode, GLenum type, const void *indirect );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1dType )( GLint location, GLdouble x );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2dType )( GLint location, GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3dType )( GLint location, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4dType )( GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1dvType )( GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2dvType )( GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3dvType )( GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4dvType )( GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix2dvType )( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix3dvType )( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix4dvType )( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix2x3dvType )( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix2x4dvType )( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix3x2dvType )( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix3x4dvType )( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix4x2dvType )( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix4x3dvType )( GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformdvType )( GLuint program, GLint location, GLdouble *params );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetSubroutineUniformLocationType )( GLuint program, GLenum shadertype, const GLchar *name );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGetSubroutineIndexType )( GLuint program, GLenum shadertype, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveSubroutineUniformivType )( GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveSubroutineUniformNameType )( GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveSubroutineNameType )( GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glUniformSubroutinesuivType )( GLenum shadertype, GLsizei count, const GLuint *indices );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformSubroutineuivType )( GLenum shadertype, GLint location, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramStageivType )( GLuint program, GLenum shadertype, GLenum pname, GLint *values );
typedef void ( NN_GLL_GL_APIENTRY *glPatchParameteriType )( GLenum pname, GLint value );
typedef void ( NN_GLL_GL_APIENTRY *glPatchParameterfvType )( GLenum pname, const GLfloat *values );
typedef void ( NN_GLL_GL_APIENTRY *glBindTransformFeedbackType )( GLenum target, GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteTransformFeedbacksType )( GLsizei n, const GLuint *ids );
typedef void ( NN_GLL_GL_APIENTRY *glGenTransformFeedbacksType )( GLsizei n, GLuint *ids );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsTransformFeedbackType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glPauseTransformFeedbackType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glResumeTransformFeedbackType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glDrawTransformFeedbackType )( GLenum mode, GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glDrawTransformFeedbackStreamType )( GLenum mode, GLuint id, GLuint stream );
typedef void ( NN_GLL_GL_APIENTRY *glBeginQueryIndexedType )( GLenum target, GLuint index, GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glEndQueryIndexedType )( GLenum target, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryIndexedivType )( GLenum target, GLuint index, GLenum pname, GLint *params );
#define glMinSampleShading g_nngllMinSampleShading
#define glBlendEquationi g_nngllBlendEquationi
#define glBlendEquationSeparatei g_nngllBlendEquationSeparatei
#define glBlendFunci g_nngllBlendFunci
#define glBlendFuncSeparatei g_nngllBlendFuncSeparatei
#define glDrawArraysIndirect g_nngllDrawArraysIndirect
#define glDrawElementsIndirect g_nngllDrawElementsIndirect
#define glUniform1d g_nngllUniform1d
#define glUniform2d g_nngllUniform2d
#define glUniform3d g_nngllUniform3d
#define glUniform4d g_nngllUniform4d
#define glUniform1dv g_nngllUniform1dv
#define glUniform2dv g_nngllUniform2dv
#define glUniform3dv g_nngllUniform3dv
#define glUniform4dv g_nngllUniform4dv
#define glUniformMatrix2dv g_nngllUniformMatrix2dv
#define glUniformMatrix3dv g_nngllUniformMatrix3dv
#define glUniformMatrix4dv g_nngllUniformMatrix4dv
#define glUniformMatrix2x3dv g_nngllUniformMatrix2x3dv
#define glUniformMatrix2x4dv g_nngllUniformMatrix2x4dv
#define glUniformMatrix3x2dv g_nngllUniformMatrix3x2dv
#define glUniformMatrix3x4dv g_nngllUniformMatrix3x4dv
#define glUniformMatrix4x2dv g_nngllUniformMatrix4x2dv
#define glUniformMatrix4x3dv g_nngllUniformMatrix4x3dv
#define glGetUniformdv g_nngllGetUniformdv
#define glGetSubroutineUniformLocation g_nngllGetSubroutineUniformLocation
#define glGetSubroutineIndex g_nngllGetSubroutineIndex
#define glGetActiveSubroutineUniformiv g_nngllGetActiveSubroutineUniformiv
#define glGetActiveSubroutineUniformName g_nngllGetActiveSubroutineUniformName
#define glGetActiveSubroutineName g_nngllGetActiveSubroutineName
#define glUniformSubroutinesuiv g_nngllUniformSubroutinesuiv
#define glGetUniformSubroutineuiv g_nngllGetUniformSubroutineuiv
#define glGetProgramStageiv g_nngllGetProgramStageiv
#define glPatchParameteri g_nngllPatchParameteri
#define glPatchParameterfv g_nngllPatchParameterfv
#define glBindTransformFeedback g_nngllBindTransformFeedback
#define glDeleteTransformFeedbacks g_nngllDeleteTransformFeedbacks
#define glGenTransformFeedbacks g_nngllGenTransformFeedbacks
#define glIsTransformFeedback g_nngllIsTransformFeedback
#define glPauseTransformFeedback g_nngllPauseTransformFeedback
#define glResumeTransformFeedback g_nngllResumeTransformFeedback
#define glDrawTransformFeedback g_nngllDrawTransformFeedback
#define glDrawTransformFeedbackStream g_nngllDrawTransformFeedbackStream
#define glBeginQueryIndexed g_nngllBeginQueryIndexed
#define glEndQueryIndexed g_nngllEndQueryIndexed
#define glGetQueryIndexediv g_nngllGetQueryIndexediv
NN_GLL_API glMinSampleShadingType g_nngllMinSampleShading;
NN_GLL_API glBlendEquationiType g_nngllBlendEquationi;
NN_GLL_API glBlendEquationSeparateiType g_nngllBlendEquationSeparatei;
NN_GLL_API glBlendFunciType g_nngllBlendFunci;
NN_GLL_API glBlendFuncSeparateiType g_nngllBlendFuncSeparatei;
NN_GLL_API glDrawArraysIndirectType g_nngllDrawArraysIndirect;
NN_GLL_API glDrawElementsIndirectType g_nngllDrawElementsIndirect;
NN_GLL_API glUniform1dType g_nngllUniform1d;
NN_GLL_API glUniform2dType g_nngllUniform2d;
NN_GLL_API glUniform3dType g_nngllUniform3d;
NN_GLL_API glUniform4dType g_nngllUniform4d;
NN_GLL_API glUniform1dvType g_nngllUniform1dv;
NN_GLL_API glUniform2dvType g_nngllUniform2dv;
NN_GLL_API glUniform3dvType g_nngllUniform3dv;
NN_GLL_API glUniform4dvType g_nngllUniform4dv;
NN_GLL_API glUniformMatrix2dvType g_nngllUniformMatrix2dv;
NN_GLL_API glUniformMatrix3dvType g_nngllUniformMatrix3dv;
NN_GLL_API glUniformMatrix4dvType g_nngllUniformMatrix4dv;
NN_GLL_API glUniformMatrix2x3dvType g_nngllUniformMatrix2x3dv;
NN_GLL_API glUniformMatrix2x4dvType g_nngllUniformMatrix2x4dv;
NN_GLL_API glUniformMatrix3x2dvType g_nngllUniformMatrix3x2dv;
NN_GLL_API glUniformMatrix3x4dvType g_nngllUniformMatrix3x4dv;
NN_GLL_API glUniformMatrix4x2dvType g_nngllUniformMatrix4x2dv;
NN_GLL_API glUniformMatrix4x3dvType g_nngllUniformMatrix4x3dv;
NN_GLL_API glGetUniformdvType g_nngllGetUniformdv;
NN_GLL_API glGetSubroutineUniformLocationType g_nngllGetSubroutineUniformLocation;
NN_GLL_API glGetSubroutineIndexType g_nngllGetSubroutineIndex;
NN_GLL_API glGetActiveSubroutineUniformivType g_nngllGetActiveSubroutineUniformiv;
NN_GLL_API glGetActiveSubroutineUniformNameType g_nngllGetActiveSubroutineUniformName;
NN_GLL_API glGetActiveSubroutineNameType g_nngllGetActiveSubroutineName;
NN_GLL_API glUniformSubroutinesuivType g_nngllUniformSubroutinesuiv;
NN_GLL_API glGetUniformSubroutineuivType g_nngllGetUniformSubroutineuiv;
NN_GLL_API glGetProgramStageivType g_nngllGetProgramStageiv;
NN_GLL_API glPatchParameteriType g_nngllPatchParameteri;
NN_GLL_API glPatchParameterfvType g_nngllPatchParameterfv;
NN_GLL_API glBindTransformFeedbackType g_nngllBindTransformFeedback;
NN_GLL_API glDeleteTransformFeedbacksType g_nngllDeleteTransformFeedbacks;
NN_GLL_API glGenTransformFeedbacksType g_nngllGenTransformFeedbacks;
NN_GLL_API glIsTransformFeedbackType g_nngllIsTransformFeedback;
NN_GLL_API glPauseTransformFeedbackType g_nngllPauseTransformFeedback;
NN_GLL_API glResumeTransformFeedbackType g_nngllResumeTransformFeedback;
NN_GLL_API glDrawTransformFeedbackType g_nngllDrawTransformFeedback;
NN_GLL_API glDrawTransformFeedbackStreamType g_nngllDrawTransformFeedbackStream;
NN_GLL_API glBeginQueryIndexedType g_nngllBeginQueryIndexed;
NN_GLL_API glEndQueryIndexedType g_nngllEndQueryIndexed;
NN_GLL_API glGetQueryIndexedivType g_nngllGetQueryIndexediv;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_4_0();
#endif // GL_VERSION_4_0

#if !defined(GL_VERSION_4_1)
#define GL_VERSION_4_1

#define GL_FIXED 0x140C // NOLINT
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A // NOLINT
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B // NOLINT
#define GL_LOW_FLOAT 0x8DF0 // NOLINT
#define GL_MEDIUM_FLOAT 0x8DF1 // NOLINT
#define GL_HIGH_FLOAT 0x8DF2 // NOLINT
#define GL_LOW_INT 0x8DF3 // NOLINT
#define GL_MEDIUM_INT 0x8DF4 // NOLINT
#define GL_HIGH_INT 0x8DF5 // NOLINT
#define GL_SHADER_COMPILER 0x8DFA // NOLINT
#define GL_SHADER_BINARY_FORMATS 0x8DF8 // NOLINT
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9 // NOLINT
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB // NOLINT
#define GL_MAX_VARYING_VECTORS 0x8DFC // NOLINT
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD // NOLINT
#define GL_RGB565 0x8D62 // NOLINT
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257 // NOLINT
#define GL_PROGRAM_BINARY_LENGTH 0x8741 // NOLINT
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE // NOLINT
#define GL_PROGRAM_BINARY_FORMATS 0x87FF // NOLINT
#define GL_VERTEX_SHADER_BIT 0x00000001 // NOLINT
#define GL_FRAGMENT_SHADER_BIT 0x00000002 // NOLINT
#define GL_GEOMETRY_SHADER_BIT 0x00000004 // NOLINT
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008 // NOLINT
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010 // NOLINT
#define GL_ALL_SHADER_BITS 0xFFFFFFFF // NOLINT
#define GL_PROGRAM_SEPARABLE 0x8258 // NOLINT
#define GL_ACTIVE_PROGRAM 0x8259 // NOLINT
#define GL_PROGRAM_PIPELINE_BINDING 0x825A // NOLINT
#define GL_MAX_VIEWPORTS 0x825B // NOLINT
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C // NOLINT
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D // NOLINT
#define GL_LAYER_PROVOKING_VERTEX 0x825E // NOLINT
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F // NOLINT
#define GL_UNDEFINED_VERTEX 0x8260 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glReleaseShaderCompilerType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glShaderBinaryType )( GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length );
typedef void ( NN_GLL_GL_APIENTRY *glGetShaderPrecisionFormatType )( GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision );
typedef void ( NN_GLL_GL_APIENTRY *glDepthRangefType )( GLfloat n, GLfloat f );
typedef void ( NN_GLL_GL_APIENTRY *glClearDepthfType )( GLfloat d );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramBinaryType )( GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary );
typedef void ( NN_GLL_GL_APIENTRY *glProgramBinaryType )( GLuint program, GLenum binaryFormat, const void *binary, GLsizei length );
typedef void ( NN_GLL_GL_APIENTRY *glProgramParameteriType )( GLuint program, GLenum pname, GLint value );
typedef void ( NN_GLL_GL_APIENTRY *glUseProgramStagesType )( GLuint pipeline, GLbitfield stages, GLuint program );
typedef void ( NN_GLL_GL_APIENTRY *glActiveShaderProgramType )( GLuint pipeline, GLuint program );
typedef GLuint ( NN_GLL_GL_APIENTRY *glCreateShaderProgramvType )( GLenum type, GLsizei count, const GLchar *const*strings );
typedef void ( NN_GLL_GL_APIENTRY *glBindProgramPipelineType )( GLuint pipeline );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteProgramPipelinesType )( GLsizei n, const GLuint *pipelines );
typedef void ( NN_GLL_GL_APIENTRY *glGenProgramPipelinesType )( GLsizei n, GLuint *pipelines );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsProgramPipelineType )( GLuint pipeline );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramPipelineivType )( GLuint pipeline, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1iType )( GLuint program, GLint location, GLint v0 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1ivType )( GLuint program, GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1fType )( GLuint program, GLint location, GLfloat v0 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1fvType )( GLuint program, GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1dType )( GLuint program, GLint location, GLdouble v0 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1dvType )( GLuint program, GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1uiType )( GLuint program, GLint location, GLuint v0 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1uivType )( GLuint program, GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2iType )( GLuint program, GLint location, GLint v0, GLint v1 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2ivType )( GLuint program, GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2fType )( GLuint program, GLint location, GLfloat v0, GLfloat v1 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2fvType )( GLuint program, GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2dType )( GLuint program, GLint location, GLdouble v0, GLdouble v1 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2dvType )( GLuint program, GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2uiType )( GLuint program, GLint location, GLuint v0, GLuint v1 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2uivType )( GLuint program, GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3iType )( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3ivType )( GLuint program, GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3fType )( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3fvType )( GLuint program, GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3dType )( GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3dvType )( GLuint program, GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3uiType )( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3uivType )( GLuint program, GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4iType )( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4ivType )( GLuint program, GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4fType )( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4fvType )( GLuint program, GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4dType )( GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4dvType )( GLuint program, GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4uiType )( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4uivType )( GLuint program, GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2fvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3fvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4fvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2dvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3dvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4dvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2x3fvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3x2fvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2x4fvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4x2fvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3x4fvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4x3fvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2x3dvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3x2dvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2x4dvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4x2dvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3x4dvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4x3dvType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glValidateProgramPipelineType )( GLuint pipeline );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramPipelineInfoLogType )( GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL1dType )( GLuint index, GLdouble x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL2dType )( GLuint index, GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL3dType )( GLuint index, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL4dType )( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL1dvType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL2dvType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL3dvType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL4dvType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribLPointerType )( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribLdvType )( GLuint index, GLenum pname, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glViewportArrayvType )( GLuint first, GLsizei count, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glViewportIndexedfType )( GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h );
typedef void ( NN_GLL_GL_APIENTRY *glViewportIndexedfvType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glScissorArrayvType )( GLuint first, GLsizei count, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glScissorIndexedType )( GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glScissorIndexedvType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glDepthRangeArrayvType )( GLuint first, GLsizei count, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glDepthRangeIndexedType )( GLuint index, GLdouble n, GLdouble f );
typedef void ( NN_GLL_GL_APIENTRY *glGetFloati_vType )( GLenum target, GLuint index, GLfloat *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetDoublei_vType )( GLenum target, GLuint index, GLdouble *data );
#define glReleaseShaderCompiler g_nngllReleaseShaderCompiler
#define glShaderBinary g_nngllShaderBinary
#define glGetShaderPrecisionFormat g_nngllGetShaderPrecisionFormat
#define glDepthRangef g_nngllDepthRangef
#define glClearDepthf g_nngllClearDepthf
#define glGetProgramBinary g_nngllGetProgramBinary
#define glProgramBinary g_nngllProgramBinary
#define glProgramParameteri g_nngllProgramParameteri
#define glUseProgramStages g_nngllUseProgramStages
#define glActiveShaderProgram g_nngllActiveShaderProgram
#define glCreateShaderProgramv g_nngllCreateShaderProgramv
#define glBindProgramPipeline g_nngllBindProgramPipeline
#define glDeleteProgramPipelines g_nngllDeleteProgramPipelines
#define glGenProgramPipelines g_nngllGenProgramPipelines
#define glIsProgramPipeline g_nngllIsProgramPipeline
#define glGetProgramPipelineiv g_nngllGetProgramPipelineiv
#define glProgramUniform1i g_nngllProgramUniform1i
#define glProgramUniform1iv g_nngllProgramUniform1iv
#define glProgramUniform1f g_nngllProgramUniform1f
#define glProgramUniform1fv g_nngllProgramUniform1fv
#define glProgramUniform1d g_nngllProgramUniform1d
#define glProgramUniform1dv g_nngllProgramUniform1dv
#define glProgramUniform1ui g_nngllProgramUniform1ui
#define glProgramUniform1uiv g_nngllProgramUniform1uiv
#define glProgramUniform2i g_nngllProgramUniform2i
#define glProgramUniform2iv g_nngllProgramUniform2iv
#define glProgramUniform2f g_nngllProgramUniform2f
#define glProgramUniform2fv g_nngllProgramUniform2fv
#define glProgramUniform2d g_nngllProgramUniform2d
#define glProgramUniform2dv g_nngllProgramUniform2dv
#define glProgramUniform2ui g_nngllProgramUniform2ui
#define glProgramUniform2uiv g_nngllProgramUniform2uiv
#define glProgramUniform3i g_nngllProgramUniform3i
#define glProgramUniform3iv g_nngllProgramUniform3iv
#define glProgramUniform3f g_nngllProgramUniform3f
#define glProgramUniform3fv g_nngllProgramUniform3fv
#define glProgramUniform3d g_nngllProgramUniform3d
#define glProgramUniform3dv g_nngllProgramUniform3dv
#define glProgramUniform3ui g_nngllProgramUniform3ui
#define glProgramUniform3uiv g_nngllProgramUniform3uiv
#define glProgramUniform4i g_nngllProgramUniform4i
#define glProgramUniform4iv g_nngllProgramUniform4iv
#define glProgramUniform4f g_nngllProgramUniform4f
#define glProgramUniform4fv g_nngllProgramUniform4fv
#define glProgramUniform4d g_nngllProgramUniform4d
#define glProgramUniform4dv g_nngllProgramUniform4dv
#define glProgramUniform4ui g_nngllProgramUniform4ui
#define glProgramUniform4uiv g_nngllProgramUniform4uiv
#define glProgramUniformMatrix2fv g_nngllProgramUniformMatrix2fv
#define glProgramUniformMatrix3fv g_nngllProgramUniformMatrix3fv
#define glProgramUniformMatrix4fv g_nngllProgramUniformMatrix4fv
#define glProgramUniformMatrix2dv g_nngllProgramUniformMatrix2dv
#define glProgramUniformMatrix3dv g_nngllProgramUniformMatrix3dv
#define glProgramUniformMatrix4dv g_nngllProgramUniformMatrix4dv
#define glProgramUniformMatrix2x3fv g_nngllProgramUniformMatrix2x3fv
#define glProgramUniformMatrix3x2fv g_nngllProgramUniformMatrix3x2fv
#define glProgramUniformMatrix2x4fv g_nngllProgramUniformMatrix2x4fv
#define glProgramUniformMatrix4x2fv g_nngllProgramUniformMatrix4x2fv
#define glProgramUniformMatrix3x4fv g_nngllProgramUniformMatrix3x4fv
#define glProgramUniformMatrix4x3fv g_nngllProgramUniformMatrix4x3fv
#define glProgramUniformMatrix2x3dv g_nngllProgramUniformMatrix2x3dv
#define glProgramUniformMatrix3x2dv g_nngllProgramUniformMatrix3x2dv
#define glProgramUniformMatrix2x4dv g_nngllProgramUniformMatrix2x4dv
#define glProgramUniformMatrix4x2dv g_nngllProgramUniformMatrix4x2dv
#define glProgramUniformMatrix3x4dv g_nngllProgramUniformMatrix3x4dv
#define glProgramUniformMatrix4x3dv g_nngllProgramUniformMatrix4x3dv
#define glValidateProgramPipeline g_nngllValidateProgramPipeline
#define glGetProgramPipelineInfoLog g_nngllGetProgramPipelineInfoLog
#define glVertexAttribL1d g_nngllVertexAttribL1d
#define glVertexAttribL2d g_nngllVertexAttribL2d
#define glVertexAttribL3d g_nngllVertexAttribL3d
#define glVertexAttribL4d g_nngllVertexAttribL4d
#define glVertexAttribL1dv g_nngllVertexAttribL1dv
#define glVertexAttribL2dv g_nngllVertexAttribL2dv
#define glVertexAttribL3dv g_nngllVertexAttribL3dv
#define glVertexAttribL4dv g_nngllVertexAttribL4dv
#define glVertexAttribLPointer g_nngllVertexAttribLPointer
#define glGetVertexAttribLdv g_nngllGetVertexAttribLdv
#define glViewportArrayv g_nngllViewportArrayv
#define glViewportIndexedf g_nngllViewportIndexedf
#define glViewportIndexedfv g_nngllViewportIndexedfv
#define glScissorArrayv g_nngllScissorArrayv
#define glScissorIndexed g_nngllScissorIndexed
#define glScissorIndexedv g_nngllScissorIndexedv
#define glDepthRangeArrayv g_nngllDepthRangeArrayv
#define glDepthRangeIndexed g_nngllDepthRangeIndexed
#define glGetFloati_v g_nngllGetFloati_v
#define glGetDoublei_v g_nngllGetDoublei_v
NN_GLL_API glReleaseShaderCompilerType g_nngllReleaseShaderCompiler;
NN_GLL_API glShaderBinaryType g_nngllShaderBinary;
NN_GLL_API glGetShaderPrecisionFormatType g_nngllGetShaderPrecisionFormat;
NN_GLL_API glDepthRangefType g_nngllDepthRangef;
NN_GLL_API glClearDepthfType g_nngllClearDepthf;
NN_GLL_API glGetProgramBinaryType g_nngllGetProgramBinary;
NN_GLL_API glProgramBinaryType g_nngllProgramBinary;
NN_GLL_API glProgramParameteriType g_nngllProgramParameteri;
NN_GLL_API glUseProgramStagesType g_nngllUseProgramStages;
NN_GLL_API glActiveShaderProgramType g_nngllActiveShaderProgram;
NN_GLL_API glCreateShaderProgramvType g_nngllCreateShaderProgramv;
NN_GLL_API glBindProgramPipelineType g_nngllBindProgramPipeline;
NN_GLL_API glDeleteProgramPipelinesType g_nngllDeleteProgramPipelines;
NN_GLL_API glGenProgramPipelinesType g_nngllGenProgramPipelines;
NN_GLL_API glIsProgramPipelineType g_nngllIsProgramPipeline;
NN_GLL_API glGetProgramPipelineivType g_nngllGetProgramPipelineiv;
NN_GLL_API glProgramUniform1iType g_nngllProgramUniform1i;
NN_GLL_API glProgramUniform1ivType g_nngllProgramUniform1iv;
NN_GLL_API glProgramUniform1fType g_nngllProgramUniform1f;
NN_GLL_API glProgramUniform1fvType g_nngllProgramUniform1fv;
NN_GLL_API glProgramUniform1dType g_nngllProgramUniform1d;
NN_GLL_API glProgramUniform1dvType g_nngllProgramUniform1dv;
NN_GLL_API glProgramUniform1uiType g_nngllProgramUniform1ui;
NN_GLL_API glProgramUniform1uivType g_nngllProgramUniform1uiv;
NN_GLL_API glProgramUniform2iType g_nngllProgramUniform2i;
NN_GLL_API glProgramUniform2ivType g_nngllProgramUniform2iv;
NN_GLL_API glProgramUniform2fType g_nngllProgramUniform2f;
NN_GLL_API glProgramUniform2fvType g_nngllProgramUniform2fv;
NN_GLL_API glProgramUniform2dType g_nngllProgramUniform2d;
NN_GLL_API glProgramUniform2dvType g_nngllProgramUniform2dv;
NN_GLL_API glProgramUniform2uiType g_nngllProgramUniform2ui;
NN_GLL_API glProgramUniform2uivType g_nngllProgramUniform2uiv;
NN_GLL_API glProgramUniform3iType g_nngllProgramUniform3i;
NN_GLL_API glProgramUniform3ivType g_nngllProgramUniform3iv;
NN_GLL_API glProgramUniform3fType g_nngllProgramUniform3f;
NN_GLL_API glProgramUniform3fvType g_nngllProgramUniform3fv;
NN_GLL_API glProgramUniform3dType g_nngllProgramUniform3d;
NN_GLL_API glProgramUniform3dvType g_nngllProgramUniform3dv;
NN_GLL_API glProgramUniform3uiType g_nngllProgramUniform3ui;
NN_GLL_API glProgramUniform3uivType g_nngllProgramUniform3uiv;
NN_GLL_API glProgramUniform4iType g_nngllProgramUniform4i;
NN_GLL_API glProgramUniform4ivType g_nngllProgramUniform4iv;
NN_GLL_API glProgramUniform4fType g_nngllProgramUniform4f;
NN_GLL_API glProgramUniform4fvType g_nngllProgramUniform4fv;
NN_GLL_API glProgramUniform4dType g_nngllProgramUniform4d;
NN_GLL_API glProgramUniform4dvType g_nngllProgramUniform4dv;
NN_GLL_API glProgramUniform4uiType g_nngllProgramUniform4ui;
NN_GLL_API glProgramUniform4uivType g_nngllProgramUniform4uiv;
NN_GLL_API glProgramUniformMatrix2fvType g_nngllProgramUniformMatrix2fv;
NN_GLL_API glProgramUniformMatrix3fvType g_nngllProgramUniformMatrix3fv;
NN_GLL_API glProgramUniformMatrix4fvType g_nngllProgramUniformMatrix4fv;
NN_GLL_API glProgramUniformMatrix2dvType g_nngllProgramUniformMatrix2dv;
NN_GLL_API glProgramUniformMatrix3dvType g_nngllProgramUniformMatrix3dv;
NN_GLL_API glProgramUniformMatrix4dvType g_nngllProgramUniformMatrix4dv;
NN_GLL_API glProgramUniformMatrix2x3fvType g_nngllProgramUniformMatrix2x3fv;
NN_GLL_API glProgramUniformMatrix3x2fvType g_nngllProgramUniformMatrix3x2fv;
NN_GLL_API glProgramUniformMatrix2x4fvType g_nngllProgramUniformMatrix2x4fv;
NN_GLL_API glProgramUniformMatrix4x2fvType g_nngllProgramUniformMatrix4x2fv;
NN_GLL_API glProgramUniformMatrix3x4fvType g_nngllProgramUniformMatrix3x4fv;
NN_GLL_API glProgramUniformMatrix4x3fvType g_nngllProgramUniformMatrix4x3fv;
NN_GLL_API glProgramUniformMatrix2x3dvType g_nngllProgramUniformMatrix2x3dv;
NN_GLL_API glProgramUniformMatrix3x2dvType g_nngllProgramUniformMatrix3x2dv;
NN_GLL_API glProgramUniformMatrix2x4dvType g_nngllProgramUniformMatrix2x4dv;
NN_GLL_API glProgramUniformMatrix4x2dvType g_nngllProgramUniformMatrix4x2dv;
NN_GLL_API glProgramUniformMatrix3x4dvType g_nngllProgramUniformMatrix3x4dv;
NN_GLL_API glProgramUniformMatrix4x3dvType g_nngllProgramUniformMatrix4x3dv;
NN_GLL_API glValidateProgramPipelineType g_nngllValidateProgramPipeline;
NN_GLL_API glGetProgramPipelineInfoLogType g_nngllGetProgramPipelineInfoLog;
NN_GLL_API glVertexAttribL1dType g_nngllVertexAttribL1d;
NN_GLL_API glVertexAttribL2dType g_nngllVertexAttribL2d;
NN_GLL_API glVertexAttribL3dType g_nngllVertexAttribL3d;
NN_GLL_API glVertexAttribL4dType g_nngllVertexAttribL4d;
NN_GLL_API glVertexAttribL1dvType g_nngllVertexAttribL1dv;
NN_GLL_API glVertexAttribL2dvType g_nngllVertexAttribL2dv;
NN_GLL_API glVertexAttribL3dvType g_nngllVertexAttribL3dv;
NN_GLL_API glVertexAttribL4dvType g_nngllVertexAttribL4dv;
NN_GLL_API glVertexAttribLPointerType g_nngllVertexAttribLPointer;
NN_GLL_API glGetVertexAttribLdvType g_nngllGetVertexAttribLdv;
NN_GLL_API glViewportArrayvType g_nngllViewportArrayv;
NN_GLL_API glViewportIndexedfType g_nngllViewportIndexedf;
NN_GLL_API glViewportIndexedfvType g_nngllViewportIndexedfv;
NN_GLL_API glScissorArrayvType g_nngllScissorArrayv;
NN_GLL_API glScissorIndexedType g_nngllScissorIndexed;
NN_GLL_API glScissorIndexedvType g_nngllScissorIndexedv;
NN_GLL_API glDepthRangeArrayvType g_nngllDepthRangeArrayv;
NN_GLL_API glDepthRangeIndexedType g_nngllDepthRangeIndexed;
NN_GLL_API glGetFloati_vType g_nngllGetFloati_v;
NN_GLL_API glGetDoublei_vType g_nngllGetDoublei_v;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_4_1();
#endif // GL_VERSION_4_1

#if !defined(GL_VERSION_4_2)
#define GL_VERSION_4_2

#define GL_COPY_READ_BUFFER_BINDING 0x8F36 // NOLINT
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37 // NOLINT
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24 // NOLINT
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23 // NOLINT
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127 // NOLINT
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128 // NOLINT
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129 // NOLINT
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A // NOLINT
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B // NOLINT
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C // NOLINT
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D // NOLINT
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E // NOLINT
#define GL_NUM_SAMPLE_COUNTS 0x9380 // NOLINT
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0 // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1 // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2 // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3 // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4 // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5 // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6 // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7 // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8 // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9 // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB // NOLINT
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC // NOLINT
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD // NOLINT
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE // NOLINT
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF // NOLINT
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0 // NOLINT
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1 // NOLINT
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2 // NOLINT
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3 // NOLINT
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4 // NOLINT
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5 // NOLINT
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6 // NOLINT
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7 // NOLINT
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8 // NOLINT
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC // NOLINT
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9 // NOLINT
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA // NOLINT
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001 // NOLINT
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002 // NOLINT
#define GL_UNIFORM_BARRIER_BIT 0x00000004 // NOLINT
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008 // NOLINT
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020 // NOLINT
#define GL_COMMAND_BARRIER_BIT 0x00000040 // NOLINT
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080 // NOLINT
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100 // NOLINT
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200 // NOLINT
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800 // NOLINT
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000 // NOLINT
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF // NOLINT
#define GL_MAX_IMAGE_UNITS 0x8F38 // NOLINT
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39 // NOLINT
#define GL_IMAGE_BINDING_NAME 0x8F3A // NOLINT
#define GL_IMAGE_BINDING_LEVEL 0x8F3B // NOLINT
#define GL_IMAGE_BINDING_LAYERED 0x8F3C // NOLINT
#define GL_IMAGE_BINDING_LAYER 0x8F3D // NOLINT
#define GL_IMAGE_BINDING_ACCESS 0x8F3E // NOLINT
#define GL_IMAGE_1D 0x904C // NOLINT
#define GL_IMAGE_2D 0x904D // NOLINT
#define GL_IMAGE_3D 0x904E // NOLINT
#define GL_IMAGE_2D_RECT 0x904F // NOLINT
#define GL_IMAGE_CUBE 0x9050 // NOLINT
#define GL_IMAGE_BUFFER 0x9051 // NOLINT
#define GL_IMAGE_1D_ARRAY 0x9052 // NOLINT
#define GL_IMAGE_2D_ARRAY 0x9053 // NOLINT
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054 // NOLINT
#define GL_IMAGE_2D_MULTISAMPLE 0x9055 // NOLINT
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056 // NOLINT
#define GL_INT_IMAGE_1D 0x9057 // NOLINT
#define GL_INT_IMAGE_2D 0x9058 // NOLINT
#define GL_INT_IMAGE_3D 0x9059 // NOLINT
#define GL_INT_IMAGE_2D_RECT 0x905A // NOLINT
#define GL_INT_IMAGE_CUBE 0x905B // NOLINT
#define GL_INT_IMAGE_BUFFER 0x905C // NOLINT
#define GL_INT_IMAGE_1D_ARRAY 0x905D // NOLINT
#define GL_INT_IMAGE_2D_ARRAY 0x905E // NOLINT
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F // NOLINT
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060 // NOLINT
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A // NOLINT
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B // NOLINT
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C // NOLINT
#define GL_MAX_IMAGE_SAMPLES 0x906D // NOLINT
#define GL_IMAGE_BINDING_FORMAT 0x906E // NOLINT
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7 // NOLINT
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8 // NOLINT
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9 // NOLINT
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA // NOLINT
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB // NOLINT
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC // NOLINT
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD // NOLINT
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE // NOLINT
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF // NOLINT
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C // NOLINT
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D // NOLINT
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E // NOLINT
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F // NOLINT
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDrawArraysInstancedBaseInstanceType )( GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance );
typedef void ( NN_GLL_GL_APIENTRY *glDrawElementsInstancedBaseInstanceType )( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance );
typedef void ( NN_GLL_GL_APIENTRY *glDrawElementsInstancedBaseVertexBaseInstanceType )( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance );
typedef void ( NN_GLL_GL_APIENTRY *glGetInternalformativType )( GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveAtomicCounterBufferivType )( GLuint program, GLuint bufferIndex, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glBindImageTextureType )( GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format );
typedef void ( NN_GLL_GL_APIENTRY *glMemoryBarrierType )( GLbitfield barriers );
typedef void ( NN_GLL_GL_APIENTRY *glTexStorage1DType )( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glTexStorage2DType )( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glTexStorage3DType )( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
typedef void ( NN_GLL_GL_APIENTRY *glDrawTransformFeedbackInstancedType )( GLenum mode, GLuint id, GLsizei instancecount );
typedef void ( NN_GLL_GL_APIENTRY *glDrawTransformFeedbackStreamInstancedType )( GLenum mode, GLuint id, GLuint stream, GLsizei instancecount );
#define glDrawArraysInstancedBaseInstance g_nngllDrawArraysInstancedBaseInstance
#define glDrawElementsInstancedBaseInstance g_nngllDrawElementsInstancedBaseInstance
#define glDrawElementsInstancedBaseVertexBaseInstance g_nngllDrawElementsInstancedBaseVertexBaseInstance
#define glGetInternalformativ g_nngllGetInternalformativ
#define glGetActiveAtomicCounterBufferiv g_nngllGetActiveAtomicCounterBufferiv
#define glBindImageTexture g_nngllBindImageTexture
#define glMemoryBarrier g_nngllMemoryBarrier
#define glTexStorage1D g_nngllTexStorage1D
#define glTexStorage2D g_nngllTexStorage2D
#define glTexStorage3D g_nngllTexStorage3D
#define glDrawTransformFeedbackInstanced g_nngllDrawTransformFeedbackInstanced
#define glDrawTransformFeedbackStreamInstanced g_nngllDrawTransformFeedbackStreamInstanced
NN_GLL_API glDrawArraysInstancedBaseInstanceType g_nngllDrawArraysInstancedBaseInstance;
NN_GLL_API glDrawElementsInstancedBaseInstanceType g_nngllDrawElementsInstancedBaseInstance;
NN_GLL_API glDrawElementsInstancedBaseVertexBaseInstanceType g_nngllDrawElementsInstancedBaseVertexBaseInstance;
NN_GLL_API glGetInternalformativType g_nngllGetInternalformativ;
NN_GLL_API glGetActiveAtomicCounterBufferivType g_nngllGetActiveAtomicCounterBufferiv;
NN_GLL_API glBindImageTextureType g_nngllBindImageTexture;
NN_GLL_API glMemoryBarrierType g_nngllMemoryBarrier;
NN_GLL_API glTexStorage1DType g_nngllTexStorage1D;
NN_GLL_API glTexStorage2DType g_nngllTexStorage2D;
NN_GLL_API glTexStorage3DType g_nngllTexStorage3D;
NN_GLL_API glDrawTransformFeedbackInstancedType g_nngllDrawTransformFeedbackInstanced;
NN_GLL_API glDrawTransformFeedbackStreamInstancedType g_nngllDrawTransformFeedbackStreamInstanced;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_4_2();
#endif // GL_VERSION_4_2

#if !defined(GL_VERSION_4_3)
#define GL_VERSION_4_3

typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E // NOLINT
#define GL_COMPRESSED_RGB8_ETC2 0x9274 // NOLINT
#define GL_COMPRESSED_SRGB8_ETC2 0x9275 // NOLINT
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276 // NOLINT
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277 // NOLINT
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278 // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279 // NOLINT
#define GL_COMPRESSED_R11_EAC 0x9270 // NOLINT
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271 // NOLINT
#define GL_COMPRESSED_RG11_EAC 0x9272 // NOLINT
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273 // NOLINT
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69 // NOLINT
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A // NOLINT
#define GL_MAX_ELEMENT_INDEX 0x8D6B // NOLINT
#define GL_COMPUTE_SHADER 0x91B9 // NOLINT
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB // NOLINT
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC // NOLINT
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD // NOLINT
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262 // NOLINT
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263 // NOLINT
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264 // NOLINT
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265 // NOLINT
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266 // NOLINT
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB // NOLINT
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE // NOLINT
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF // NOLINT
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267 // NOLINT
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED // NOLINT
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE // NOLINT
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF // NOLINT
#define GL_COMPUTE_SHADER_BIT 0x00000020 // NOLINT
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242 // NOLINT
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243 // NOLINT
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244 // NOLINT
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245 // NOLINT
#define GL_DEBUG_SOURCE_API 0x8246 // NOLINT
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247 // NOLINT
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248 // NOLINT
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249 // NOLINT
#define GL_DEBUG_SOURCE_APPLICATION 0x824A // NOLINT
#define GL_DEBUG_SOURCE_OTHER 0x824B // NOLINT
#define GL_DEBUG_TYPE_ERROR 0x824C // NOLINT
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D // NOLINT
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E // NOLINT
#define GL_DEBUG_TYPE_PORTABILITY 0x824F // NOLINT
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250 // NOLINT
#define GL_DEBUG_TYPE_OTHER 0x8251 // NOLINT
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143 // NOLINT
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144 // NOLINT
#define GL_DEBUG_LOGGED_MESSAGES 0x9145 // NOLINT
#define GL_DEBUG_SEVERITY_HIGH 0x9146 // NOLINT
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147 // NOLINT
#define GL_DEBUG_SEVERITY_LOW 0x9148 // NOLINT
#define GL_DEBUG_TYPE_MARKER 0x8268 // NOLINT
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269 // NOLINT
#define GL_DEBUG_TYPE_POP_GROUP 0x826A // NOLINT
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B // NOLINT
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C // NOLINT
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D // NOLINT
#define GL_BUFFER 0x82E0 // NOLINT
#define GL_SHADER 0x82E1 // NOLINT
#define GL_PROGRAM 0x82E2 // NOLINT
#define GL_QUERY 0x82E3 // NOLINT
#define GL_PROGRAM_PIPELINE 0x82E4 // NOLINT
#define GL_SAMPLER 0x82E6 // NOLINT
#define GL_MAX_LABEL_LENGTH 0x82E8 // NOLINT
#define GL_DEBUG_OUTPUT 0x92E0 // NOLINT
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002 // NOLINT
#define GL_MAX_UNIFORM_LOCATIONS 0x826E // NOLINT
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310 // NOLINT
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311 // NOLINT
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312 // NOLINT
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313 // NOLINT
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314 // NOLINT
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315 // NOLINT
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316 // NOLINT
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317 // NOLINT
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318 // NOLINT
#define GL_INTERNALFORMAT_SUPPORTED 0x826F // NOLINT
#define GL_INTERNALFORMAT_PREFERRED 0x8270 // NOLINT
#define GL_INTERNALFORMAT_RED_SIZE 0x8271 // NOLINT
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272 // NOLINT
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273 // NOLINT
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274 // NOLINT
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275 // NOLINT
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276 // NOLINT
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277 // NOLINT
#define GL_INTERNALFORMAT_RED_TYPE 0x8278 // NOLINT
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279 // NOLINT
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A // NOLINT
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B // NOLINT
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C // NOLINT
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D // NOLINT
#define GL_MAX_WIDTH 0x827E // NOLINT
#define GL_MAX_HEIGHT 0x827F // NOLINT
#define GL_MAX_DEPTH 0x8280 // NOLINT
#define GL_MAX_LAYERS 0x8281 // NOLINT
#define GL_MAX_COMBINED_DIMENSIONS 0x8282 // NOLINT
#define GL_COLOR_COMPONENTS 0x8283 // NOLINT
#define GL_DEPTH_COMPONENTS 0x8284 // NOLINT
#define GL_STENCIL_COMPONENTS 0x8285 // NOLINT
#define GL_COLOR_RENDERABLE 0x8286 // NOLINT
#define GL_DEPTH_RENDERABLE 0x8287 // NOLINT
#define GL_STENCIL_RENDERABLE 0x8288 // NOLINT
#define GL_FRAMEBUFFER_RENDERABLE 0x8289 // NOLINT
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A // NOLINT
#define GL_FRAMEBUFFER_BLEND 0x828B // NOLINT
#define GL_READ_PIXELS 0x828C // NOLINT
#define GL_READ_PIXELS_FORMAT 0x828D // NOLINT
#define GL_READ_PIXELS_TYPE 0x828E // NOLINT
#define GL_TEXTURE_IMAGE_FORMAT 0x828F // NOLINT
#define GL_TEXTURE_IMAGE_TYPE 0x8290 // NOLINT
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291 // NOLINT
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292 // NOLINT
#define GL_MIPMAP 0x8293 // NOLINT
#define GL_MANUAL_GENERATE_MIPMAP 0x8294 // NOLINT
// Should be deprecated
#define GL_AUTO_GENERATE_MIPMAP 0x8295 // NOLINT
#define GL_COLOR_ENCODING 0x8296 // NOLINT
#define GL_SRGB_READ 0x8297 // NOLINT
#define GL_SRGB_WRITE 0x8298 // NOLINT
#define GL_FILTER 0x829A // NOLINT
#define GL_VERTEX_TEXTURE 0x829B // NOLINT
#define GL_TESS_CONTROL_TEXTURE 0x829C // NOLINT
#define GL_TESS_EVALUATION_TEXTURE 0x829D // NOLINT
#define GL_GEOMETRY_TEXTURE 0x829E // NOLINT
#define GL_FRAGMENT_TEXTURE 0x829F // NOLINT
#define GL_COMPUTE_TEXTURE 0x82A0 // NOLINT
#define GL_TEXTURE_SHADOW 0x82A1 // NOLINT
#define GL_TEXTURE_GATHER 0x82A2 // NOLINT
#define GL_TEXTURE_GATHER_SHADOW 0x82A3 // NOLINT
#define GL_SHADER_IMAGE_LOAD 0x82A4 // NOLINT
#define GL_SHADER_IMAGE_STORE 0x82A5 // NOLINT
#define GL_SHADER_IMAGE_ATOMIC 0x82A6 // NOLINT
#define GL_IMAGE_TEXEL_SIZE 0x82A7 // NOLINT
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8 // NOLINT
#define GL_IMAGE_PIXEL_FORMAT 0x82A9 // NOLINT
#define GL_IMAGE_PIXEL_TYPE 0x82AA // NOLINT
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC // NOLINT
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD // NOLINT
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE // NOLINT
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF // NOLINT
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1 // NOLINT
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2 // NOLINT
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3 // NOLINT
#define GL_CLEAR_BUFFER 0x82B4 // NOLINT
#define GL_TEXTURE_VIEW 0x82B5 // NOLINT
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6 // NOLINT
#define GL_FULL_SUPPORT 0x82B7 // NOLINT
#define GL_CAVEAT_SUPPORT 0x82B8 // NOLINT
#define GL_IMAGE_CLASS_4_X_32 0x82B9 // NOLINT
#define GL_IMAGE_CLASS_2_X_32 0x82BA // NOLINT
#define GL_IMAGE_CLASS_1_X_32 0x82BB // NOLINT
#define GL_IMAGE_CLASS_4_X_16 0x82BC // NOLINT
#define GL_IMAGE_CLASS_2_X_16 0x82BD // NOLINT
#define GL_IMAGE_CLASS_1_X_16 0x82BE // NOLINT
#define GL_IMAGE_CLASS_4_X_8 0x82BF // NOLINT
#define GL_IMAGE_CLASS_2_X_8 0x82C0 // NOLINT
#define GL_IMAGE_CLASS_1_X_8 0x82C1 // NOLINT
#define GL_IMAGE_CLASS_11_11_10 0x82C2 // NOLINT
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3 // NOLINT
#define GL_VIEW_CLASS_128_BITS 0x82C4 // NOLINT
#define GL_VIEW_CLASS_96_BITS 0x82C5 // NOLINT
#define GL_VIEW_CLASS_64_BITS 0x82C6 // NOLINT
#define GL_VIEW_CLASS_48_BITS 0x82C7 // NOLINT
#define GL_VIEW_CLASS_32_BITS 0x82C8 // NOLINT
#define GL_VIEW_CLASS_24_BITS 0x82C9 // NOLINT
#define GL_VIEW_CLASS_16_BITS 0x82CA // NOLINT
#define GL_VIEW_CLASS_8_BITS 0x82CB // NOLINT
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC // NOLINT
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD // NOLINT
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE // NOLINT
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF // NOLINT
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0 // NOLINT
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1 // NOLINT
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2 // NOLINT
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3 // NOLINT
#define GL_UNIFORM 0x92E1 // NOLINT
#define GL_UNIFORM_BLOCK 0x92E2 // NOLINT
#define GL_PROGRAM_INPUT 0x92E3 // NOLINT
#define GL_PROGRAM_OUTPUT 0x92E4 // NOLINT
#define GL_BUFFER_VARIABLE 0x92E5 // NOLINT
#define GL_SHADER_STORAGE_BLOCK 0x92E6 // NOLINT
#define GL_VERTEX_SUBROUTINE 0x92E8 // NOLINT
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9 // NOLINT
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA // NOLINT
#define GL_GEOMETRY_SUBROUTINE 0x92EB // NOLINT
#define GL_FRAGMENT_SUBROUTINE 0x92EC // NOLINT
#define GL_COMPUTE_SUBROUTINE 0x92ED // NOLINT
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE // NOLINT
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF // NOLINT
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0 // NOLINT
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1 // NOLINT
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2 // NOLINT
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3 // NOLINT
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4 // NOLINT
#define GL_ACTIVE_RESOURCES 0x92F5 // NOLINT
#define GL_MAX_NAME_LENGTH 0x92F6 // NOLINT
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7 // NOLINT
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8 // NOLINT
#define GL_NAME_LENGTH 0x92F9 // NOLINT
#define GL_TYPE 0x92FA // NOLINT
#define GL_ARRAY_SIZE 0x92FB // NOLINT
#define GL_OFFSET 0x92FC // NOLINT
#define GL_BLOCK_INDEX 0x92FD // NOLINT
#define GL_ARRAY_STRIDE 0x92FE // NOLINT
#define GL_MATRIX_STRIDE 0x92FF // NOLINT
#define GL_IS_ROW_MAJOR 0x9300 // NOLINT
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301 // NOLINT
#define GL_BUFFER_BINDING 0x9302 // NOLINT
#define GL_BUFFER_DATA_SIZE 0x9303 // NOLINT
#define GL_NUM_ACTIVE_VARIABLES 0x9304 // NOLINT
#define GL_ACTIVE_VARIABLES 0x9305 // NOLINT
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306 // NOLINT
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307 // NOLINT
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308 // NOLINT
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309 // NOLINT
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A // NOLINT
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B // NOLINT
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C // NOLINT
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D // NOLINT
#define GL_LOCATION 0x930E // NOLINT
#define GL_LOCATION_INDEX 0x930F // NOLINT
#define GL_IS_PER_PATCH 0x92E7 // NOLINT
#define GL_SHADER_STORAGE_BUFFER 0x90D2 // NOLINT
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3 // NOLINT
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4 // NOLINT
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5 // NOLINT
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6 // NOLINT
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7 // NOLINT
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8 // NOLINT
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9 // NOLINT
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA // NOLINT
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB // NOLINT
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC // NOLINT
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD // NOLINT
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE // NOLINT
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF // NOLINT
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000 // NOLINT
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39 // NOLINT
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA // NOLINT
#define GL_TEXTURE_BUFFER_OFFSET 0x919D // NOLINT
#define GL_TEXTURE_BUFFER_SIZE 0x919E // NOLINT
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F // NOLINT
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB // NOLINT
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC // NOLINT
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD // NOLINT
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE // NOLINT
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF // NOLINT
#define GL_VERTEX_ATTRIB_BINDING 0x82D4 // NOLINT
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5 // NOLINT
#define GL_VERTEX_BINDING_DIVISOR 0x82D6 // NOLINT
#define GL_VERTEX_BINDING_OFFSET 0x82D7 // NOLINT
#define GL_VERTEX_BINDING_STRIDE 0x82D8 // NOLINT
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9 // NOLINT
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA // NOLINT
#define GL_VERTEX_BINDING_BUFFER 0x8F4F // NOLINT
#define GL_DISPLAY_LIST 0x82E7 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glClearBufferDataType )( GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glClearBufferSubDataType )( GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glDispatchComputeType )( GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z );
typedef void ( NN_GLL_GL_APIENTRY *glDispatchComputeIndirectType )( GLintptr indirect );
typedef void ( NN_GLL_GL_APIENTRY *glCopyImageSubDataType )( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferParameteriType )( GLenum target, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glGetFramebufferParameterivType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetInternalformati64vType )( GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glInvalidateTexSubImageType )( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth );
typedef void ( NN_GLL_GL_APIENTRY *glInvalidateTexImageType )( GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glInvalidateBufferSubDataType )( GLuint buffer, GLintptr offset, GLsizeiptr length );
typedef void ( NN_GLL_GL_APIENTRY *glInvalidateBufferDataType )( GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glInvalidateFramebufferType )( GLenum target, GLsizei numAttachments, const GLenum *attachments );
typedef void ( NN_GLL_GL_APIENTRY *glInvalidateSubFramebufferType )( GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawArraysIndirectType )( GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawElementsIndirectType )( GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramInterfaceivType )( GLuint program, GLenum programInterface, GLenum pname, GLint *params );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGetProgramResourceIndexType )( GLuint program, GLenum programInterface, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramResourceNameType )( GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramResourceivType )( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetProgramResourceLocationType )( GLuint program, GLenum programInterface, const GLchar *name );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetProgramResourceLocationIndexType )( GLuint program, GLenum programInterface, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glShaderStorageBlockBindingType )( GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding );
typedef void ( NN_GLL_GL_APIENTRY *glTexBufferRangeType )( GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
typedef void ( NN_GLL_GL_APIENTRY *glTexStorage2DMultisampleType )( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
typedef void ( NN_GLL_GL_APIENTRY *glTexStorage3DMultisampleType )( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
typedef void ( NN_GLL_GL_APIENTRY *glTextureViewType )( GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers );
typedef void ( NN_GLL_GL_APIENTRY *glBindVertexBufferType )( GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribFormatType )( GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribIFormatType )( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribLFormatType )( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribBindingType )( GLuint attribindex, GLuint bindingindex );
typedef void ( NN_GLL_GL_APIENTRY *glVertexBindingDivisorType )( GLuint bindingindex, GLuint divisor );
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageControlType )( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageInsertType )( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf );
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageCallbackType )( GLDEBUGPROC callback, const void *userParam );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGetDebugMessageLogType )( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog );
typedef void ( NN_GLL_GL_APIENTRY *glPushDebugGroupType )( GLenum source, GLuint id, GLsizei length, const GLchar *message );
typedef void ( NN_GLL_GL_APIENTRY *glPopDebugGroupType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glObjectLabelType )( GLenum identifier, GLuint name, GLsizei length, const GLchar *label );
typedef void ( NN_GLL_GL_APIENTRY *glGetObjectLabelType )( GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label );
typedef void ( NN_GLL_GL_APIENTRY *glObjectPtrLabelType )( const void *ptr, GLsizei length, const GLchar *label );
typedef void ( NN_GLL_GL_APIENTRY *glGetObjectPtrLabelType )( const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label );
#define glClearBufferData g_nngllClearBufferData
#define glClearBufferSubData g_nngllClearBufferSubData
#define glDispatchCompute g_nngllDispatchCompute
#define glDispatchComputeIndirect g_nngllDispatchComputeIndirect
#define glCopyImageSubData g_nngllCopyImageSubData
#define glFramebufferParameteri g_nngllFramebufferParameteri
#define glGetFramebufferParameteriv g_nngllGetFramebufferParameteriv
#define glGetInternalformati64v g_nngllGetInternalformati64v
#define glInvalidateTexSubImage g_nngllInvalidateTexSubImage
#define glInvalidateTexImage g_nngllInvalidateTexImage
#define glInvalidateBufferSubData g_nngllInvalidateBufferSubData
#define glInvalidateBufferData g_nngllInvalidateBufferData
#define glInvalidateFramebuffer g_nngllInvalidateFramebuffer
#define glInvalidateSubFramebuffer g_nngllInvalidateSubFramebuffer
#define glMultiDrawArraysIndirect g_nngllMultiDrawArraysIndirect
#define glMultiDrawElementsIndirect g_nngllMultiDrawElementsIndirect
#define glGetProgramInterfaceiv g_nngllGetProgramInterfaceiv
#define glGetProgramResourceIndex g_nngllGetProgramResourceIndex
#define glGetProgramResourceName g_nngllGetProgramResourceName
#define glGetProgramResourceiv g_nngllGetProgramResourceiv
#define glGetProgramResourceLocation g_nngllGetProgramResourceLocation
#define glGetProgramResourceLocationIndex g_nngllGetProgramResourceLocationIndex
#define glShaderStorageBlockBinding g_nngllShaderStorageBlockBinding
#define glTexBufferRange g_nngllTexBufferRange
#define glTexStorage2DMultisample g_nngllTexStorage2DMultisample
#define glTexStorage3DMultisample g_nngllTexStorage3DMultisample
#define glTextureView g_nngllTextureView
#define glBindVertexBuffer g_nngllBindVertexBuffer
#define glVertexAttribFormat g_nngllVertexAttribFormat
#define glVertexAttribIFormat g_nngllVertexAttribIFormat
#define glVertexAttribLFormat g_nngllVertexAttribLFormat
#define glVertexAttribBinding g_nngllVertexAttribBinding
#define glVertexBindingDivisor g_nngllVertexBindingDivisor
#define glDebugMessageControl g_nngllDebugMessageControl
#define glDebugMessageInsert g_nngllDebugMessageInsert
#define glDebugMessageCallback g_nngllDebugMessageCallback
#define glGetDebugMessageLog g_nngllGetDebugMessageLog
#define glPushDebugGroup g_nngllPushDebugGroup
#define glPopDebugGroup g_nngllPopDebugGroup
#define glObjectLabel g_nngllObjectLabel
#define glGetObjectLabel g_nngllGetObjectLabel
#define glObjectPtrLabel g_nngllObjectPtrLabel
#define glGetObjectPtrLabel g_nngllGetObjectPtrLabel
NN_GLL_API glClearBufferDataType g_nngllClearBufferData;
NN_GLL_API glClearBufferSubDataType g_nngllClearBufferSubData;
NN_GLL_API glDispatchComputeType g_nngllDispatchCompute;
NN_GLL_API glDispatchComputeIndirectType g_nngllDispatchComputeIndirect;
NN_GLL_API glCopyImageSubDataType g_nngllCopyImageSubData;
NN_GLL_API glFramebufferParameteriType g_nngllFramebufferParameteri;
NN_GLL_API glGetFramebufferParameterivType g_nngllGetFramebufferParameteriv;
NN_GLL_API glGetInternalformati64vType g_nngllGetInternalformati64v;
NN_GLL_API glInvalidateTexSubImageType g_nngllInvalidateTexSubImage;
NN_GLL_API glInvalidateTexImageType g_nngllInvalidateTexImage;
NN_GLL_API glInvalidateBufferSubDataType g_nngllInvalidateBufferSubData;
NN_GLL_API glInvalidateBufferDataType g_nngllInvalidateBufferData;
NN_GLL_API glInvalidateFramebufferType g_nngllInvalidateFramebuffer;
NN_GLL_API glInvalidateSubFramebufferType g_nngllInvalidateSubFramebuffer;
NN_GLL_API glMultiDrawArraysIndirectType g_nngllMultiDrawArraysIndirect;
NN_GLL_API glMultiDrawElementsIndirectType g_nngllMultiDrawElementsIndirect;
NN_GLL_API glGetProgramInterfaceivType g_nngllGetProgramInterfaceiv;
NN_GLL_API glGetProgramResourceIndexType g_nngllGetProgramResourceIndex;
NN_GLL_API glGetProgramResourceNameType g_nngllGetProgramResourceName;
NN_GLL_API glGetProgramResourceivType g_nngllGetProgramResourceiv;
NN_GLL_API glGetProgramResourceLocationType g_nngllGetProgramResourceLocation;
NN_GLL_API glGetProgramResourceLocationIndexType g_nngllGetProgramResourceLocationIndex;
NN_GLL_API glShaderStorageBlockBindingType g_nngllShaderStorageBlockBinding;
NN_GLL_API glTexBufferRangeType g_nngllTexBufferRange;
NN_GLL_API glTexStorage2DMultisampleType g_nngllTexStorage2DMultisample;
NN_GLL_API glTexStorage3DMultisampleType g_nngllTexStorage3DMultisample;
NN_GLL_API glTextureViewType g_nngllTextureView;
NN_GLL_API glBindVertexBufferType g_nngllBindVertexBuffer;
NN_GLL_API glVertexAttribFormatType g_nngllVertexAttribFormat;
NN_GLL_API glVertexAttribIFormatType g_nngllVertexAttribIFormat;
NN_GLL_API glVertexAttribLFormatType g_nngllVertexAttribLFormat;
NN_GLL_API glVertexAttribBindingType g_nngllVertexAttribBinding;
NN_GLL_API glVertexBindingDivisorType g_nngllVertexBindingDivisor;
NN_GLL_API glDebugMessageControlType g_nngllDebugMessageControl;
NN_GLL_API glDebugMessageInsertType g_nngllDebugMessageInsert;
NN_GLL_API glDebugMessageCallbackType g_nngllDebugMessageCallback;
NN_GLL_API glGetDebugMessageLogType g_nngllGetDebugMessageLog;
NN_GLL_API glPushDebugGroupType g_nngllPushDebugGroup;
NN_GLL_API glPopDebugGroupType g_nngllPopDebugGroup;
NN_GLL_API glObjectLabelType g_nngllObjectLabel;
NN_GLL_API glGetObjectLabelType g_nngllGetObjectLabel;
NN_GLL_API glObjectPtrLabelType g_nngllObjectPtrLabel;
NN_GLL_API glGetObjectPtrLabelType g_nngllGetObjectPtrLabel;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_4_3();
#endif // GL_VERSION_4_3

#if !defined(GL_VERSION_4_4)
#define GL_VERSION_4_4

#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5 // NOLINT
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221 // NOLINT
// Equivalent to GL_TEXTURE_BUFFER_ARB query, but named more consistently
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A // NOLINT
#define GL_MAP_PERSISTENT_BIT 0x0040 // NOLINT
#define GL_MAP_COHERENT_BIT 0x0080 // NOLINT
#define GL_DYNAMIC_STORAGE_BIT 0x0100 // NOLINT
#define GL_CLIENT_STORAGE_BIT 0x0200 // NOLINT
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000 // NOLINT
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F // NOLINT
#define GL_BUFFER_STORAGE_FLAGS 0x8220 // NOLINT
#define GL_CLEAR_TEXTURE 0x9365 // NOLINT
#define GL_LOCATION_COMPONENT 0x934A // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C // NOLINT
#define GL_QUERY_BUFFER 0x9192 // NOLINT
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000 // NOLINT
#define GL_QUERY_BUFFER_BINDING 0x9193 // NOLINT
#define GL_QUERY_RESULT_NO_WAIT 0x9194 // NOLINT
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBufferStorageType )( GLenum target, GLsizeiptr size, const void *data, GLbitfield flags );
typedef void ( NN_GLL_GL_APIENTRY *glClearTexImageType )( GLuint texture, GLint level, GLenum format, GLenum type, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glClearTexSubImageType )( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glBindBuffersBaseType )( GLenum target, GLuint first, GLsizei count, const GLuint *buffers );
typedef void ( NN_GLL_GL_APIENTRY *glBindBuffersRangeType )( GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes );
typedef void ( NN_GLL_GL_APIENTRY *glBindTexturesType )( GLuint first, GLsizei count, const GLuint *textures );
typedef void ( NN_GLL_GL_APIENTRY *glBindSamplersType )( GLuint first, GLsizei count, const GLuint *samplers );
typedef void ( NN_GLL_GL_APIENTRY *glBindImageTexturesType )( GLuint first, GLsizei count, const GLuint *textures );
typedef void ( NN_GLL_GL_APIENTRY *glBindVertexBuffersType )( GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides );
#define glBufferStorage g_nngllBufferStorage
#define glClearTexImage g_nngllClearTexImage
#define glClearTexSubImage g_nngllClearTexSubImage
#define glBindBuffersBase g_nngllBindBuffersBase
#define glBindBuffersRange g_nngllBindBuffersRange
#define glBindTextures g_nngllBindTextures
#define glBindSamplers g_nngllBindSamplers
#define glBindImageTextures g_nngllBindImageTextures
#define glBindVertexBuffers g_nngllBindVertexBuffers
NN_GLL_API glBufferStorageType g_nngllBufferStorage;
NN_GLL_API glClearTexImageType g_nngllClearTexImage;
NN_GLL_API glClearTexSubImageType g_nngllClearTexSubImage;
NN_GLL_API glBindBuffersBaseType g_nngllBindBuffersBase;
NN_GLL_API glBindBuffersRangeType g_nngllBindBuffersRange;
NN_GLL_API glBindTexturesType g_nngllBindTextures;
NN_GLL_API glBindSamplersType g_nngllBindSamplers;
NN_GLL_API glBindImageTexturesType g_nngllBindImageTextures;
NN_GLL_API glBindVertexBuffersType g_nngllBindVertexBuffers;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_4_4();
#endif // GL_VERSION_4_4

#if !defined(GL_VERSION_4_5)
#define GL_VERSION_4_5

#define GL_CONTEXT_LOST 0x0507 // NOLINT
#define GL_NEGATIVE_ONE_TO_ONE 0x935E // NOLINT
#define GL_ZERO_TO_ONE 0x935F // NOLINT
#define GL_CLIP_ORIGIN 0x935C // NOLINT
#define GL_CLIP_DEPTH_MODE 0x935D // NOLINT
#define GL_QUERY_WAIT_INVERTED 0x8E17 // NOLINT
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18 // NOLINT
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19 // NOLINT
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A // NOLINT
#define GL_MAX_CULL_DISTANCES 0x82F9 // NOLINT
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA // NOLINT
#define GL_TEXTURE_TARGET 0x1006 // NOLINT
#define GL_QUERY_TARGET 0x82EA // NOLINT
#define GL_GUILTY_CONTEXT_RESET 0x8253 // NOLINT
#define GL_INNOCENT_CONTEXT_RESET 0x8254 // NOLINT
#define GL_UNKNOWN_CONTEXT_RESET 0x8255 // NOLINT
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256 // NOLINT
#define GL_LOSE_CONTEXT_ON_RESET 0x8252 // NOLINT
#define GL_NO_RESET_NOTIFICATION 0x8261 // NOLINT
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004 // NOLINT
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB // NOLINT
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glClipControlType )( GLenum origin, GLenum depth );
typedef void ( NN_GLL_GL_APIENTRY *glCreateTransformFeedbacksType )( GLsizei n, GLuint *ids );
typedef void ( NN_GLL_GL_APIENTRY *glTransformFeedbackBufferBaseType )( GLuint xfb, GLuint index, GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glTransformFeedbackBufferRangeType )( GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
typedef void ( NN_GLL_GL_APIENTRY *glGetTransformFeedbackivType )( GLuint xfb, GLenum pname, GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glGetTransformFeedbacki_vType )( GLuint xfb, GLenum pname, GLuint index, GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glGetTransformFeedbacki64_vType )( GLuint xfb, GLenum pname, GLuint index, GLint64 *param );
typedef void ( NN_GLL_GL_APIENTRY *glCreateBuffersType )( GLsizei n, GLuint *buffers );
typedef void ( NN_GLL_GL_APIENTRY *glNamedBufferStorageType )( GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags );
typedef void ( NN_GLL_GL_APIENTRY *glNamedBufferDataType )( GLuint buffer, GLsizeiptr size, const void *data, GLenum usage );
typedef void ( NN_GLL_GL_APIENTRY *glNamedBufferSubDataType )( GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCopyNamedBufferSubDataType )( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
typedef void ( NN_GLL_GL_APIENTRY *glClearNamedBufferDataType )( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glClearNamedBufferSubDataType )( GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
typedef void *( NN_GLL_GL_APIENTRY *glMapNamedBufferType )( GLuint buffer, GLenum access );
typedef void *( NN_GLL_GL_APIENTRY *glMapNamedBufferRangeType )( GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glUnmapNamedBufferType )( GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glFlushMappedNamedBufferRangeType )( GLuint buffer, GLintptr offset, GLsizeiptr length );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedBufferParameterivType )( GLuint buffer, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedBufferParameteri64vType )( GLuint buffer, GLenum pname, GLint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedBufferPointervType )( GLuint buffer, GLenum pname, void **params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedBufferSubDataType )( GLuint buffer, GLintptr offset, GLsizeiptr size, void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCreateFramebuffersType )( GLsizei n, GLuint *framebuffers );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferRenderbufferType )( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferParameteriType )( GLuint framebuffer, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferTextureType )( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferTextureLayerType )( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferDrawBufferType )( GLuint framebuffer, GLenum buf );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferDrawBuffersType )( GLuint framebuffer, GLsizei n, const GLenum *bufs );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferReadBufferType )( GLuint framebuffer, GLenum src );
typedef void ( NN_GLL_GL_APIENTRY *glInvalidateNamedFramebufferDataType )( GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments );
typedef void ( NN_GLL_GL_APIENTRY *glInvalidateNamedFramebufferSubDataType )( GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glClearNamedFramebufferivType )( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glClearNamedFramebufferuivType )( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glClearNamedFramebufferfvType )( GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glClearNamedFramebufferfiType )( GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil );
typedef void ( NN_GLL_GL_APIENTRY *glBlitNamedFramebufferType )( GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
typedef GLenum ( NN_GLL_GL_APIENTRY *glCheckNamedFramebufferStatusType )( GLuint framebuffer, GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedFramebufferParameterivType )( GLuint framebuffer, GLenum pname, GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedFramebufferAttachmentParameterivType )( GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glCreateRenderbuffersType )( GLsizei n, GLuint *renderbuffers );
typedef void ( NN_GLL_GL_APIENTRY *glNamedRenderbufferStorageType )( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glNamedRenderbufferStorageMultisampleType )( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedRenderbufferParameterivType )( GLuint renderbuffer, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glCreateTexturesType )( GLenum target, GLsizei n, GLuint *textures );
typedef void ( NN_GLL_GL_APIENTRY *glTextureBufferType )( GLuint texture, GLenum internalformat, GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glTextureBufferRangeType )( GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorage1DType )( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorage2DType )( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorage3DType )( GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorage2DMultisampleType )( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorage3DMultisampleType )( GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
typedef void ( NN_GLL_GL_APIENTRY *glTextureSubImage1DType )( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTextureSubImage2DType )( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTextureSubImage3DType )( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTextureSubImage1DType )( GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTextureSubImage2DType )( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTextureSubImage3DType )( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTextureSubImage1DType )( GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTextureSubImage2DType )( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTextureSubImage3DType )( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameterfType )( GLuint texture, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameterfvType )( GLuint texture, GLenum pname, const GLfloat *param );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameteriType )( GLuint texture, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameterIivType )( GLuint texture, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameterIuivType )( GLuint texture, GLenum pname, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameterivType )( GLuint texture, GLenum pname, const GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glGenerateTextureMipmapType )( GLuint texture );
typedef void ( NN_GLL_GL_APIENTRY *glBindTextureUnitType )( GLuint unit, GLuint texture );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureImageType )( GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glGetCompressedTextureImageType )( GLuint texture, GLint level, GLsizei bufSize, void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureLevelParameterfvType )( GLuint texture, GLint level, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureLevelParameterivType )( GLuint texture, GLint level, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureParameterfvType )( GLuint texture, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureParameterIivType )( GLuint texture, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureParameterIuivType )( GLuint texture, GLenum pname, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureParameterivType )( GLuint texture, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glCreateVertexArraysType )( GLsizei n, GLuint *arrays );
typedef void ( NN_GLL_GL_APIENTRY *glDisableVertexArrayAttribType )( GLuint vaobj, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glEnableVertexArrayAttribType )( GLuint vaobj, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayElementBufferType )( GLuint vaobj, GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexBufferType )( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexBuffersType )( GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayAttribBindingType )( GLuint vaobj, GLuint attribindex, GLuint bindingindex );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayAttribFormatType )( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayAttribIFormatType )( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayAttribLFormatType )( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayBindingDivisorType )( GLuint vaobj, GLuint bindingindex, GLuint divisor );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexArrayivType )( GLuint vaobj, GLenum pname, GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexArrayIndexedivType )( GLuint vaobj, GLuint index, GLenum pname, GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexArrayIndexed64ivType )( GLuint vaobj, GLuint index, GLenum pname, GLint64 *param );
typedef void ( NN_GLL_GL_APIENTRY *glCreateSamplersType )( GLsizei n, GLuint *samplers );
typedef void ( NN_GLL_GL_APIENTRY *glCreateProgramPipelinesType )( GLsizei n, GLuint *pipelines );
typedef void ( NN_GLL_GL_APIENTRY *glCreateQueriesType )( GLenum target, GLsizei n, GLuint *ids );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryBufferObjecti64vType )( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryBufferObjectivType )( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryBufferObjectui64vType )( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryBufferObjectuivType )( GLuint id, GLuint buffer, GLenum pname, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glMemoryBarrierByRegionType )( GLbitfield barriers );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureSubImageType )( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glGetCompressedTextureSubImageType )( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels );
typedef GLenum ( NN_GLL_GL_APIENTRY *glGetGraphicsResetStatusType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glGetnCompressedTexImageType )( GLenum target, GLint lod, GLsizei bufSize, void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glGetnTexImageType )( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformdvType )( GLuint program, GLint location, GLsizei bufSize, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformfvType )( GLuint program, GLint location, GLsizei bufSize, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformivType )( GLuint program, GLint location, GLsizei bufSize, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformuivType )( GLuint program, GLint location, GLsizei bufSize, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glReadnPixelsType )( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetnMapdvType )( GLenum target, GLenum query, GLsizei bufSize, GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetnMapfvType )( GLenum target, GLenum query, GLsizei bufSize, GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetnMapivType )( GLenum target, GLenum query, GLsizei bufSize, GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetnPixelMapfvType )( GLenum map, GLsizei bufSize, GLfloat *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetnPixelMapuivType )( GLenum map, GLsizei bufSize, GLuint *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetnPixelMapusvType )( GLenum map, GLsizei bufSize, GLushort *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetnPolygonStippleType )( GLsizei bufSize, GLubyte *pattern );
typedef void ( NN_GLL_GL_APIENTRY *glGetnColorTableType )( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table );
typedef void ( NN_GLL_GL_APIENTRY *glGetnConvolutionFilterType )( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image );
typedef void ( NN_GLL_GL_APIENTRY *glGetnSeparableFilterType )( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span );
typedef void ( NN_GLL_GL_APIENTRY *glGetnHistogramType )( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetnMinmaxType )( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
typedef void ( NN_GLL_GL_APIENTRY *glTextureBarrierType )(  );
#define glClipControl g_nngllClipControl
#define glCreateTransformFeedbacks g_nngllCreateTransformFeedbacks
#define glTransformFeedbackBufferBase g_nngllTransformFeedbackBufferBase
#define glTransformFeedbackBufferRange g_nngllTransformFeedbackBufferRange
#define glGetTransformFeedbackiv g_nngllGetTransformFeedbackiv
#define glGetTransformFeedbacki_v g_nngllGetTransformFeedbacki_v
#define glGetTransformFeedbacki64_v g_nngllGetTransformFeedbacki64_v
#define glCreateBuffers g_nngllCreateBuffers
#define glNamedBufferStorage g_nngllNamedBufferStorage
#define glNamedBufferData g_nngllNamedBufferData
#define glNamedBufferSubData g_nngllNamedBufferSubData
#define glCopyNamedBufferSubData g_nngllCopyNamedBufferSubData
#define glClearNamedBufferData g_nngllClearNamedBufferData
#define glClearNamedBufferSubData g_nngllClearNamedBufferSubData
#define glMapNamedBuffer g_nngllMapNamedBuffer
#define glMapNamedBufferRange g_nngllMapNamedBufferRange
#define glUnmapNamedBuffer g_nngllUnmapNamedBuffer
#define glFlushMappedNamedBufferRange g_nngllFlushMappedNamedBufferRange
#define glGetNamedBufferParameteriv g_nngllGetNamedBufferParameteriv
#define glGetNamedBufferParameteri64v g_nngllGetNamedBufferParameteri64v
#define glGetNamedBufferPointerv g_nngllGetNamedBufferPointerv
#define glGetNamedBufferSubData g_nngllGetNamedBufferSubData
#define glCreateFramebuffers g_nngllCreateFramebuffers
#define glNamedFramebufferRenderbuffer g_nngllNamedFramebufferRenderbuffer
#define glNamedFramebufferParameteri g_nngllNamedFramebufferParameteri
#define glNamedFramebufferTexture g_nngllNamedFramebufferTexture
#define glNamedFramebufferTextureLayer g_nngllNamedFramebufferTextureLayer
#define glNamedFramebufferDrawBuffer g_nngllNamedFramebufferDrawBuffer
#define glNamedFramebufferDrawBuffers g_nngllNamedFramebufferDrawBuffers
#define glNamedFramebufferReadBuffer g_nngllNamedFramebufferReadBuffer
#define glInvalidateNamedFramebufferData g_nngllInvalidateNamedFramebufferData
#define glInvalidateNamedFramebufferSubData g_nngllInvalidateNamedFramebufferSubData
#define glClearNamedFramebufferiv g_nngllClearNamedFramebufferiv
#define glClearNamedFramebufferuiv g_nngllClearNamedFramebufferuiv
#define glClearNamedFramebufferfv g_nngllClearNamedFramebufferfv
#define glClearNamedFramebufferfi g_nngllClearNamedFramebufferfi
#define glBlitNamedFramebuffer g_nngllBlitNamedFramebuffer
#define glCheckNamedFramebufferStatus g_nngllCheckNamedFramebufferStatus
#define glGetNamedFramebufferParameteriv g_nngllGetNamedFramebufferParameteriv
#define glGetNamedFramebufferAttachmentParameteriv g_nngllGetNamedFramebufferAttachmentParameteriv
#define glCreateRenderbuffers g_nngllCreateRenderbuffers
#define glNamedRenderbufferStorage g_nngllNamedRenderbufferStorage
#define glNamedRenderbufferStorageMultisample g_nngllNamedRenderbufferStorageMultisample
#define glGetNamedRenderbufferParameteriv g_nngllGetNamedRenderbufferParameteriv
#define glCreateTextures g_nngllCreateTextures
#define glTextureBuffer g_nngllTextureBuffer
#define glTextureBufferRange g_nngllTextureBufferRange
#define glTextureStorage1D g_nngllTextureStorage1D
#define glTextureStorage2D g_nngllTextureStorage2D
#define glTextureStorage3D g_nngllTextureStorage3D
#define glTextureStorage2DMultisample g_nngllTextureStorage2DMultisample
#define glTextureStorage3DMultisample g_nngllTextureStorage3DMultisample
#define glTextureSubImage1D g_nngllTextureSubImage1D
#define glTextureSubImage2D g_nngllTextureSubImage2D
#define glTextureSubImage3D g_nngllTextureSubImage3D
#define glCompressedTextureSubImage1D g_nngllCompressedTextureSubImage1D
#define glCompressedTextureSubImage2D g_nngllCompressedTextureSubImage2D
#define glCompressedTextureSubImage3D g_nngllCompressedTextureSubImage3D
#define glCopyTextureSubImage1D g_nngllCopyTextureSubImage1D
#define glCopyTextureSubImage2D g_nngllCopyTextureSubImage2D
#define glCopyTextureSubImage3D g_nngllCopyTextureSubImage3D
#define glTextureParameterf g_nngllTextureParameterf
#define glTextureParameterfv g_nngllTextureParameterfv
#define glTextureParameteri g_nngllTextureParameteri
#define glTextureParameterIiv g_nngllTextureParameterIiv
#define glTextureParameterIuiv g_nngllTextureParameterIuiv
#define glTextureParameteriv g_nngllTextureParameteriv
#define glGenerateTextureMipmap g_nngllGenerateTextureMipmap
#define glBindTextureUnit g_nngllBindTextureUnit
#define glGetTextureImage g_nngllGetTextureImage
#define glGetCompressedTextureImage g_nngllGetCompressedTextureImage
#define glGetTextureLevelParameterfv g_nngllGetTextureLevelParameterfv
#define glGetTextureLevelParameteriv g_nngllGetTextureLevelParameteriv
#define glGetTextureParameterfv g_nngllGetTextureParameterfv
#define glGetTextureParameterIiv g_nngllGetTextureParameterIiv
#define glGetTextureParameterIuiv g_nngllGetTextureParameterIuiv
#define glGetTextureParameteriv g_nngllGetTextureParameteriv
#define glCreateVertexArrays g_nngllCreateVertexArrays
#define glDisableVertexArrayAttrib g_nngllDisableVertexArrayAttrib
#define glEnableVertexArrayAttrib g_nngllEnableVertexArrayAttrib
#define glVertexArrayElementBuffer g_nngllVertexArrayElementBuffer
#define glVertexArrayVertexBuffer g_nngllVertexArrayVertexBuffer
#define glVertexArrayVertexBuffers g_nngllVertexArrayVertexBuffers
#define glVertexArrayAttribBinding g_nngllVertexArrayAttribBinding
#define glVertexArrayAttribFormat g_nngllVertexArrayAttribFormat
#define glVertexArrayAttribIFormat g_nngllVertexArrayAttribIFormat
#define glVertexArrayAttribLFormat g_nngllVertexArrayAttribLFormat
#define glVertexArrayBindingDivisor g_nngllVertexArrayBindingDivisor
#define glGetVertexArrayiv g_nngllGetVertexArrayiv
#define glGetVertexArrayIndexediv g_nngllGetVertexArrayIndexediv
#define glGetVertexArrayIndexed64iv g_nngllGetVertexArrayIndexed64iv
#define glCreateSamplers g_nngllCreateSamplers
#define glCreateProgramPipelines g_nngllCreateProgramPipelines
#define glCreateQueries g_nngllCreateQueries
#define glGetQueryBufferObjecti64v g_nngllGetQueryBufferObjecti64v
#define glGetQueryBufferObjectiv g_nngllGetQueryBufferObjectiv
#define glGetQueryBufferObjectui64v g_nngllGetQueryBufferObjectui64v
#define glGetQueryBufferObjectuiv g_nngllGetQueryBufferObjectuiv
#define glMemoryBarrierByRegion g_nngllMemoryBarrierByRegion
#define glGetTextureSubImage g_nngllGetTextureSubImage
#define glGetCompressedTextureSubImage g_nngllGetCompressedTextureSubImage
#define glGetGraphicsResetStatus g_nngllGetGraphicsResetStatus
#define glGetnCompressedTexImage g_nngllGetnCompressedTexImage
#define glGetnTexImage g_nngllGetnTexImage
#define glGetnUniformdv g_nngllGetnUniformdv
#define glGetnUniformfv g_nngllGetnUniformfv
#define glGetnUniformiv g_nngllGetnUniformiv
#define glGetnUniformuiv g_nngllGetnUniformuiv
#define glReadnPixels g_nngllReadnPixels
#define glGetnMapdv g_nngllGetnMapdv
#define glGetnMapfv g_nngllGetnMapfv
#define glGetnMapiv g_nngllGetnMapiv
#define glGetnPixelMapfv g_nngllGetnPixelMapfv
#define glGetnPixelMapuiv g_nngllGetnPixelMapuiv
#define glGetnPixelMapusv g_nngllGetnPixelMapusv
#define glGetnPolygonStipple g_nngllGetnPolygonStipple
#define glGetnColorTable g_nngllGetnColorTable
#define glGetnConvolutionFilter g_nngllGetnConvolutionFilter
#define glGetnSeparableFilter g_nngllGetnSeparableFilter
#define glGetnHistogram g_nngllGetnHistogram
#define glGetnMinmax g_nngllGetnMinmax
#define glTextureBarrier g_nngllTextureBarrier
NN_GLL_API glClipControlType g_nngllClipControl;
NN_GLL_API glCreateTransformFeedbacksType g_nngllCreateTransformFeedbacks;
NN_GLL_API glTransformFeedbackBufferBaseType g_nngllTransformFeedbackBufferBase;
NN_GLL_API glTransformFeedbackBufferRangeType g_nngllTransformFeedbackBufferRange;
NN_GLL_API glGetTransformFeedbackivType g_nngllGetTransformFeedbackiv;
NN_GLL_API glGetTransformFeedbacki_vType g_nngllGetTransformFeedbacki_v;
NN_GLL_API glGetTransformFeedbacki64_vType g_nngllGetTransformFeedbacki64_v;
NN_GLL_API glCreateBuffersType g_nngllCreateBuffers;
NN_GLL_API glNamedBufferStorageType g_nngllNamedBufferStorage;
NN_GLL_API glNamedBufferDataType g_nngllNamedBufferData;
NN_GLL_API glNamedBufferSubDataType g_nngllNamedBufferSubData;
NN_GLL_API glCopyNamedBufferSubDataType g_nngllCopyNamedBufferSubData;
NN_GLL_API glClearNamedBufferDataType g_nngllClearNamedBufferData;
NN_GLL_API glClearNamedBufferSubDataType g_nngllClearNamedBufferSubData;
NN_GLL_API glMapNamedBufferType g_nngllMapNamedBuffer;
NN_GLL_API glMapNamedBufferRangeType g_nngllMapNamedBufferRange;
NN_GLL_API glUnmapNamedBufferType g_nngllUnmapNamedBuffer;
NN_GLL_API glFlushMappedNamedBufferRangeType g_nngllFlushMappedNamedBufferRange;
NN_GLL_API glGetNamedBufferParameterivType g_nngllGetNamedBufferParameteriv;
NN_GLL_API glGetNamedBufferParameteri64vType g_nngllGetNamedBufferParameteri64v;
NN_GLL_API glGetNamedBufferPointervType g_nngllGetNamedBufferPointerv;
NN_GLL_API glGetNamedBufferSubDataType g_nngllGetNamedBufferSubData;
NN_GLL_API glCreateFramebuffersType g_nngllCreateFramebuffers;
NN_GLL_API glNamedFramebufferRenderbufferType g_nngllNamedFramebufferRenderbuffer;
NN_GLL_API glNamedFramebufferParameteriType g_nngllNamedFramebufferParameteri;
NN_GLL_API glNamedFramebufferTextureType g_nngllNamedFramebufferTexture;
NN_GLL_API glNamedFramebufferTextureLayerType g_nngllNamedFramebufferTextureLayer;
NN_GLL_API glNamedFramebufferDrawBufferType g_nngllNamedFramebufferDrawBuffer;
NN_GLL_API glNamedFramebufferDrawBuffersType g_nngllNamedFramebufferDrawBuffers;
NN_GLL_API glNamedFramebufferReadBufferType g_nngllNamedFramebufferReadBuffer;
NN_GLL_API glInvalidateNamedFramebufferDataType g_nngllInvalidateNamedFramebufferData;
NN_GLL_API glInvalidateNamedFramebufferSubDataType g_nngllInvalidateNamedFramebufferSubData;
NN_GLL_API glClearNamedFramebufferivType g_nngllClearNamedFramebufferiv;
NN_GLL_API glClearNamedFramebufferuivType g_nngllClearNamedFramebufferuiv;
NN_GLL_API glClearNamedFramebufferfvType g_nngllClearNamedFramebufferfv;
NN_GLL_API glClearNamedFramebufferfiType g_nngllClearNamedFramebufferfi;
NN_GLL_API glBlitNamedFramebufferType g_nngllBlitNamedFramebuffer;
NN_GLL_API glCheckNamedFramebufferStatusType g_nngllCheckNamedFramebufferStatus;
NN_GLL_API glGetNamedFramebufferParameterivType g_nngllGetNamedFramebufferParameteriv;
NN_GLL_API glGetNamedFramebufferAttachmentParameterivType g_nngllGetNamedFramebufferAttachmentParameteriv;
NN_GLL_API glCreateRenderbuffersType g_nngllCreateRenderbuffers;
NN_GLL_API glNamedRenderbufferStorageType g_nngllNamedRenderbufferStorage;
NN_GLL_API glNamedRenderbufferStorageMultisampleType g_nngllNamedRenderbufferStorageMultisample;
NN_GLL_API glGetNamedRenderbufferParameterivType g_nngllGetNamedRenderbufferParameteriv;
NN_GLL_API glCreateTexturesType g_nngllCreateTextures;
NN_GLL_API glTextureBufferType g_nngllTextureBuffer;
NN_GLL_API glTextureBufferRangeType g_nngllTextureBufferRange;
NN_GLL_API glTextureStorage1DType g_nngllTextureStorage1D;
NN_GLL_API glTextureStorage2DType g_nngllTextureStorage2D;
NN_GLL_API glTextureStorage3DType g_nngllTextureStorage3D;
NN_GLL_API glTextureStorage2DMultisampleType g_nngllTextureStorage2DMultisample;
NN_GLL_API glTextureStorage3DMultisampleType g_nngllTextureStorage3DMultisample;
NN_GLL_API glTextureSubImage1DType g_nngllTextureSubImage1D;
NN_GLL_API glTextureSubImage2DType g_nngllTextureSubImage2D;
NN_GLL_API glTextureSubImage3DType g_nngllTextureSubImage3D;
NN_GLL_API glCompressedTextureSubImage1DType g_nngllCompressedTextureSubImage1D;
NN_GLL_API glCompressedTextureSubImage2DType g_nngllCompressedTextureSubImage2D;
NN_GLL_API glCompressedTextureSubImage3DType g_nngllCompressedTextureSubImage3D;
NN_GLL_API glCopyTextureSubImage1DType g_nngllCopyTextureSubImage1D;
NN_GLL_API glCopyTextureSubImage2DType g_nngllCopyTextureSubImage2D;
NN_GLL_API glCopyTextureSubImage3DType g_nngllCopyTextureSubImage3D;
NN_GLL_API glTextureParameterfType g_nngllTextureParameterf;
NN_GLL_API glTextureParameterfvType g_nngllTextureParameterfv;
NN_GLL_API glTextureParameteriType g_nngllTextureParameteri;
NN_GLL_API glTextureParameterIivType g_nngllTextureParameterIiv;
NN_GLL_API glTextureParameterIuivType g_nngllTextureParameterIuiv;
NN_GLL_API glTextureParameterivType g_nngllTextureParameteriv;
NN_GLL_API glGenerateTextureMipmapType g_nngllGenerateTextureMipmap;
NN_GLL_API glBindTextureUnitType g_nngllBindTextureUnit;
NN_GLL_API glGetTextureImageType g_nngllGetTextureImage;
NN_GLL_API glGetCompressedTextureImageType g_nngllGetCompressedTextureImage;
NN_GLL_API glGetTextureLevelParameterfvType g_nngllGetTextureLevelParameterfv;
NN_GLL_API glGetTextureLevelParameterivType g_nngllGetTextureLevelParameteriv;
NN_GLL_API glGetTextureParameterfvType g_nngllGetTextureParameterfv;
NN_GLL_API glGetTextureParameterIivType g_nngllGetTextureParameterIiv;
NN_GLL_API glGetTextureParameterIuivType g_nngllGetTextureParameterIuiv;
NN_GLL_API glGetTextureParameterivType g_nngllGetTextureParameteriv;
NN_GLL_API glCreateVertexArraysType g_nngllCreateVertexArrays;
NN_GLL_API glDisableVertexArrayAttribType g_nngllDisableVertexArrayAttrib;
NN_GLL_API glEnableVertexArrayAttribType g_nngllEnableVertexArrayAttrib;
NN_GLL_API glVertexArrayElementBufferType g_nngllVertexArrayElementBuffer;
NN_GLL_API glVertexArrayVertexBufferType g_nngllVertexArrayVertexBuffer;
NN_GLL_API glVertexArrayVertexBuffersType g_nngllVertexArrayVertexBuffers;
NN_GLL_API glVertexArrayAttribBindingType g_nngllVertexArrayAttribBinding;
NN_GLL_API glVertexArrayAttribFormatType g_nngllVertexArrayAttribFormat;
NN_GLL_API glVertexArrayAttribIFormatType g_nngllVertexArrayAttribIFormat;
NN_GLL_API glVertexArrayAttribLFormatType g_nngllVertexArrayAttribLFormat;
NN_GLL_API glVertexArrayBindingDivisorType g_nngllVertexArrayBindingDivisor;
NN_GLL_API glGetVertexArrayivType g_nngllGetVertexArrayiv;
NN_GLL_API glGetVertexArrayIndexedivType g_nngllGetVertexArrayIndexediv;
NN_GLL_API glGetVertexArrayIndexed64ivType g_nngllGetVertexArrayIndexed64iv;
NN_GLL_API glCreateSamplersType g_nngllCreateSamplers;
NN_GLL_API glCreateProgramPipelinesType g_nngllCreateProgramPipelines;
NN_GLL_API glCreateQueriesType g_nngllCreateQueries;
NN_GLL_API glGetQueryBufferObjecti64vType g_nngllGetQueryBufferObjecti64v;
NN_GLL_API glGetQueryBufferObjectivType g_nngllGetQueryBufferObjectiv;
NN_GLL_API glGetQueryBufferObjectui64vType g_nngllGetQueryBufferObjectui64v;
NN_GLL_API glGetQueryBufferObjectuivType g_nngllGetQueryBufferObjectuiv;
NN_GLL_API glMemoryBarrierByRegionType g_nngllMemoryBarrierByRegion;
NN_GLL_API glGetTextureSubImageType g_nngllGetTextureSubImage;
NN_GLL_API glGetCompressedTextureSubImageType g_nngllGetCompressedTextureSubImage;
NN_GLL_API glGetGraphicsResetStatusType g_nngllGetGraphicsResetStatus;
NN_GLL_API glGetnCompressedTexImageType g_nngllGetnCompressedTexImage;
NN_GLL_API glGetnTexImageType g_nngllGetnTexImage;
NN_GLL_API glGetnUniformdvType g_nngllGetnUniformdv;
NN_GLL_API glGetnUniformfvType g_nngllGetnUniformfv;
NN_GLL_API glGetnUniformivType g_nngllGetnUniformiv;
NN_GLL_API glGetnUniformuivType g_nngllGetnUniformuiv;
NN_GLL_API glReadnPixelsType g_nngllReadnPixels;
NN_GLL_API glGetnMapdvType g_nngllGetnMapdv;
NN_GLL_API glGetnMapfvType g_nngllGetnMapfv;
NN_GLL_API glGetnMapivType g_nngllGetnMapiv;
NN_GLL_API glGetnPixelMapfvType g_nngllGetnPixelMapfv;
NN_GLL_API glGetnPixelMapuivType g_nngllGetnPixelMapuiv;
NN_GLL_API glGetnPixelMapusvType g_nngllGetnPixelMapusv;
NN_GLL_API glGetnPolygonStippleType g_nngllGetnPolygonStipple;
NN_GLL_API glGetnColorTableType g_nngllGetnColorTable;
NN_GLL_API glGetnConvolutionFilterType g_nngllGetnConvolutionFilter;
NN_GLL_API glGetnSeparableFilterType g_nngllGetnSeparableFilter;
NN_GLL_API glGetnHistogramType g_nngllGetnHistogram;
NN_GLL_API glGetnMinmaxType g_nngllGetnMinmax;
NN_GLL_API glTextureBarrierType g_nngllTextureBarrier;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_4_5();
#endif // GL_VERSION_4_5

#if !defined(GL_VERSION_4_6)
#define GL_VERSION_4_6

#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551 // NOLINT
#define GL_SPIR_V_BINARY 0x9552 // NOLINT
#define GL_PARAMETER_BUFFER 0x80EE // NOLINT
#define GL_PARAMETER_BUFFER_BINDING 0x80EF // NOLINT
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008 // NOLINT
#define GL_VERTICES_SUBMITTED 0x82EE // NOLINT
#define GL_PRIMITIVES_SUBMITTED 0x82EF // NOLINT
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0 // NOLINT
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1 // NOLINT
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2 // NOLINT
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3 // NOLINT
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4 // NOLINT
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5 // NOLINT
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6 // NOLINT
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7 // NOLINT
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B // NOLINT
#define GL_SPIR_V_EXTENSIONS 0x9553 // NOLINT
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554 // NOLINT
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE // NOLINT
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF // NOLINT
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC // NOLINT
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glSpecializeShaderType )( GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawArraysIndirectCountType )( GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawElementsIndirectCountType )( GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glPolygonOffsetClampType )( GLfloat factor, GLfloat units, GLfloat clamp );
#define glSpecializeShader g_nngllSpecializeShader
#define glMultiDrawArraysIndirectCount g_nngllMultiDrawArraysIndirectCount
#define glMultiDrawElementsIndirectCount g_nngllMultiDrawElementsIndirectCount
#define glPolygonOffsetClamp g_nngllPolygonOffsetClamp
NN_GLL_API glSpecializeShaderType g_nngllSpecializeShader;
NN_GLL_API glMultiDrawArraysIndirectCountType g_nngllMultiDrawArraysIndirectCount;
NN_GLL_API glMultiDrawElementsIndirectCountType g_nngllMultiDrawElementsIndirectCount;
NN_GLL_API glPolygonOffsetClampType g_nngllPolygonOffsetClamp;
NN_GLL_API GLboolean nngllIsSupported_GL_VERSION_4_6();
#endif // GL_VERSION_4_6

#if !defined(GL_3DFX_multisample)
#define GL_3DFX_multisample

#define GL_MULTISAMPLE_3DFX 0x86B2 // NOLINT
#define GL_SAMPLE_BUFFERS_3DFX 0x86B3 // NOLINT
#define GL_SAMPLES_3DFX 0x86B4 // NOLINT
#define GL_MULTISAMPLE_BIT_3DFX 0x20000000 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_3DFX_multisample();
#endif // GL_3DFX_multisample

#if !defined(GL_3DFX_tbuffer)
#define GL_3DFX_tbuffer

typedef void ( NN_GLL_GL_APIENTRY *glTbufferMask3DFXType )( GLuint mask );
#define glTbufferMask3DFX g_nngllTbufferMask3DFX
NN_GLL_API glTbufferMask3DFXType g_nngllTbufferMask3DFX;
NN_GLL_API GLboolean nngllIsSupported_GL_3DFX_tbuffer();
#endif // GL_3DFX_tbuffer

#if !defined(GL_3DFX_texture_compression_FXT1)
#define GL_3DFX_texture_compression_FXT1

#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0 // NOLINT
#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_3DFX_texture_compression_FXT1();
#endif // GL_3DFX_texture_compression_FXT1

#if !defined(GL_AMD_blend_minmax_factor)
#define GL_AMD_blend_minmax_factor

#define GL_FACTOR_MIN_AMD 0x901C // NOLINT
#define GL_FACTOR_MAX_AMD 0x901D // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_blend_minmax_factor();
#endif // GL_AMD_blend_minmax_factor

#if !defined(GL_AMD_conservative_depth)
#define GL_AMD_conservative_depth

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_conservative_depth();
#endif // GL_AMD_conservative_depth

#if !defined(GL_AMD_debug_output)
#define GL_AMD_debug_output

typedef void ( *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143 // NOLINT
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144 // NOLINT
#define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145 // NOLINT
#define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146 // NOLINT
#define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147 // NOLINT
#define GL_DEBUG_SEVERITY_LOW_AMD 0x9148 // NOLINT
#define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149 // NOLINT
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A // NOLINT
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B // NOLINT
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C // NOLINT
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D // NOLINT
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E // NOLINT
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F // NOLINT
#define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageEnableAMDType )( GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageInsertAMDType )( GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf );
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageCallbackAMDType )( GLDEBUGPROCAMD callback, void *userParam );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGetDebugMessageLogAMDType )( GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message );
#define glDebugMessageEnableAMD g_nngllDebugMessageEnableAMD
#define glDebugMessageInsertAMD g_nngllDebugMessageInsertAMD
#define glDebugMessageCallbackAMD g_nngllDebugMessageCallbackAMD
#define glGetDebugMessageLogAMD g_nngllGetDebugMessageLogAMD
NN_GLL_API glDebugMessageEnableAMDType g_nngllDebugMessageEnableAMD;
NN_GLL_API glDebugMessageInsertAMDType g_nngllDebugMessageInsertAMD;
NN_GLL_API glDebugMessageCallbackAMDType g_nngllDebugMessageCallbackAMD;
NN_GLL_API glGetDebugMessageLogAMDType g_nngllGetDebugMessageLogAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_debug_output();
#endif // GL_AMD_debug_output

#if !defined(GL_AMD_depth_clamp_separate)
#define GL_AMD_depth_clamp_separate

#define GL_DEPTH_CLAMP_NEAR_AMD 0x901E // NOLINT
#define GL_DEPTH_CLAMP_FAR_AMD 0x901F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_depth_clamp_separate();
#endif // GL_AMD_depth_clamp_separate

#if !defined(GL_AMD_draw_buffers_blend)
#define GL_AMD_draw_buffers_blend

typedef void ( NN_GLL_GL_APIENTRY *glBlendFuncIndexedAMDType )( GLuint buf, GLenum src, GLenum dst );
typedef void ( NN_GLL_GL_APIENTRY *glBlendFuncSeparateIndexedAMDType )( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
typedef void ( NN_GLL_GL_APIENTRY *glBlendEquationIndexedAMDType )( GLuint buf, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glBlendEquationSeparateIndexedAMDType )( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
#define glBlendFuncIndexedAMD g_nngllBlendFuncIndexedAMD
#define glBlendFuncSeparateIndexedAMD g_nngllBlendFuncSeparateIndexedAMD
#define glBlendEquationIndexedAMD g_nngllBlendEquationIndexedAMD
#define glBlendEquationSeparateIndexedAMD g_nngllBlendEquationSeparateIndexedAMD
NN_GLL_API glBlendFuncIndexedAMDType g_nngllBlendFuncIndexedAMD;
NN_GLL_API glBlendFuncSeparateIndexedAMDType g_nngllBlendFuncSeparateIndexedAMD;
NN_GLL_API glBlendEquationIndexedAMDType g_nngllBlendEquationIndexedAMD;
NN_GLL_API glBlendEquationSeparateIndexedAMDType g_nngllBlendEquationSeparateIndexedAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_draw_buffers_blend();
#endif // GL_AMD_draw_buffers_blend

#if !defined(GL_AMD_framebuffer_sample_positions)
#define GL_AMD_framebuffer_sample_positions

#define GL_SUBSAMPLE_DISTANCE_AMD 0x883F // NOLINT
#define GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD 0x91AE // NOLINT
#define GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD 0x91AF // NOLINT
#define GL_ALL_PIXELS_AMD 0xFFFFFFFF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferSamplePositionsfvAMDType )( GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat *values );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferSamplePositionsfvAMDType )( GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetFramebufferParameterfvAMDType )( GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedFramebufferParameterfvAMDType )( GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat *values );
#define glFramebufferSamplePositionsfvAMD g_nngllFramebufferSamplePositionsfvAMD
#define glNamedFramebufferSamplePositionsfvAMD g_nngllNamedFramebufferSamplePositionsfvAMD
#define glGetFramebufferParameterfvAMD g_nngllGetFramebufferParameterfvAMD
#define glGetNamedFramebufferParameterfvAMD g_nngllGetNamedFramebufferParameterfvAMD
NN_GLL_API glFramebufferSamplePositionsfvAMDType g_nngllFramebufferSamplePositionsfvAMD;
NN_GLL_API glNamedFramebufferSamplePositionsfvAMDType g_nngllNamedFramebufferSamplePositionsfvAMD;
NN_GLL_API glGetFramebufferParameterfvAMDType g_nngllGetFramebufferParameterfvAMD;
NN_GLL_API glGetNamedFramebufferParameterfvAMDType g_nngllGetNamedFramebufferParameterfvAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_framebuffer_sample_positions();
#endif // GL_AMD_framebuffer_sample_positions

#if !defined(GL_AMD_gcn_shader)
#define GL_AMD_gcn_shader

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_gcn_shader();
#endif // GL_AMD_gcn_shader

#if !defined(GL_AMD_gpu_shader_half_float)
#define GL_AMD_gpu_shader_half_float

#define GL_FLOAT16_NV 0x8FF8 // NOLINT
#define GL_FLOAT16_VEC2_NV 0x8FF9 // NOLINT
#define GL_FLOAT16_VEC3_NV 0x8FFA // NOLINT
#define GL_FLOAT16_VEC4_NV 0x8FFB // NOLINT
#define GL_FLOAT16_MAT2_AMD 0x91C5 // NOLINT
#define GL_FLOAT16_MAT3_AMD 0x91C6 // NOLINT
#define GL_FLOAT16_MAT4_AMD 0x91C7 // NOLINT
#define GL_FLOAT16_MAT2x3_AMD 0x91C8 // NOLINT
#define GL_FLOAT16_MAT2x4_AMD 0x91C9 // NOLINT
#define GL_FLOAT16_MAT3x2_AMD 0x91CA // NOLINT
#define GL_FLOAT16_MAT3x4_AMD 0x91CB // NOLINT
#define GL_FLOAT16_MAT4x2_AMD 0x91CC // NOLINT
#define GL_FLOAT16_MAT4x3_AMD 0x91CD // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_gpu_shader_half_float();
#endif // GL_AMD_gpu_shader_half_float

#if !defined(GL_AMD_gpu_shader_int16)
#define GL_AMD_gpu_shader_int16

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_gpu_shader_int16();
#endif // GL_AMD_gpu_shader_int16

#if !defined(GL_AMD_gpu_shader_int64)
#define GL_AMD_gpu_shader_int64

typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
#define GL_INT64_NV 0x140E // NOLINT
#define GL_UNSIGNED_INT64_NV 0x140F // NOLINT
#define GL_INT8_NV 0x8FE0 // NOLINT
#define GL_INT8_VEC2_NV 0x8FE1 // NOLINT
#define GL_INT8_VEC3_NV 0x8FE2 // NOLINT
#define GL_INT8_VEC4_NV 0x8FE3 // NOLINT
#define GL_INT16_NV 0x8FE4 // NOLINT
#define GL_INT16_VEC2_NV 0x8FE5 // NOLINT
#define GL_INT16_VEC3_NV 0x8FE6 // NOLINT
#define GL_INT16_VEC4_NV 0x8FE7 // NOLINT
#define GL_INT64_VEC2_NV 0x8FE9 // NOLINT
#define GL_INT64_VEC3_NV 0x8FEA // NOLINT
#define GL_INT64_VEC4_NV 0x8FEB // NOLINT
#define GL_UNSIGNED_INT8_NV 0x8FEC // NOLINT
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED // NOLINT
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE // NOLINT
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF // NOLINT
#define GL_UNSIGNED_INT16_NV 0x8FF0 // NOLINT
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1 // NOLINT
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2 // NOLINT
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3 // NOLINT
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5 // NOLINT
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6 // NOLINT
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glUniform1i64NVType )( GLint location, GLint64EXT x );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2i64NVType )( GLint location, GLint64EXT x, GLint64EXT y );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3i64NVType )( GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4i64NVType )( GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1i64vNVType )( GLint location, GLsizei count, const GLint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2i64vNVType )( GLint location, GLsizei count, const GLint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3i64vNVType )( GLint location, GLsizei count, const GLint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4i64vNVType )( GLint location, GLsizei count, const GLint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1ui64NVType )( GLint location, GLuint64EXT x );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2ui64NVType )( GLint location, GLuint64EXT x, GLuint64EXT y );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3ui64NVType )( GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4ui64NVType )( GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1ui64vNVType )( GLint location, GLsizei count, const GLuint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2ui64vNVType )( GLint location, GLsizei count, const GLuint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3ui64vNVType )( GLint location, GLsizei count, const GLuint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4ui64vNVType )( GLint location, GLsizei count, const GLuint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformi64vNVType )( GLuint program, GLint location, GLint64EXT *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformui64vNVType )( GLuint program, GLint location, GLuint64EXT *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1i64NVType )( GLuint program, GLint location, GLint64EXT x );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2i64NVType )( GLuint program, GLint location, GLint64EXT x, GLint64EXT y );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3i64NVType )( GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4i64NVType )( GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1i64vNVType )( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2i64vNVType )( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3i64vNVType )( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4i64vNVType )( GLuint program, GLint location, GLsizei count, const GLint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1ui64NVType )( GLuint program, GLint location, GLuint64EXT x );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2ui64NVType )( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3ui64NVType )( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4ui64NVType )( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1ui64vNVType )( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2ui64vNVType )( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3ui64vNVType )( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4ui64vNVType )( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
#define glUniform1i64NV g_nngllUniform1i64NV
#define glUniform2i64NV g_nngllUniform2i64NV
#define glUniform3i64NV g_nngllUniform3i64NV
#define glUniform4i64NV g_nngllUniform4i64NV
#define glUniform1i64vNV g_nngllUniform1i64vNV
#define glUniform2i64vNV g_nngllUniform2i64vNV
#define glUniform3i64vNV g_nngllUniform3i64vNV
#define glUniform4i64vNV g_nngllUniform4i64vNV
#define glUniform1ui64NV g_nngllUniform1ui64NV
#define glUniform2ui64NV g_nngllUniform2ui64NV
#define glUniform3ui64NV g_nngllUniform3ui64NV
#define glUniform4ui64NV g_nngllUniform4ui64NV
#define glUniform1ui64vNV g_nngllUniform1ui64vNV
#define glUniform2ui64vNV g_nngllUniform2ui64vNV
#define glUniform3ui64vNV g_nngllUniform3ui64vNV
#define glUniform4ui64vNV g_nngllUniform4ui64vNV
#define glGetUniformi64vNV g_nngllGetUniformi64vNV
#define glGetUniformui64vNV g_nngllGetUniformui64vNV
#define glProgramUniform1i64NV g_nngllProgramUniform1i64NV
#define glProgramUniform2i64NV g_nngllProgramUniform2i64NV
#define glProgramUniform3i64NV g_nngllProgramUniform3i64NV
#define glProgramUniform4i64NV g_nngllProgramUniform4i64NV
#define glProgramUniform1i64vNV g_nngllProgramUniform1i64vNV
#define glProgramUniform2i64vNV g_nngllProgramUniform2i64vNV
#define glProgramUniform3i64vNV g_nngllProgramUniform3i64vNV
#define glProgramUniform4i64vNV g_nngllProgramUniform4i64vNV
#define glProgramUniform1ui64NV g_nngllProgramUniform1ui64NV
#define glProgramUniform2ui64NV g_nngllProgramUniform2ui64NV
#define glProgramUniform3ui64NV g_nngllProgramUniform3ui64NV
#define glProgramUniform4ui64NV g_nngllProgramUniform4ui64NV
#define glProgramUniform1ui64vNV g_nngllProgramUniform1ui64vNV
#define glProgramUniform2ui64vNV g_nngllProgramUniform2ui64vNV
#define glProgramUniform3ui64vNV g_nngllProgramUniform3ui64vNV
#define glProgramUniform4ui64vNV g_nngllProgramUniform4ui64vNV
NN_GLL_API glUniform1i64NVType g_nngllUniform1i64NV;
NN_GLL_API glUniform2i64NVType g_nngllUniform2i64NV;
NN_GLL_API glUniform3i64NVType g_nngllUniform3i64NV;
NN_GLL_API glUniform4i64NVType g_nngllUniform4i64NV;
NN_GLL_API glUniform1i64vNVType g_nngllUniform1i64vNV;
NN_GLL_API glUniform2i64vNVType g_nngllUniform2i64vNV;
NN_GLL_API glUniform3i64vNVType g_nngllUniform3i64vNV;
NN_GLL_API glUniform4i64vNVType g_nngllUniform4i64vNV;
NN_GLL_API glUniform1ui64NVType g_nngllUniform1ui64NV;
NN_GLL_API glUniform2ui64NVType g_nngllUniform2ui64NV;
NN_GLL_API glUniform3ui64NVType g_nngllUniform3ui64NV;
NN_GLL_API glUniform4ui64NVType g_nngllUniform4ui64NV;
NN_GLL_API glUniform1ui64vNVType g_nngllUniform1ui64vNV;
NN_GLL_API glUniform2ui64vNVType g_nngllUniform2ui64vNV;
NN_GLL_API glUniform3ui64vNVType g_nngllUniform3ui64vNV;
NN_GLL_API glUniform4ui64vNVType g_nngllUniform4ui64vNV;
NN_GLL_API glGetUniformi64vNVType g_nngllGetUniformi64vNV;
NN_GLL_API glGetUniformui64vNVType g_nngllGetUniformui64vNV;
NN_GLL_API glProgramUniform1i64NVType g_nngllProgramUniform1i64NV;
NN_GLL_API glProgramUniform2i64NVType g_nngllProgramUniform2i64NV;
NN_GLL_API glProgramUniform3i64NVType g_nngllProgramUniform3i64NV;
NN_GLL_API glProgramUniform4i64NVType g_nngllProgramUniform4i64NV;
NN_GLL_API glProgramUniform1i64vNVType g_nngllProgramUniform1i64vNV;
NN_GLL_API glProgramUniform2i64vNVType g_nngllProgramUniform2i64vNV;
NN_GLL_API glProgramUniform3i64vNVType g_nngllProgramUniform3i64vNV;
NN_GLL_API glProgramUniform4i64vNVType g_nngllProgramUniform4i64vNV;
NN_GLL_API glProgramUniform1ui64NVType g_nngllProgramUniform1ui64NV;
NN_GLL_API glProgramUniform2ui64NVType g_nngllProgramUniform2ui64NV;
NN_GLL_API glProgramUniform3ui64NVType g_nngllProgramUniform3ui64NV;
NN_GLL_API glProgramUniform4ui64NVType g_nngllProgramUniform4ui64NV;
NN_GLL_API glProgramUniform1ui64vNVType g_nngllProgramUniform1ui64vNV;
NN_GLL_API glProgramUniform2ui64vNVType g_nngllProgramUniform2ui64vNV;
NN_GLL_API glProgramUniform3ui64vNVType g_nngllProgramUniform3ui64vNV;
NN_GLL_API glProgramUniform4ui64vNVType g_nngllProgramUniform4ui64vNV;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_gpu_shader_int64();
#endif // GL_AMD_gpu_shader_int64

#if !defined(GL_AMD_interleaved_elements)
#define GL_AMD_interleaved_elements

#define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0x91A4 // NOLINT
#define GL_VERTEX_ID_SWIZZLE_AMD 0x91A5 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribParameteriAMDType )( GLuint index, GLenum pname, GLint param );
#define glVertexAttribParameteriAMD g_nngllVertexAttribParameteriAMD
NN_GLL_API glVertexAttribParameteriAMDType g_nngllVertexAttribParameteriAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_interleaved_elements();
#endif // GL_AMD_interleaved_elements

#if !defined(GL_AMD_multi_draw_indirect)
#define GL_AMD_multi_draw_indirect

typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawArraysIndirectAMDType )( GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawElementsIndirectAMDType )( GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride );
#define glMultiDrawArraysIndirectAMD g_nngllMultiDrawArraysIndirectAMD
#define glMultiDrawElementsIndirectAMD g_nngllMultiDrawElementsIndirectAMD
NN_GLL_API glMultiDrawArraysIndirectAMDType g_nngllMultiDrawArraysIndirectAMD;
NN_GLL_API glMultiDrawElementsIndirectAMDType g_nngllMultiDrawElementsIndirectAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_multi_draw_indirect();
#endif // GL_AMD_multi_draw_indirect

#if !defined(GL_AMD_name_gen_delete)
#define GL_AMD_name_gen_delete

#define GL_DATA_BUFFER_AMD 0x9151 // NOLINT
#define GL_PERFORMANCE_MONITOR_AMD 0x9152 // NOLINT
#define GL_QUERY_OBJECT_AMD 0x9153 // NOLINT
#define GL_VERTEX_ARRAY_OBJECT_AMD 0x9154 // NOLINT
#define GL_SAMPLER_OBJECT_AMD 0x9155 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGenNamesAMDType )( GLenum identifier, GLuint num, GLuint *names );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteNamesAMDType )( GLenum identifier, GLuint num, const GLuint *names );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsNameAMDType )( GLenum identifier, GLuint name );
#define glGenNamesAMD g_nngllGenNamesAMD
#define glDeleteNamesAMD g_nngllDeleteNamesAMD
#define glIsNameAMD g_nngllIsNameAMD
NN_GLL_API glGenNamesAMDType g_nngllGenNamesAMD;
NN_GLL_API glDeleteNamesAMDType g_nngllDeleteNamesAMD;
NN_GLL_API glIsNameAMDType g_nngllIsNameAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_name_gen_delete();
#endif // GL_AMD_name_gen_delete

#if !defined(GL_AMD_occlusion_query_event)
#define GL_AMD_occlusion_query_event

#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F // NOLINT
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001 // NOLINT
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002 // NOLINT
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004 // NOLINT
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008 // NOLINT
#define GL_QUERY_ALL_EVENT_BITS_AMD 0xFFFFFFFF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glQueryObjectParameteruiAMDType )( GLenum target, GLuint id, GLenum pname, GLuint param );
#define glQueryObjectParameteruiAMD g_nngllQueryObjectParameteruiAMD
NN_GLL_API glQueryObjectParameteruiAMDType g_nngllQueryObjectParameteruiAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_occlusion_query_event();
#endif // GL_AMD_occlusion_query_event

#if !defined(GL_AMD_performance_monitor)
#define GL_AMD_performance_monitor

#define GL_COUNTER_TYPE_AMD 0x8BC0 // NOLINT
#define GL_COUNTER_RANGE_AMD 0x8BC1 // NOLINT
#define GL_UNSIGNED_INT64_AMD 0x8BC2 // NOLINT
#define GL_PERCENTAGE_AMD 0x8BC3 // NOLINT
#define GL_PERFMON_RESULT_AVAILABLE_AMD 0x8BC4 // NOLINT
#define GL_PERFMON_RESULT_SIZE_AMD 0x8BC5 // NOLINT
#define GL_PERFMON_RESULT_AMD 0x8BC6 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGetPerfMonitorGroupsAMDType )( GLint *numGroups, GLsizei groupsSize, GLuint *groups );
typedef void ( NN_GLL_GL_APIENTRY *glGetPerfMonitorCountersAMDType )( GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters );
typedef void ( NN_GLL_GL_APIENTRY *glGetPerfMonitorGroupStringAMDType )( GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString );
typedef void ( NN_GLL_GL_APIENTRY *glGetPerfMonitorCounterStringAMDType )( GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString );
typedef void ( NN_GLL_GL_APIENTRY *glGetPerfMonitorCounterInfoAMDType )( GLuint group, GLuint counter, GLenum pname, void *data );
typedef void ( NN_GLL_GL_APIENTRY *glGenPerfMonitorsAMDType )( GLsizei n, GLuint *monitors );
typedef void ( NN_GLL_GL_APIENTRY *glDeletePerfMonitorsAMDType )( GLsizei n, GLuint *monitors );
typedef void ( NN_GLL_GL_APIENTRY *glSelectPerfMonitorCountersAMDType )( GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList );
typedef void ( NN_GLL_GL_APIENTRY *glBeginPerfMonitorAMDType )( GLuint monitor );
typedef void ( NN_GLL_GL_APIENTRY *glEndPerfMonitorAMDType )( GLuint monitor );
typedef void ( NN_GLL_GL_APIENTRY *glGetPerfMonitorCounterDataAMDType )( GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten );
#define glGetPerfMonitorGroupsAMD g_nngllGetPerfMonitorGroupsAMD
#define glGetPerfMonitorCountersAMD g_nngllGetPerfMonitorCountersAMD
#define glGetPerfMonitorGroupStringAMD g_nngllGetPerfMonitorGroupStringAMD
#define glGetPerfMonitorCounterStringAMD g_nngllGetPerfMonitorCounterStringAMD
#define glGetPerfMonitorCounterInfoAMD g_nngllGetPerfMonitorCounterInfoAMD
#define glGenPerfMonitorsAMD g_nngllGenPerfMonitorsAMD
#define glDeletePerfMonitorsAMD g_nngllDeletePerfMonitorsAMD
#define glSelectPerfMonitorCountersAMD g_nngllSelectPerfMonitorCountersAMD
#define glBeginPerfMonitorAMD g_nngllBeginPerfMonitorAMD
#define glEndPerfMonitorAMD g_nngllEndPerfMonitorAMD
#define glGetPerfMonitorCounterDataAMD g_nngllGetPerfMonitorCounterDataAMD
NN_GLL_API glGetPerfMonitorGroupsAMDType g_nngllGetPerfMonitorGroupsAMD;
NN_GLL_API glGetPerfMonitorCountersAMDType g_nngllGetPerfMonitorCountersAMD;
NN_GLL_API glGetPerfMonitorGroupStringAMDType g_nngllGetPerfMonitorGroupStringAMD;
NN_GLL_API glGetPerfMonitorCounterStringAMDType g_nngllGetPerfMonitorCounterStringAMD;
NN_GLL_API glGetPerfMonitorCounterInfoAMDType g_nngllGetPerfMonitorCounterInfoAMD;
NN_GLL_API glGenPerfMonitorsAMDType g_nngllGenPerfMonitorsAMD;
NN_GLL_API glDeletePerfMonitorsAMDType g_nngllDeletePerfMonitorsAMD;
NN_GLL_API glSelectPerfMonitorCountersAMDType g_nngllSelectPerfMonitorCountersAMD;
NN_GLL_API glBeginPerfMonitorAMDType g_nngllBeginPerfMonitorAMD;
NN_GLL_API glEndPerfMonitorAMDType g_nngllEndPerfMonitorAMD;
NN_GLL_API glGetPerfMonitorCounterDataAMDType g_nngllGetPerfMonitorCounterDataAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_performance_monitor();
#endif // GL_AMD_performance_monitor

#if !defined(GL_AMD_pinned_memory)
#define GL_AMD_pinned_memory

#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_pinned_memory();
#endif // GL_AMD_pinned_memory

#if !defined(GL_AMD_query_buffer_object)
#define GL_AMD_query_buffer_object

#define GL_QUERY_BUFFER_AMD 0x9192 // NOLINT
#define GL_QUERY_BUFFER_BINDING_AMD 0x9193 // NOLINT
#define GL_QUERY_RESULT_NO_WAIT_AMD 0x9194 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_query_buffer_object();
#endif // GL_AMD_query_buffer_object

#if !defined(GL_AMD_sample_positions)
#define GL_AMD_sample_positions

typedef void ( NN_GLL_GL_APIENTRY *glSetMultisamplefvAMDType )( GLenum pname, GLuint index, const GLfloat *val );
#define glSetMultisamplefvAMD g_nngllSetMultisamplefvAMD
NN_GLL_API glSetMultisamplefvAMDType g_nngllSetMultisamplefvAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_sample_positions();
#endif // GL_AMD_sample_positions

#if !defined(GL_AMD_seamless_cubemap_per_texture)
#define GL_AMD_seamless_cubemap_per_texture

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_seamless_cubemap_per_texture();
#endif // GL_AMD_seamless_cubemap_per_texture

#if !defined(GL_AMD_shader_atomic_counter_ops)
#define GL_AMD_shader_atomic_counter_ops

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_shader_atomic_counter_ops();
#endif // GL_AMD_shader_atomic_counter_ops

#if !defined(GL_AMD_shader_ballot)
#define GL_AMD_shader_ballot

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_shader_ballot();
#endif // GL_AMD_shader_ballot

#if !defined(GL_AMD_shader_gpu_shader_half_float_fetch)
#define GL_AMD_shader_gpu_shader_half_float_fetch

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_shader_gpu_shader_half_float_fetch();
#endif // GL_AMD_shader_gpu_shader_half_float_fetch

#if !defined(GL_AMD_shader_image_load_store_lod)
#define GL_AMD_shader_image_load_store_lod

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_shader_image_load_store_lod();
#endif // GL_AMD_shader_image_load_store_lod

#if !defined(GL_AMD_shader_stencil_export)
#define GL_AMD_shader_stencil_export

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_shader_stencil_export();
#endif // GL_AMD_shader_stencil_export

#if !defined(GL_AMD_shader_trinary_minmax)
#define GL_AMD_shader_trinary_minmax

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_shader_trinary_minmax();
#endif // GL_AMD_shader_trinary_minmax

#if !defined(GL_AMD_shader_explicit_vertex_parameter)
#define GL_AMD_shader_explicit_vertex_parameter

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_shader_explicit_vertex_parameter();
#endif // GL_AMD_shader_explicit_vertex_parameter

#if !defined(GL_AMD_sparse_texture)
#define GL_AMD_sparse_texture

#define GL_VIRTUAL_PAGE_SIZE_X_AMD 0x9195 // NOLINT
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0x9196 // NOLINT
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0x9197 // NOLINT
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0x9198 // NOLINT
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199 // NOLINT
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A // NOLINT
#define GL_MIN_SPARSE_LEVEL_AMD 0x919B // NOLINT
#define GL_MIN_LOD_WARNING_AMD 0x919C // NOLINT
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTexStorageSparseAMDType )( GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorageSparseAMDType )( GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags );
#define glTexStorageSparseAMD g_nngllTexStorageSparseAMD
#define glTextureStorageSparseAMD g_nngllTextureStorageSparseAMD
NN_GLL_API glTexStorageSparseAMDType g_nngllTexStorageSparseAMD;
NN_GLL_API glTextureStorageSparseAMDType g_nngllTextureStorageSparseAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_sparse_texture();
#endif // GL_AMD_sparse_texture

#if !defined(GL_AMD_stencil_operation_extended)
#define GL_AMD_stencil_operation_extended

#define GL_SET_AMD 0x874A // NOLINT
#define GL_REPLACE_VALUE_AMD 0x874B // NOLINT
#define GL_STENCIL_OP_VALUE_AMD 0x874C // NOLINT
#define GL_STENCIL_BACK_OP_VALUE_AMD 0x874D // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glStencilOpValueAMDType )( GLenum face, GLuint value );
#define glStencilOpValueAMD g_nngllStencilOpValueAMD
NN_GLL_API glStencilOpValueAMDType g_nngllStencilOpValueAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_stencil_operation_extended();
#endif // GL_AMD_stencil_operation_extended

#if !defined(GL_AMD_texture_gather_bias_lod)
#define GL_AMD_texture_gather_bias_lod

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_texture_gather_bias_lod();
#endif // GL_AMD_texture_gather_bias_lod

#if !defined(GL_AMD_texture_texture4)
#define GL_AMD_texture_texture4

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_texture_texture4();
#endif // GL_AMD_texture_texture4

#if !defined(GL_AMD_transform_feedback3_lines_triangles)
#define GL_AMD_transform_feedback3_lines_triangles

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_transform_feedback3_lines_triangles();
#endif // GL_AMD_transform_feedback3_lines_triangles

#if !defined(GL_AMD_transform_feedback4)
#define GL_AMD_transform_feedback4

#define GL_STREAM_RASTERIZATION_AMD 0x91A0 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_transform_feedback4();
#endif // GL_AMD_transform_feedback4

#if !defined(GL_AMD_vertex_shader_layer)
#define GL_AMD_vertex_shader_layer

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_vertex_shader_layer();
#endif // GL_AMD_vertex_shader_layer

#if !defined(GL_AMD_vertex_shader_tessellator)
#define GL_AMD_vertex_shader_tessellator

#define GL_SAMPLER_BUFFER_AMD 0x9001 // NOLINT
#define GL_INT_SAMPLER_BUFFER_AMD 0x9002 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003 // NOLINT
#define GL_TESSELLATION_MODE_AMD 0x9004 // NOLINT
#define GL_TESSELLATION_FACTOR_AMD 0x9005 // NOLINT
#define GL_DISCRETE_AMD 0x9006 // NOLINT
#define GL_CONTINUOUS_AMD 0x9007 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTessellationFactorAMDType )( GLfloat factor );
typedef void ( NN_GLL_GL_APIENTRY *glTessellationModeAMDType )( GLenum mode );
#define glTessellationFactorAMD g_nngllTessellationFactorAMD
#define glTessellationModeAMD g_nngllTessellationModeAMD
NN_GLL_API glTessellationFactorAMDType g_nngllTessellationFactorAMD;
NN_GLL_API glTessellationModeAMDType g_nngllTessellationModeAMD;
NN_GLL_API GLboolean nngllIsSupported_GL_AMD_vertex_shader_tessellator();
#endif // GL_AMD_vertex_shader_tessellator

#if !defined(GL_AMD_vertex_shader_viewport_index)
#define GL_AMD_vertex_shader_viewport_index

NN_GLL_API GLboolean nngllIsSupported_GL_AMD_vertex_shader_viewport_index();
#endif // GL_AMD_vertex_shader_viewport_index

#if !defined(GL_APPLE_aux_depth_stencil)
#define GL_APPLE_aux_depth_stencil

#define GL_AUX_DEPTH_STENCIL_APPLE 0x8A14 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_aux_depth_stencil();
#endif // GL_APPLE_aux_depth_stencil

#if !defined(GL_APPLE_client_storage)
#define GL_APPLE_client_storage

#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_client_storage();
#endif // GL_APPLE_client_storage

#if !defined(GL_APPLE_element_array)
#define GL_APPLE_element_array

#define GL_ELEMENT_ARRAY_APPLE 0x8A0C // NOLINT
#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D // NOLINT
#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glElementPointerAPPLEType )( GLenum type, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glDrawElementArrayAPPLEType )( GLenum mode, GLint first, GLsizei count );
typedef void ( NN_GLL_GL_APIENTRY *glDrawRangeElementArrayAPPLEType )( GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawElementArrayAPPLEType )( GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawRangeElementArrayAPPLEType )( GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount );
#define glElementPointerAPPLE g_nngllElementPointerAPPLE
#define glDrawElementArrayAPPLE g_nngllDrawElementArrayAPPLE
#define glDrawRangeElementArrayAPPLE g_nngllDrawRangeElementArrayAPPLE
#define glMultiDrawElementArrayAPPLE g_nngllMultiDrawElementArrayAPPLE
#define glMultiDrawRangeElementArrayAPPLE g_nngllMultiDrawRangeElementArrayAPPLE
NN_GLL_API glElementPointerAPPLEType g_nngllElementPointerAPPLE;
NN_GLL_API glDrawElementArrayAPPLEType g_nngllDrawElementArrayAPPLE;
NN_GLL_API glDrawRangeElementArrayAPPLEType g_nngllDrawRangeElementArrayAPPLE;
NN_GLL_API glMultiDrawElementArrayAPPLEType g_nngllMultiDrawElementArrayAPPLE;
NN_GLL_API glMultiDrawRangeElementArrayAPPLEType g_nngllMultiDrawRangeElementArrayAPPLE;
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_element_array();
#endif // GL_APPLE_element_array

#if !defined(GL_APPLE_fence)
#define GL_APPLE_fence

#define GL_DRAW_PIXELS_APPLE 0x8A0A // NOLINT
#define GL_FENCE_APPLE 0x8A0B // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGenFencesAPPLEType )( GLsizei n, GLuint *fences );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteFencesAPPLEType )( GLsizei n, const GLuint *fences );
typedef void ( NN_GLL_GL_APIENTRY *glSetFenceAPPLEType )( GLuint fence );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsFenceAPPLEType )( GLuint fence );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glTestFenceAPPLEType )( GLuint fence );
typedef void ( NN_GLL_GL_APIENTRY *glFinishFenceAPPLEType )( GLuint fence );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glTestObjectAPPLEType )( GLenum object, GLuint name );
typedef void ( NN_GLL_GL_APIENTRY *glFinishObjectAPPLEType )( GLenum object, GLint name );
#define glGenFencesAPPLE g_nngllGenFencesAPPLE
#define glDeleteFencesAPPLE g_nngllDeleteFencesAPPLE
#define glSetFenceAPPLE g_nngllSetFenceAPPLE
#define glIsFenceAPPLE g_nngllIsFenceAPPLE
#define glTestFenceAPPLE g_nngllTestFenceAPPLE
#define glFinishFenceAPPLE g_nngllFinishFenceAPPLE
#define glTestObjectAPPLE g_nngllTestObjectAPPLE
#define glFinishObjectAPPLE g_nngllFinishObjectAPPLE
NN_GLL_API glGenFencesAPPLEType g_nngllGenFencesAPPLE;
NN_GLL_API glDeleteFencesAPPLEType g_nngllDeleteFencesAPPLE;
NN_GLL_API glSetFenceAPPLEType g_nngllSetFenceAPPLE;
NN_GLL_API glIsFenceAPPLEType g_nngllIsFenceAPPLE;
NN_GLL_API glTestFenceAPPLEType g_nngllTestFenceAPPLE;
NN_GLL_API glFinishFenceAPPLEType g_nngllFinishFenceAPPLE;
NN_GLL_API glTestObjectAPPLEType g_nngllTestObjectAPPLE;
NN_GLL_API glFinishObjectAPPLEType g_nngllFinishObjectAPPLE;
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_fence();
#endif // GL_APPLE_fence

#if !defined(GL_APPLE_float_pixels)
#define GL_APPLE_float_pixels

#define GL_HALF_APPLE 0x140B // NOLINT
#define GL_RGBA_FLOAT32_APPLE 0x8814 // NOLINT
#define GL_RGB_FLOAT32_APPLE 0x8815 // NOLINT
#define GL_ALPHA_FLOAT32_APPLE 0x8816 // NOLINT
#define GL_INTENSITY_FLOAT32_APPLE 0x8817 // NOLINT
#define GL_LUMINANCE_FLOAT32_APPLE 0x8818 // NOLINT
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819 // NOLINT
#define GL_RGBA_FLOAT16_APPLE 0x881A // NOLINT
#define GL_RGB_FLOAT16_APPLE 0x881B // NOLINT
#define GL_ALPHA_FLOAT16_APPLE 0x881C // NOLINT
#define GL_INTENSITY_FLOAT16_APPLE 0x881D // NOLINT
#define GL_LUMINANCE_FLOAT16_APPLE 0x881E // NOLINT
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F // NOLINT
#define GL_COLOR_FLOAT_APPLE 0x8A0F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_float_pixels();
#endif // GL_APPLE_float_pixels

#if !defined(GL_APPLE_flush_buffer_range)
#define GL_APPLE_flush_buffer_range

#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12 // NOLINT
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBufferParameteriAPPLEType )( GLenum target, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glFlushMappedBufferRangeAPPLEType )( GLenum target, GLintptr offset, GLsizeiptr size );
#define glBufferParameteriAPPLE g_nngllBufferParameteriAPPLE
#define glFlushMappedBufferRangeAPPLE g_nngllFlushMappedBufferRangeAPPLE
NN_GLL_API glBufferParameteriAPPLEType g_nngllBufferParameteriAPPLE;
NN_GLL_API glFlushMappedBufferRangeAPPLEType g_nngllFlushMappedBufferRangeAPPLE;
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_flush_buffer_range();
#endif // GL_APPLE_flush_buffer_range

#if !defined(GL_APPLE_object_purgeable)
#define GL_APPLE_object_purgeable

#define GL_BUFFER_OBJECT_APPLE 0x85B3 // NOLINT
#define GL_RELEASED_APPLE 0x8A19 // NOLINT
#define GL_VOLATILE_APPLE 0x8A1A // NOLINT
#define GL_RETAINED_APPLE 0x8A1B // NOLINT
#define GL_UNDEFINED_APPLE 0x8A1C // NOLINT
#define GL_PURGEABLE_APPLE 0x8A1D // NOLINT
typedef GLenum ( NN_GLL_GL_APIENTRY *glObjectPurgeableAPPLEType )( GLenum objectType, GLuint name, GLenum option );
typedef GLenum ( NN_GLL_GL_APIENTRY *glObjectUnpurgeableAPPLEType )( GLenum objectType, GLuint name, GLenum option );
typedef void ( NN_GLL_GL_APIENTRY *glGetObjectParameterivAPPLEType )( GLenum objectType, GLuint name, GLenum pname, GLint *params );
#define glObjectPurgeableAPPLE g_nngllObjectPurgeableAPPLE
#define glObjectUnpurgeableAPPLE g_nngllObjectUnpurgeableAPPLE
#define glGetObjectParameterivAPPLE g_nngllGetObjectParameterivAPPLE
NN_GLL_API glObjectPurgeableAPPLEType g_nngllObjectPurgeableAPPLE;
NN_GLL_API glObjectUnpurgeableAPPLEType g_nngllObjectUnpurgeableAPPLE;
NN_GLL_API glGetObjectParameterivAPPLEType g_nngllGetObjectParameterivAPPLE;
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_object_purgeable();
#endif // GL_APPLE_object_purgeable

#if !defined(GL_APPLE_rgb_422)
#define GL_APPLE_rgb_422

#define GL_RGB_422_APPLE 0x8A1F // NOLINT
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA // NOLINT
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB // NOLINT
#define GL_RGB_RAW_422_APPLE 0x8A51 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_rgb_422();
#endif // GL_APPLE_rgb_422

#if !defined(GL_APPLE_row_bytes)
#define GL_APPLE_row_bytes

#define GL_PACK_ROW_BYTES_APPLE 0x8A15 // NOLINT
#define GL_UNPACK_ROW_BYTES_APPLE 0x8A16 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_row_bytes();
#endif // GL_APPLE_row_bytes

#if !defined(GL_APPLE_specular_vector)
#define GL_APPLE_specular_vector

#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_specular_vector();
#endif // GL_APPLE_specular_vector

#if !defined(GL_APPLE_texture_range)
#define GL_APPLE_texture_range

#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7 // NOLINT
#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8 // NOLINT
#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC // NOLINT
#define GL_STORAGE_PRIVATE_APPLE 0x85BD // NOLINT
#define GL_STORAGE_CACHED_APPLE 0x85BE // NOLINT
#define GL_STORAGE_SHARED_APPLE 0x85BF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTextureRangeAPPLEType )( GLenum target, GLsizei length, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexParameterPointervAPPLEType )( GLenum target, GLenum pname, void **params );
#define glTextureRangeAPPLE g_nngllTextureRangeAPPLE
#define glGetTexParameterPointervAPPLE g_nngllGetTexParameterPointervAPPLE
NN_GLL_API glTextureRangeAPPLEType g_nngllTextureRangeAPPLE;
NN_GLL_API glGetTexParameterPointervAPPLEType g_nngllGetTexParameterPointervAPPLE;
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_texture_range();
#endif // GL_APPLE_texture_range

#if !defined(GL_APPLE_transform_hint)
#define GL_APPLE_transform_hint

#define GL_TRANSFORM_HINT_APPLE 0x85B1 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_transform_hint();
#endif // GL_APPLE_transform_hint

#if !defined(GL_APPLE_vertex_array_object)
#define GL_APPLE_vertex_array_object

#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBindVertexArrayAPPLEType )( GLuint array );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteVertexArraysAPPLEType )( GLsizei n, const GLuint *arrays );
typedef void ( NN_GLL_GL_APIENTRY *glGenVertexArraysAPPLEType )( GLsizei n, GLuint *arrays );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsVertexArrayAPPLEType )( GLuint array );
#define glBindVertexArrayAPPLE g_nngllBindVertexArrayAPPLE
#define glDeleteVertexArraysAPPLE g_nngllDeleteVertexArraysAPPLE
#define glGenVertexArraysAPPLE g_nngllGenVertexArraysAPPLE
#define glIsVertexArrayAPPLE g_nngllIsVertexArrayAPPLE
NN_GLL_API glBindVertexArrayAPPLEType g_nngllBindVertexArrayAPPLE;
NN_GLL_API glDeleteVertexArraysAPPLEType g_nngllDeleteVertexArraysAPPLE;
NN_GLL_API glGenVertexArraysAPPLEType g_nngllGenVertexArraysAPPLE;
NN_GLL_API glIsVertexArrayAPPLEType g_nngllIsVertexArrayAPPLE;
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_vertex_array_object();
#endif // GL_APPLE_vertex_array_object

#if !defined(GL_APPLE_vertex_array_range)
#define GL_APPLE_vertex_array_range

#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D // NOLINT
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E // NOLINT
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F // NOLINT
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521 // NOLINT
#define GL_STORAGE_CLIENT_APPLE 0x85B4 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayRangeAPPLEType )( GLsizei length, void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glFlushVertexArrayRangeAPPLEType )( GLsizei length, void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayParameteriAPPLEType )( GLenum pname, GLint param );
#define glVertexArrayRangeAPPLE g_nngllVertexArrayRangeAPPLE
#define glFlushVertexArrayRangeAPPLE g_nngllFlushVertexArrayRangeAPPLE
#define glVertexArrayParameteriAPPLE g_nngllVertexArrayParameteriAPPLE
NN_GLL_API glVertexArrayRangeAPPLEType g_nngllVertexArrayRangeAPPLE;
NN_GLL_API glFlushVertexArrayRangeAPPLEType g_nngllFlushVertexArrayRangeAPPLE;
NN_GLL_API glVertexArrayParameteriAPPLEType g_nngllVertexArrayParameteriAPPLE;
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_vertex_array_range();
#endif // GL_APPLE_vertex_array_range

#if !defined(GL_APPLE_vertex_program_evaluators)
#define GL_APPLE_vertex_program_evaluators

#define GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00 // NOLINT
#define GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01 // NOLINT
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02 // NOLINT
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03 // NOLINT
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04 // NOLINT
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05 // NOLINT
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06 // NOLINT
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07 // NOLINT
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08 // NOLINT
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glEnableVertexAttribAPPLEType )( GLuint index, GLenum pname );
typedef void ( NN_GLL_GL_APIENTRY *glDisableVertexAttribAPPLEType )( GLuint index, GLenum pname );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsVertexAttribEnabledAPPLEType )( GLuint index, GLenum pname );
typedef void ( NN_GLL_GL_APIENTRY *glMapVertexAttrib1dAPPLEType )( GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
typedef void ( NN_GLL_GL_APIENTRY *glMapVertexAttrib1fAPPLEType )( GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
typedef void ( NN_GLL_GL_APIENTRY *glMapVertexAttrib2dAPPLEType )( GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
typedef void ( NN_GLL_GL_APIENTRY *glMapVertexAttrib2fAPPLEType )( GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
#define glEnableVertexAttribAPPLE g_nngllEnableVertexAttribAPPLE
#define glDisableVertexAttribAPPLE g_nngllDisableVertexAttribAPPLE
#define glIsVertexAttribEnabledAPPLE g_nngllIsVertexAttribEnabledAPPLE
#define glMapVertexAttrib1dAPPLE g_nngllMapVertexAttrib1dAPPLE
#define glMapVertexAttrib1fAPPLE g_nngllMapVertexAttrib1fAPPLE
#define glMapVertexAttrib2dAPPLE g_nngllMapVertexAttrib2dAPPLE
#define glMapVertexAttrib2fAPPLE g_nngllMapVertexAttrib2fAPPLE
NN_GLL_API glEnableVertexAttribAPPLEType g_nngllEnableVertexAttribAPPLE;
NN_GLL_API glDisableVertexAttribAPPLEType g_nngllDisableVertexAttribAPPLE;
NN_GLL_API glIsVertexAttribEnabledAPPLEType g_nngllIsVertexAttribEnabledAPPLE;
NN_GLL_API glMapVertexAttrib1dAPPLEType g_nngllMapVertexAttrib1dAPPLE;
NN_GLL_API glMapVertexAttrib1fAPPLEType g_nngllMapVertexAttrib1fAPPLE;
NN_GLL_API glMapVertexAttrib2dAPPLEType g_nngllMapVertexAttrib2dAPPLE;
NN_GLL_API glMapVertexAttrib2fAPPLEType g_nngllMapVertexAttrib2fAPPLE;
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_vertex_program_evaluators();
#endif // GL_APPLE_vertex_program_evaluators

#if !defined(GL_APPLE_ycbcr_422)
#define GL_APPLE_ycbcr_422

#define GL_YCBCR_422_APPLE 0x85B9 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_APPLE_ycbcr_422();
#endif // GL_APPLE_ycbcr_422

#if !defined(GL_ARB_ES2_compatibility)
#define GL_ARB_ES2_compatibility

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_ES2_compatibility();
#endif // GL_ARB_ES2_compatibility

#if !defined(GL_ARB_ES3_1_compatibility)
#define GL_ARB_ES3_1_compatibility

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_ES3_1_compatibility();
#endif // GL_ARB_ES3_1_compatibility

#if !defined(GL_ARB_ES3_2_compatibility)
#define GL_ARB_ES3_2_compatibility

#define GL_PRIMITIVE_BOUNDING_BOX_ARB 0x92BE // NOLINT
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381 // NOLINT
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPrimitiveBoundingBoxARBType )( GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW );
#define glPrimitiveBoundingBoxARB g_nngllPrimitiveBoundingBoxARB
NN_GLL_API glPrimitiveBoundingBoxARBType g_nngllPrimitiveBoundingBoxARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_ES3_2_compatibility();
#endif // GL_ARB_ES3_2_compatibility

#if !defined(GL_ARB_ES3_compatibility)
#define GL_ARB_ES3_compatibility

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_ES3_compatibility();
#endif // GL_ARB_ES3_compatibility

#if !defined(GL_ARB_arrays_of_arrays)
#define GL_ARB_arrays_of_arrays

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_arrays_of_arrays();
#endif // GL_ARB_arrays_of_arrays

#if !defined(GL_ARB_base_instance)
#define GL_ARB_base_instance

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_base_instance();
#endif // GL_ARB_base_instance

#if !defined(GL_ARB_bindless_texture)
#define GL_ARB_bindless_texture

#define GL_UNSIGNED_INT64_ARB 0x140F // NOLINT
typedef GLuint64 ( NN_GLL_GL_APIENTRY *glGetTextureHandleARBType )( GLuint texture );
typedef GLuint64 ( NN_GLL_GL_APIENTRY *glGetTextureSamplerHandleARBType )( GLuint texture, GLuint sampler );
typedef void ( NN_GLL_GL_APIENTRY *glMakeTextureHandleResidentARBType )( GLuint64 handle );
typedef void ( NN_GLL_GL_APIENTRY *glMakeTextureHandleNonResidentARBType )( GLuint64 handle );
typedef GLuint64 ( NN_GLL_GL_APIENTRY *glGetImageHandleARBType )( GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format );
typedef void ( NN_GLL_GL_APIENTRY *glMakeImageHandleResidentARBType )( GLuint64 handle, GLenum access );
typedef void ( NN_GLL_GL_APIENTRY *glMakeImageHandleNonResidentARBType )( GLuint64 handle );
typedef void ( NN_GLL_GL_APIENTRY *glUniformHandleui64ARBType )( GLint location, GLuint64 value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformHandleui64vARBType )( GLint location, GLsizei count, const GLuint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformHandleui64ARBType )( GLuint program, GLint location, GLuint64 value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformHandleui64vARBType )( GLuint program, GLint location, GLsizei count, const GLuint64 *values );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsTextureHandleResidentARBType )( GLuint64 handle );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsImageHandleResidentARBType )( GLuint64 handle );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL1ui64ARBType )( GLuint index, GLuint64EXT x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL1ui64vARBType )( GLuint index, const GLuint64EXT *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribLui64vARBType )( GLuint index, GLenum pname, GLuint64EXT *params );
#define glGetTextureHandleARB g_nngllGetTextureHandleARB
#define glGetTextureSamplerHandleARB g_nngllGetTextureSamplerHandleARB
#define glMakeTextureHandleResidentARB g_nngllMakeTextureHandleResidentARB
#define glMakeTextureHandleNonResidentARB g_nngllMakeTextureHandleNonResidentARB
#define glGetImageHandleARB g_nngllGetImageHandleARB
#define glMakeImageHandleResidentARB g_nngllMakeImageHandleResidentARB
#define glMakeImageHandleNonResidentARB g_nngllMakeImageHandleNonResidentARB
#define glUniformHandleui64ARB g_nngllUniformHandleui64ARB
#define glUniformHandleui64vARB g_nngllUniformHandleui64vARB
#define glProgramUniformHandleui64ARB g_nngllProgramUniformHandleui64ARB
#define glProgramUniformHandleui64vARB g_nngllProgramUniformHandleui64vARB
#define glIsTextureHandleResidentARB g_nngllIsTextureHandleResidentARB
#define glIsImageHandleResidentARB g_nngllIsImageHandleResidentARB
#define glVertexAttribL1ui64ARB g_nngllVertexAttribL1ui64ARB
#define glVertexAttribL1ui64vARB g_nngllVertexAttribL1ui64vARB
#define glGetVertexAttribLui64vARB g_nngllGetVertexAttribLui64vARB
NN_GLL_API glGetTextureHandleARBType g_nngllGetTextureHandleARB;
NN_GLL_API glGetTextureSamplerHandleARBType g_nngllGetTextureSamplerHandleARB;
NN_GLL_API glMakeTextureHandleResidentARBType g_nngllMakeTextureHandleResidentARB;
NN_GLL_API glMakeTextureHandleNonResidentARBType g_nngllMakeTextureHandleNonResidentARB;
NN_GLL_API glGetImageHandleARBType g_nngllGetImageHandleARB;
NN_GLL_API glMakeImageHandleResidentARBType g_nngllMakeImageHandleResidentARB;
NN_GLL_API glMakeImageHandleNonResidentARBType g_nngllMakeImageHandleNonResidentARB;
NN_GLL_API glUniformHandleui64ARBType g_nngllUniformHandleui64ARB;
NN_GLL_API glUniformHandleui64vARBType g_nngllUniformHandleui64vARB;
NN_GLL_API glProgramUniformHandleui64ARBType g_nngllProgramUniformHandleui64ARB;
NN_GLL_API glProgramUniformHandleui64vARBType g_nngllProgramUniformHandleui64vARB;
NN_GLL_API glIsTextureHandleResidentARBType g_nngllIsTextureHandleResidentARB;
NN_GLL_API glIsImageHandleResidentARBType g_nngllIsImageHandleResidentARB;
NN_GLL_API glVertexAttribL1ui64ARBType g_nngllVertexAttribL1ui64ARB;
NN_GLL_API glVertexAttribL1ui64vARBType g_nngllVertexAttribL1ui64vARB;
NN_GLL_API glGetVertexAttribLui64vARBType g_nngllGetVertexAttribLui64vARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_bindless_texture();
#endif // GL_ARB_bindless_texture

#if !defined(GL_ARB_blend_func_extended)
#define GL_ARB_blend_func_extended

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_blend_func_extended();
#endif // GL_ARB_blend_func_extended

#if !defined(GL_ARB_buffer_storage)
#define GL_ARB_buffer_storage

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_buffer_storage();
#endif // GL_ARB_buffer_storage

#if !defined(GL_ARB_cl_event)
#define GL_ARB_cl_event

// compatible with OpenCL cl_context
struct _cl_context;
// compatible with OpenCL cl_event
struct _cl_event;
#define GL_SYNC_CL_EVENT_ARB 0x8240 // NOLINT
#define GL_SYNC_CL_EVENT_COMPLETE_ARB 0x8241 // NOLINT
typedef GLsync ( NN_GLL_GL_APIENTRY *glCreateSyncFromCLeventARBType )( struct _cl_context *context, struct _cl_event *event, GLbitfield flags );
#define glCreateSyncFromCLeventARB g_nngllCreateSyncFromCLeventARB
NN_GLL_API glCreateSyncFromCLeventARBType g_nngllCreateSyncFromCLeventARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_cl_event();
#endif // GL_ARB_cl_event

#if !defined(GL_ARB_clear_buffer_object)
#define GL_ARB_clear_buffer_object

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_clear_buffer_object();
#endif // GL_ARB_clear_buffer_object

#if !defined(GL_ARB_clear_texture)
#define GL_ARB_clear_texture

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_clear_texture();
#endif // GL_ARB_clear_texture

#if !defined(GL_ARB_clip_control)
#define GL_ARB_clip_control

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_clip_control();
#endif // GL_ARB_clip_control

#if !defined(GL_ARB_color_buffer_float)
#define GL_ARB_color_buffer_float

#define GL_RGBA_FLOAT_MODE_ARB 0x8820 // NOLINT
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A // NOLINT
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B // NOLINT
#define GL_CLAMP_READ_COLOR_ARB 0x891C // NOLINT
#define GL_FIXED_ONLY_ARB 0x891D // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glClampColorARBType )( GLenum target, GLenum clamp );
#define glClampColorARB g_nngllClampColorARB
NN_GLL_API glClampColorARBType g_nngllClampColorARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_color_buffer_float();
#endif // GL_ARB_color_buffer_float

#if !defined(GL_ARB_compatibility)
#define GL_ARB_compatibility

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_compatibility();
#endif // GL_ARB_compatibility

#if !defined(GL_ARB_compressed_texture_pixel_storage)
#define GL_ARB_compressed_texture_pixel_storage

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_compressed_texture_pixel_storage();
#endif // GL_ARB_compressed_texture_pixel_storage

#if !defined(GL_ARB_compute_shader)
#define GL_ARB_compute_shader

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_compute_shader();
#endif // GL_ARB_compute_shader

#if !defined(GL_ARB_compute_variable_group_size)
#define GL_ARB_compute_variable_group_size

#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344 // NOLINT
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB // NOLINT
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345 // NOLINT
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDispatchComputeGroupSizeARBType )( GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z );
#define glDispatchComputeGroupSizeARB g_nngllDispatchComputeGroupSizeARB
NN_GLL_API glDispatchComputeGroupSizeARBType g_nngllDispatchComputeGroupSizeARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_compute_variable_group_size();
#endif // GL_ARB_compute_variable_group_size

#if !defined(GL_ARB_conditional_render_inverted)
#define GL_ARB_conditional_render_inverted

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_conditional_render_inverted();
#endif // GL_ARB_conditional_render_inverted

#if !defined(GL_ARB_conservative_depth)
#define GL_ARB_conservative_depth

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_conservative_depth();
#endif // GL_ARB_conservative_depth

#if !defined(GL_ARB_copy_buffer)
#define GL_ARB_copy_buffer

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_copy_buffer();
#endif // GL_ARB_copy_buffer

#if !defined(GL_ARB_copy_image)
#define GL_ARB_copy_image

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_copy_image();
#endif // GL_ARB_copy_image

#if !defined(GL_ARB_cull_distance)
#define GL_ARB_cull_distance

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_cull_distance();
#endif // GL_ARB_cull_distance

#if !defined(GL_ARB_debug_output)
#define GL_ARB_debug_output

typedef void ( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242 // NOLINT
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243 // NOLINT
#define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244 // NOLINT
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245 // NOLINT
#define GL_DEBUG_SOURCE_API_ARB 0x8246 // NOLINT
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247 // NOLINT
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248 // NOLINT
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249 // NOLINT
#define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A // NOLINT
#define GL_DEBUG_SOURCE_OTHER_ARB 0x824B // NOLINT
#define GL_DEBUG_TYPE_ERROR_ARB 0x824C // NOLINT
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D // NOLINT
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E // NOLINT
#define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F // NOLINT
#define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250 // NOLINT
#define GL_DEBUG_TYPE_OTHER_ARB 0x8251 // NOLINT
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143 // NOLINT
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144 // NOLINT
#define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145 // NOLINT
#define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146 // NOLINT
#define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147 // NOLINT
#define GL_DEBUG_SEVERITY_LOW_ARB 0x9148 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageControlARBType )( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageInsertARBType )( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf );
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageCallbackARBType )( GLDEBUGPROCARB callback, const void *userParam );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGetDebugMessageLogARBType )( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog );
#define glDebugMessageControlARB g_nngllDebugMessageControlARB
#define glDebugMessageInsertARB g_nngllDebugMessageInsertARB
#define glDebugMessageCallbackARB g_nngllDebugMessageCallbackARB
#define glGetDebugMessageLogARB g_nngllGetDebugMessageLogARB
NN_GLL_API glDebugMessageControlARBType g_nngllDebugMessageControlARB;
NN_GLL_API glDebugMessageInsertARBType g_nngllDebugMessageInsertARB;
NN_GLL_API glDebugMessageCallbackARBType g_nngllDebugMessageCallbackARB;
NN_GLL_API glGetDebugMessageLogARBType g_nngllGetDebugMessageLogARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_debug_output();
#endif // GL_ARB_debug_output

#if !defined(GL_ARB_depth_buffer_float)
#define GL_ARB_depth_buffer_float

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_depth_buffer_float();
#endif // GL_ARB_depth_buffer_float

#if !defined(GL_ARB_depth_clamp)
#define GL_ARB_depth_clamp

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_depth_clamp();
#endif // GL_ARB_depth_clamp

#if !defined(GL_ARB_depth_texture)
#define GL_ARB_depth_texture

#define GL_DEPTH_COMPONENT16_ARB 0x81A5 // NOLINT
#define GL_DEPTH_COMPONENT24_ARB 0x81A6 // NOLINT
#define GL_DEPTH_COMPONENT32_ARB 0x81A7 // NOLINT
#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A // NOLINT
#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_depth_texture();
#endif // GL_ARB_depth_texture

#if !defined(GL_ARB_derivative_control)
#define GL_ARB_derivative_control

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_derivative_control();
#endif // GL_ARB_derivative_control

#if !defined(GL_ARB_direct_state_access)
#define GL_ARB_direct_state_access

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_direct_state_access();
#endif // GL_ARB_direct_state_access

#if !defined(GL_ARB_draw_buffers)
#define GL_ARB_draw_buffers

#define GL_MAX_DRAW_BUFFERS_ARB 0x8824 // NOLINT
#define GL_DRAW_BUFFER0_ARB 0x8825 // NOLINT
#define GL_DRAW_BUFFER1_ARB 0x8826 // NOLINT
#define GL_DRAW_BUFFER2_ARB 0x8827 // NOLINT
#define GL_DRAW_BUFFER3_ARB 0x8828 // NOLINT
#define GL_DRAW_BUFFER4_ARB 0x8829 // NOLINT
#define GL_DRAW_BUFFER5_ARB 0x882A // NOLINT
#define GL_DRAW_BUFFER6_ARB 0x882B // NOLINT
#define GL_DRAW_BUFFER7_ARB 0x882C // NOLINT
#define GL_DRAW_BUFFER8_ARB 0x882D // NOLINT
#define GL_DRAW_BUFFER9_ARB 0x882E // NOLINT
#define GL_DRAW_BUFFER10_ARB 0x882F // NOLINT
#define GL_DRAW_BUFFER11_ARB 0x8830 // NOLINT
#define GL_DRAW_BUFFER12_ARB 0x8831 // NOLINT
#define GL_DRAW_BUFFER13_ARB 0x8832 // NOLINT
#define GL_DRAW_BUFFER14_ARB 0x8833 // NOLINT
#define GL_DRAW_BUFFER15_ARB 0x8834 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDrawBuffersARBType )( GLsizei n, const GLenum *bufs );
#define glDrawBuffersARB g_nngllDrawBuffersARB
NN_GLL_API glDrawBuffersARBType g_nngllDrawBuffersARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_draw_buffers();
#endif // GL_ARB_draw_buffers

#if !defined(GL_ARB_draw_buffers_blend)
#define GL_ARB_draw_buffers_blend

typedef void ( NN_GLL_GL_APIENTRY *glBlendEquationiARBType )( GLuint buf, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glBlendEquationSeparateiARBType )( GLuint buf, GLenum modeRGB, GLenum modeAlpha );
typedef void ( NN_GLL_GL_APIENTRY *glBlendFunciARBType )( GLuint buf, GLenum src, GLenum dst );
typedef void ( NN_GLL_GL_APIENTRY *glBlendFuncSeparateiARBType )( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha );
#define glBlendEquationiARB g_nngllBlendEquationiARB
#define glBlendEquationSeparateiARB g_nngllBlendEquationSeparateiARB
#define glBlendFunciARB g_nngllBlendFunciARB
#define glBlendFuncSeparateiARB g_nngllBlendFuncSeparateiARB
NN_GLL_API glBlendEquationiARBType g_nngllBlendEquationiARB;
NN_GLL_API glBlendEquationSeparateiARBType g_nngllBlendEquationSeparateiARB;
NN_GLL_API glBlendFunciARBType g_nngllBlendFunciARB;
NN_GLL_API glBlendFuncSeparateiARBType g_nngllBlendFuncSeparateiARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_draw_buffers_blend();
#endif // GL_ARB_draw_buffers_blend

#if !defined(GL_ARB_draw_elements_base_vertex)
#define GL_ARB_draw_elements_base_vertex

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_draw_elements_base_vertex();
#endif // GL_ARB_draw_elements_base_vertex

#if !defined(GL_ARB_draw_indirect)
#define GL_ARB_draw_indirect

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_draw_indirect();
#endif // GL_ARB_draw_indirect

#if !defined(GL_ARB_draw_instanced)
#define GL_ARB_draw_instanced

typedef void ( NN_GLL_GL_APIENTRY *glDrawArraysInstancedARBType )( GLenum mode, GLint first, GLsizei count, GLsizei primcount );
typedef void ( NN_GLL_GL_APIENTRY *glDrawElementsInstancedARBType )( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount );
#define glDrawArraysInstancedARB g_nngllDrawArraysInstancedARB
#define glDrawElementsInstancedARB g_nngllDrawElementsInstancedARB
NN_GLL_API glDrawArraysInstancedARBType g_nngllDrawArraysInstancedARB;
NN_GLL_API glDrawElementsInstancedARBType g_nngllDrawElementsInstancedARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_draw_instanced();
#endif // GL_ARB_draw_instanced

#if !defined(GL_ARB_enhanced_layouts)
#define GL_ARB_enhanced_layouts

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_enhanced_layouts();
#endif // GL_ARB_enhanced_layouts

#if !defined(GL_ARB_explicit_attrib_location)
#define GL_ARB_explicit_attrib_location

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_explicit_attrib_location();
#endif // GL_ARB_explicit_attrib_location

#if !defined(GL_ARB_explicit_uniform_location)
#define GL_ARB_explicit_uniform_location

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_explicit_uniform_location();
#endif // GL_ARB_explicit_uniform_location

#if !defined(GL_ARB_fragment_coord_conventions)
#define GL_ARB_fragment_coord_conventions

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_fragment_coord_conventions();
#endif // GL_ARB_fragment_coord_conventions

#if !defined(GL_ARB_fragment_layer_viewport)
#define GL_ARB_fragment_layer_viewport

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_fragment_layer_viewport();
#endif // GL_ARB_fragment_layer_viewport

#if !defined(GL_ARB_fragment_program)
#define GL_ARB_fragment_program

#define GL_FRAGMENT_PROGRAM_ARB 0x8804 // NOLINT
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875 // NOLINT
#define GL_PROGRAM_LENGTH_ARB 0x8627 // NOLINT
#define GL_PROGRAM_FORMAT_ARB 0x8876 // NOLINT
// NOT an alias. Accidental reuse of GL_MAP2_VERTEX_ATTRIB7_4_NV
#define GL_PROGRAM_BINDING_ARB 0x8677 // NOLINT
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0 // NOLINT
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1 // NOLINT
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2 // NOLINT
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3 // NOLINT
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4 // NOLINT
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5 // NOLINT
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6 // NOLINT
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7 // NOLINT
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8 // NOLINT
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9 // NOLINT
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA // NOLINT
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB // NOLINT
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC // NOLINT
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD // NOLINT
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE // NOLINT
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF // NOLINT
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4 // NOLINT
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5 // NOLINT
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6 // NOLINT
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805 // NOLINT
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806 // NOLINT
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807 // NOLINT
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808 // NOLINT
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809 // NOLINT
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A // NOLINT
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B // NOLINT
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C // NOLINT
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D // NOLINT
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E // NOLINT
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F // NOLINT
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810 // NOLINT
#define GL_PROGRAM_STRING_ARB 0x8628 // NOLINT
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B // NOLINT
#define GL_CURRENT_MATRIX_ARB 0x8641 // NOLINT
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7 // NOLINT
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640 // NOLINT
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F // NOLINT
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E // NOLINT
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871 // NOLINT
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872 // NOLINT
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874 // NOLINT
#define GL_MATRIX0_ARB 0x88C0 // NOLINT
#define GL_MATRIX1_ARB 0x88C1 // NOLINT
#define GL_MATRIX2_ARB 0x88C2 // NOLINT
#define GL_MATRIX3_ARB 0x88C3 // NOLINT
#define GL_MATRIX4_ARB 0x88C4 // NOLINT
#define GL_MATRIX5_ARB 0x88C5 // NOLINT
#define GL_MATRIX6_ARB 0x88C6 // NOLINT
#define GL_MATRIX7_ARB 0x88C7 // NOLINT
#define GL_MATRIX8_ARB 0x88C8 // NOLINT
#define GL_MATRIX9_ARB 0x88C9 // NOLINT
#define GL_MATRIX10_ARB 0x88CA // NOLINT
#define GL_MATRIX11_ARB 0x88CB // NOLINT
#define GL_MATRIX12_ARB 0x88CC // NOLINT
#define GL_MATRIX13_ARB 0x88CD // NOLINT
#define GL_MATRIX14_ARB 0x88CE // NOLINT
#define GL_MATRIX15_ARB 0x88CF // NOLINT
#define GL_MATRIX16_ARB 0x88D0 // NOLINT
#define GL_MATRIX17_ARB 0x88D1 // NOLINT
#define GL_MATRIX18_ARB 0x88D2 // NOLINT
#define GL_MATRIX19_ARB 0x88D3 // NOLINT
#define GL_MATRIX20_ARB 0x88D4 // NOLINT
#define GL_MATRIX21_ARB 0x88D5 // NOLINT
#define GL_MATRIX22_ARB 0x88D6 // NOLINT
#define GL_MATRIX23_ARB 0x88D7 // NOLINT
#define GL_MATRIX24_ARB 0x88D8 // NOLINT
#define GL_MATRIX25_ARB 0x88D9 // NOLINT
#define GL_MATRIX26_ARB 0x88DA // NOLINT
#define GL_MATRIX27_ARB 0x88DB // NOLINT
#define GL_MATRIX28_ARB 0x88DC // NOLINT
#define GL_MATRIX29_ARB 0x88DD // NOLINT
#define GL_MATRIX30_ARB 0x88DE // NOLINT
#define GL_MATRIX31_ARB 0x88DF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glProgramStringARBType )( GLenum target, GLenum format, GLsizei len, const void *string );
typedef void ( NN_GLL_GL_APIENTRY *glBindProgramARBType )( GLenum target, GLuint program );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteProgramsARBType )( GLsizei n, const GLuint *programs );
typedef void ( NN_GLL_GL_APIENTRY *glGenProgramsARBType )( GLsizei n, GLuint *programs );
typedef void ( NN_GLL_GL_APIENTRY *glProgramEnvParameter4dARBType )( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramEnvParameter4dvARBType )( GLenum target, GLuint index, const GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramEnvParameter4fARBType )( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramEnvParameter4fvARBType )( GLenum target, GLuint index, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramLocalParameter4dARBType )( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramLocalParameter4dvARBType )( GLenum target, GLuint index, const GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramLocalParameter4fARBType )( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramLocalParameter4fvARBType )( GLenum target, GLuint index, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramEnvParameterdvARBType )( GLenum target, GLuint index, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramEnvParameterfvARBType )( GLenum target, GLuint index, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramLocalParameterdvARBType )( GLenum target, GLuint index, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramLocalParameterfvARBType )( GLenum target, GLuint index, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramivARBType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramStringARBType )( GLenum target, GLenum pname, void *string );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsProgramARBType )( GLuint program );
#define glProgramStringARB g_nngllProgramStringARB
#define glBindProgramARB g_nngllBindProgramARB
#define glDeleteProgramsARB g_nngllDeleteProgramsARB
#define glGenProgramsARB g_nngllGenProgramsARB
#define glProgramEnvParameter4dARB g_nngllProgramEnvParameter4dARB
#define glProgramEnvParameter4dvARB g_nngllProgramEnvParameter4dvARB
#define glProgramEnvParameter4fARB g_nngllProgramEnvParameter4fARB
#define glProgramEnvParameter4fvARB g_nngllProgramEnvParameter4fvARB
#define glProgramLocalParameter4dARB g_nngllProgramLocalParameter4dARB
#define glProgramLocalParameter4dvARB g_nngllProgramLocalParameter4dvARB
#define glProgramLocalParameter4fARB g_nngllProgramLocalParameter4fARB
#define glProgramLocalParameter4fvARB g_nngllProgramLocalParameter4fvARB
#define glGetProgramEnvParameterdvARB g_nngllGetProgramEnvParameterdvARB
#define glGetProgramEnvParameterfvARB g_nngllGetProgramEnvParameterfvARB
#define glGetProgramLocalParameterdvARB g_nngllGetProgramLocalParameterdvARB
#define glGetProgramLocalParameterfvARB g_nngllGetProgramLocalParameterfvARB
#define glGetProgramivARB g_nngllGetProgramivARB
#define glGetProgramStringARB g_nngllGetProgramStringARB
#define glIsProgramARB g_nngllIsProgramARB
NN_GLL_API glProgramStringARBType g_nngllProgramStringARB;
NN_GLL_API glBindProgramARBType g_nngllBindProgramARB;
NN_GLL_API glDeleteProgramsARBType g_nngllDeleteProgramsARB;
NN_GLL_API glGenProgramsARBType g_nngllGenProgramsARB;
NN_GLL_API glProgramEnvParameter4dARBType g_nngllProgramEnvParameter4dARB;
NN_GLL_API glProgramEnvParameter4dvARBType g_nngllProgramEnvParameter4dvARB;
NN_GLL_API glProgramEnvParameter4fARBType g_nngllProgramEnvParameter4fARB;
NN_GLL_API glProgramEnvParameter4fvARBType g_nngllProgramEnvParameter4fvARB;
NN_GLL_API glProgramLocalParameter4dARBType g_nngllProgramLocalParameter4dARB;
NN_GLL_API glProgramLocalParameter4dvARBType g_nngllProgramLocalParameter4dvARB;
NN_GLL_API glProgramLocalParameter4fARBType g_nngllProgramLocalParameter4fARB;
NN_GLL_API glProgramLocalParameter4fvARBType g_nngllProgramLocalParameter4fvARB;
NN_GLL_API glGetProgramEnvParameterdvARBType g_nngllGetProgramEnvParameterdvARB;
NN_GLL_API glGetProgramEnvParameterfvARBType g_nngllGetProgramEnvParameterfvARB;
NN_GLL_API glGetProgramLocalParameterdvARBType g_nngllGetProgramLocalParameterdvARB;
NN_GLL_API glGetProgramLocalParameterfvARBType g_nngllGetProgramLocalParameterfvARB;
NN_GLL_API glGetProgramivARBType g_nngllGetProgramivARB;
NN_GLL_API glGetProgramStringARBType g_nngllGetProgramStringARB;
NN_GLL_API glIsProgramARBType g_nngllIsProgramARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_fragment_program();
#endif // GL_ARB_fragment_program

#if !defined(GL_ARB_fragment_program_shadow)
#define GL_ARB_fragment_program_shadow

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_fragment_program_shadow();
#endif // GL_ARB_fragment_program_shadow

#if !defined(GL_ARB_fragment_shader)
#define GL_ARB_fragment_shader

#define GL_FRAGMENT_SHADER_ARB 0x8B30 // NOLINT
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49 // NOLINT
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_fragment_shader();
#endif // GL_ARB_fragment_shader

#if !defined(GL_ARB_fragment_shader_interlock)
#define GL_ARB_fragment_shader_interlock

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_fragment_shader_interlock();
#endif // GL_ARB_fragment_shader_interlock

#if !defined(GL_ARB_framebuffer_no_attachments)
#define GL_ARB_framebuffer_no_attachments

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_framebuffer_no_attachments();
#endif // GL_ARB_framebuffer_no_attachments

#if !defined(GL_ARB_framebuffer_object)
#define GL_ARB_framebuffer_object

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_framebuffer_object();
#endif // GL_ARB_framebuffer_object

#if !defined(GL_ARB_framebuffer_sRGB)
#define GL_ARB_framebuffer_sRGB

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_framebuffer_sRGB();
#endif // GL_ARB_framebuffer_sRGB

#if !defined(GL_ARB_geometry_shader4)
#define GL_ARB_geometry_shader4

#define GL_LINES_ADJACENCY_ARB 0x000A // NOLINT
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B // NOLINT
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C // NOLINT
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D // NOLINT
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642 // NOLINT
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9 // NOLINT
#define GL_GEOMETRY_SHADER_ARB 0x8DD9 // NOLINT
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA // NOLINT
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB // NOLINT
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC // NOLINT
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD // NOLINT
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE // NOLINT
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF // NOLINT
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0 // NOLINT
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glProgramParameteriARBType )( GLuint program, GLenum pname, GLint value );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTextureARBType )( GLenum target, GLenum attachment, GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTextureLayerARBType )( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTextureFaceARBType )( GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face );
#define glProgramParameteriARB g_nngllProgramParameteriARB
#define glFramebufferTextureARB g_nngllFramebufferTextureARB
#define glFramebufferTextureLayerARB g_nngllFramebufferTextureLayerARB
#define glFramebufferTextureFaceARB g_nngllFramebufferTextureFaceARB
NN_GLL_API glProgramParameteriARBType g_nngllProgramParameteriARB;
NN_GLL_API glFramebufferTextureARBType g_nngllFramebufferTextureARB;
NN_GLL_API glFramebufferTextureLayerARBType g_nngllFramebufferTextureLayerARB;
NN_GLL_API glFramebufferTextureFaceARBType g_nngllFramebufferTextureFaceARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_geometry_shader4();
#endif // GL_ARB_geometry_shader4

#if !defined(GL_ARB_get_program_binary)
#define GL_ARB_get_program_binary

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_get_program_binary();
#endif // GL_ARB_get_program_binary

#if !defined(GL_ARB_get_texture_sub_image)
#define GL_ARB_get_texture_sub_image

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_get_texture_sub_image();
#endif // GL_ARB_get_texture_sub_image

#if !defined(GL_ARB_gl_spirv)
#define GL_ARB_gl_spirv

#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551 // NOLINT
#define GL_SPIR_V_BINARY_ARB 0x9552 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glSpecializeShaderARBType )( GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue );
#define glSpecializeShaderARB g_nngllSpecializeShaderARB
NN_GLL_API glSpecializeShaderARBType g_nngllSpecializeShaderARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_gl_spirv();
#endif // GL_ARB_gl_spirv

#if !defined(GL_ARB_gpu_shader5)
#define GL_ARB_gpu_shader5

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_gpu_shader5();
#endif // GL_ARB_gpu_shader5

#if !defined(GL_ARB_gpu_shader_fp64)
#define GL_ARB_gpu_shader_fp64

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_gpu_shader_fp64();
#endif // GL_ARB_gpu_shader_fp64

#if !defined(GL_ARB_gpu_shader_int64)
#define GL_ARB_gpu_shader_int64

#define GL_INT64_ARB 0x140E // NOLINT
#define GL_INT64_VEC2_ARB 0x8FE9 // NOLINT
#define GL_INT64_VEC3_ARB 0x8FEA // NOLINT
#define GL_INT64_VEC4_ARB 0x8FEB // NOLINT
#define GL_UNSIGNED_INT64_VEC2_ARB 0x8FF5 // NOLINT
#define GL_UNSIGNED_INT64_VEC3_ARB 0x8FF6 // NOLINT
#define GL_UNSIGNED_INT64_VEC4_ARB 0x8FF7 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glUniform1i64ARBType )( GLint location, GLint64 x );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2i64ARBType )( GLint location, GLint64 x, GLint64 y );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3i64ARBType )( GLint location, GLint64 x, GLint64 y, GLint64 z );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4i64ARBType )( GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1i64vARBType )( GLint location, GLsizei count, const GLint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2i64vARBType )( GLint location, GLsizei count, const GLint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3i64vARBType )( GLint location, GLsizei count, const GLint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4i64vARBType )( GLint location, GLsizei count, const GLint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1ui64ARBType )( GLint location, GLuint64 x );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2ui64ARBType )( GLint location, GLuint64 x, GLuint64 y );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3ui64ARBType )( GLint location, GLuint64 x, GLuint64 y, GLuint64 z );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4ui64ARBType )( GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1ui64vARBType )( GLint location, GLsizei count, const GLuint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2ui64vARBType )( GLint location, GLsizei count, const GLuint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3ui64vARBType )( GLint location, GLsizei count, const GLuint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4ui64vARBType )( GLint location, GLsizei count, const GLuint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformi64vARBType )( GLuint program, GLint location, GLint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformui64vARBType )( GLuint program, GLint location, GLuint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformi64vARBType )( GLuint program, GLint location, GLsizei bufSize, GLint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformui64vARBType )( GLuint program, GLint location, GLsizei bufSize, GLuint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1i64ARBType )( GLuint program, GLint location, GLint64 x );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2i64ARBType )( GLuint program, GLint location, GLint64 x, GLint64 y );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3i64ARBType )( GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4i64ARBType )( GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1i64vARBType )( GLuint program, GLint location, GLsizei count, const GLint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2i64vARBType )( GLuint program, GLint location, GLsizei count, const GLint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3i64vARBType )( GLuint program, GLint location, GLsizei count, const GLint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4i64vARBType )( GLuint program, GLint location, GLsizei count, const GLint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1ui64ARBType )( GLuint program, GLint location, GLuint64 x );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2ui64ARBType )( GLuint program, GLint location, GLuint64 x, GLuint64 y );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3ui64ARBType )( GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4ui64ARBType )( GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1ui64vARBType )( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2ui64vARBType )( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3ui64vARBType )( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4ui64vARBType )( GLuint program, GLint location, GLsizei count, const GLuint64 *value );
#define glUniform1i64ARB g_nngllUniform1i64ARB
#define glUniform2i64ARB g_nngllUniform2i64ARB
#define glUniform3i64ARB g_nngllUniform3i64ARB
#define glUniform4i64ARB g_nngllUniform4i64ARB
#define glUniform1i64vARB g_nngllUniform1i64vARB
#define glUniform2i64vARB g_nngllUniform2i64vARB
#define glUniform3i64vARB g_nngllUniform3i64vARB
#define glUniform4i64vARB g_nngllUniform4i64vARB
#define glUniform1ui64ARB g_nngllUniform1ui64ARB
#define glUniform2ui64ARB g_nngllUniform2ui64ARB
#define glUniform3ui64ARB g_nngllUniform3ui64ARB
#define glUniform4ui64ARB g_nngllUniform4ui64ARB
#define glUniform1ui64vARB g_nngllUniform1ui64vARB
#define glUniform2ui64vARB g_nngllUniform2ui64vARB
#define glUniform3ui64vARB g_nngllUniform3ui64vARB
#define glUniform4ui64vARB g_nngllUniform4ui64vARB
#define glGetUniformi64vARB g_nngllGetUniformi64vARB
#define glGetUniformui64vARB g_nngllGetUniformui64vARB
#define glGetnUniformi64vARB g_nngllGetnUniformi64vARB
#define glGetnUniformui64vARB g_nngllGetnUniformui64vARB
#define glProgramUniform1i64ARB g_nngllProgramUniform1i64ARB
#define glProgramUniform2i64ARB g_nngllProgramUniform2i64ARB
#define glProgramUniform3i64ARB g_nngllProgramUniform3i64ARB
#define glProgramUniform4i64ARB g_nngllProgramUniform4i64ARB
#define glProgramUniform1i64vARB g_nngllProgramUniform1i64vARB
#define glProgramUniform2i64vARB g_nngllProgramUniform2i64vARB
#define glProgramUniform3i64vARB g_nngllProgramUniform3i64vARB
#define glProgramUniform4i64vARB g_nngllProgramUniform4i64vARB
#define glProgramUniform1ui64ARB g_nngllProgramUniform1ui64ARB
#define glProgramUniform2ui64ARB g_nngllProgramUniform2ui64ARB
#define glProgramUniform3ui64ARB g_nngllProgramUniform3ui64ARB
#define glProgramUniform4ui64ARB g_nngllProgramUniform4ui64ARB
#define glProgramUniform1ui64vARB g_nngllProgramUniform1ui64vARB
#define glProgramUniform2ui64vARB g_nngllProgramUniform2ui64vARB
#define glProgramUniform3ui64vARB g_nngllProgramUniform3ui64vARB
#define glProgramUniform4ui64vARB g_nngllProgramUniform4ui64vARB
NN_GLL_API glUniform1i64ARBType g_nngllUniform1i64ARB;
NN_GLL_API glUniform2i64ARBType g_nngllUniform2i64ARB;
NN_GLL_API glUniform3i64ARBType g_nngllUniform3i64ARB;
NN_GLL_API glUniform4i64ARBType g_nngllUniform4i64ARB;
NN_GLL_API glUniform1i64vARBType g_nngllUniform1i64vARB;
NN_GLL_API glUniform2i64vARBType g_nngllUniform2i64vARB;
NN_GLL_API glUniform3i64vARBType g_nngllUniform3i64vARB;
NN_GLL_API glUniform4i64vARBType g_nngllUniform4i64vARB;
NN_GLL_API glUniform1ui64ARBType g_nngllUniform1ui64ARB;
NN_GLL_API glUniform2ui64ARBType g_nngllUniform2ui64ARB;
NN_GLL_API glUniform3ui64ARBType g_nngllUniform3ui64ARB;
NN_GLL_API glUniform4ui64ARBType g_nngllUniform4ui64ARB;
NN_GLL_API glUniform1ui64vARBType g_nngllUniform1ui64vARB;
NN_GLL_API glUniform2ui64vARBType g_nngllUniform2ui64vARB;
NN_GLL_API glUniform3ui64vARBType g_nngllUniform3ui64vARB;
NN_GLL_API glUniform4ui64vARBType g_nngllUniform4ui64vARB;
NN_GLL_API glGetUniformi64vARBType g_nngllGetUniformi64vARB;
NN_GLL_API glGetUniformui64vARBType g_nngllGetUniformui64vARB;
NN_GLL_API glGetnUniformi64vARBType g_nngllGetnUniformi64vARB;
NN_GLL_API glGetnUniformui64vARBType g_nngllGetnUniformui64vARB;
NN_GLL_API glProgramUniform1i64ARBType g_nngllProgramUniform1i64ARB;
NN_GLL_API glProgramUniform2i64ARBType g_nngllProgramUniform2i64ARB;
NN_GLL_API glProgramUniform3i64ARBType g_nngllProgramUniform3i64ARB;
NN_GLL_API glProgramUniform4i64ARBType g_nngllProgramUniform4i64ARB;
NN_GLL_API glProgramUniform1i64vARBType g_nngllProgramUniform1i64vARB;
NN_GLL_API glProgramUniform2i64vARBType g_nngllProgramUniform2i64vARB;
NN_GLL_API glProgramUniform3i64vARBType g_nngllProgramUniform3i64vARB;
NN_GLL_API glProgramUniform4i64vARBType g_nngllProgramUniform4i64vARB;
NN_GLL_API glProgramUniform1ui64ARBType g_nngllProgramUniform1ui64ARB;
NN_GLL_API glProgramUniform2ui64ARBType g_nngllProgramUniform2ui64ARB;
NN_GLL_API glProgramUniform3ui64ARBType g_nngllProgramUniform3ui64ARB;
NN_GLL_API glProgramUniform4ui64ARBType g_nngllProgramUniform4ui64ARB;
NN_GLL_API glProgramUniform1ui64vARBType g_nngllProgramUniform1ui64vARB;
NN_GLL_API glProgramUniform2ui64vARBType g_nngllProgramUniform2ui64vARB;
NN_GLL_API glProgramUniform3ui64vARBType g_nngllProgramUniform3ui64vARB;
NN_GLL_API glProgramUniform4ui64vARBType g_nngllProgramUniform4ui64vARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_gpu_shader_int64();
#endif // GL_ARB_gpu_shader_int64

#if !defined(GL_ARB_half_float_pixel)
#define GL_ARB_half_float_pixel

typedef unsigned short GLhalfARB;
#define GL_HALF_FLOAT_ARB 0x140B // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_half_float_pixel();
#endif // GL_ARB_half_float_pixel

#if !defined(GL_ARB_half_float_vertex)
#define GL_ARB_half_float_vertex

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_half_float_vertex();
#endif // GL_ARB_half_float_vertex
// Now treating ARB_imaging as an extension, not a GL API version

#if !defined(GL_ARB_imaging)
#define GL_ARB_imaging

#define GL_CONVOLUTION_1D 0x8010 // NOLINT
#define GL_CONVOLUTION_2D 0x8011 // NOLINT
#define GL_SEPARABLE_2D 0x8012 // NOLINT
#define GL_CONVOLUTION_BORDER_MODE 0x8013 // NOLINT
#define GL_CONVOLUTION_FILTER_SCALE 0x8014 // NOLINT
#define GL_CONVOLUTION_FILTER_BIAS 0x8015 // NOLINT
#define GL_REDUCE 0x8016 // NOLINT
#define GL_CONVOLUTION_FORMAT 0x8017 // NOLINT
#define GL_CONVOLUTION_WIDTH 0x8018 // NOLINT
#define GL_CONVOLUTION_HEIGHT 0x8019 // NOLINT
#define GL_MAX_CONVOLUTION_WIDTH 0x801A // NOLINT
#define GL_MAX_CONVOLUTION_HEIGHT 0x801B // NOLINT
#define GL_POST_CONVOLUTION_RED_SCALE 0x801C // NOLINT
#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D // NOLINT
#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E // NOLINT
#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F // NOLINT
#define GL_POST_CONVOLUTION_RED_BIAS 0x8020 // NOLINT
#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021 // NOLINT
#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022 // NOLINT
#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023 // NOLINT
#define GL_HISTOGRAM 0x8024 // NOLINT
#define GL_PROXY_HISTOGRAM 0x8025 // NOLINT
#define GL_HISTOGRAM_WIDTH 0x8026 // NOLINT
#define GL_HISTOGRAM_FORMAT 0x8027 // NOLINT
#define GL_HISTOGRAM_RED_SIZE 0x8028 // NOLINT
#define GL_HISTOGRAM_GREEN_SIZE 0x8029 // NOLINT
#define GL_HISTOGRAM_BLUE_SIZE 0x802A // NOLINT
#define GL_HISTOGRAM_ALPHA_SIZE 0x802B // NOLINT
#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C // NOLINT
#define GL_HISTOGRAM_SINK 0x802D // NOLINT
#define GL_MINMAX 0x802E // NOLINT
#define GL_MINMAX_FORMAT 0x802F // NOLINT
#define GL_MINMAX_SINK 0x8030 // NOLINT
#define GL_TABLE_TOO_LARGE 0x8031 // NOLINT
#define GL_COLOR_MATRIX 0x80B1 // NOLINT
#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2 // NOLINT
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3 // NOLINT
#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4 // NOLINT
#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5 // NOLINT
#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6 // NOLINT
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7 // NOLINT
#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8 // NOLINT
#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9 // NOLINT
#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA // NOLINT
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB // NOLINT
#define GL_COLOR_TABLE 0x80D0 // NOLINT
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1 // NOLINT
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2 // NOLINT
#define GL_PROXY_COLOR_TABLE 0x80D3 // NOLINT
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4 // NOLINT
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5 // NOLINT
#define GL_COLOR_TABLE_SCALE 0x80D6 // NOLINT
#define GL_COLOR_TABLE_BIAS 0x80D7 // NOLINT
#define GL_COLOR_TABLE_FORMAT 0x80D8 // NOLINT
#define GL_COLOR_TABLE_WIDTH 0x80D9 // NOLINT
#define GL_COLOR_TABLE_RED_SIZE 0x80DA // NOLINT
#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB // NOLINT
#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC // NOLINT
#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD // NOLINT
#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE // NOLINT
#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF // NOLINT
#define GL_CONSTANT_BORDER 0x8151 // NOLINT
#define GL_REPLICATE_BORDER 0x8153 // NOLINT
#define GL_CONVOLUTION_BORDER_COLOR 0x8154 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glColorTableType )( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table );
typedef void ( NN_GLL_GL_APIENTRY *glColorTableParameterfvType )( GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glColorTableParameterivType )( GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glCopyColorTableType )( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glGetColorTableType )( GLenum target, GLenum format, GLenum type, void *table );
typedef void ( NN_GLL_GL_APIENTRY *glGetColorTableParameterfvType )( GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetColorTableParameterivType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glColorSubTableType )( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCopyColorSubTableType )( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionFilter1DType )( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionFilter2DType )( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionParameterfType )( GLenum target, GLenum pname, GLfloat params );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionParameterfvType )( GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionParameteriType )( GLenum target, GLenum pname, GLint params );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionParameterivType )( GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glCopyConvolutionFilter1DType )( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glCopyConvolutionFilter2DType )( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glGetConvolutionFilterType )( GLenum target, GLenum format, GLenum type, void *image );
typedef void ( NN_GLL_GL_APIENTRY *glGetConvolutionParameterfvType )( GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetConvolutionParameterivType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetSeparableFilterType )( GLenum target, GLenum format, GLenum type, void *row, void *column, void *span );
typedef void ( NN_GLL_GL_APIENTRY *glSeparableFilter2DType )( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column );
typedef void ( NN_GLL_GL_APIENTRY *glGetHistogramType )( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetHistogramParameterfvType )( GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetHistogramParameterivType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMinmaxType )( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetMinmaxParameterfvType )( GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMinmaxParameterivType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glHistogramType )( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
typedef void ( NN_GLL_GL_APIENTRY *glMinmaxType )( GLenum target, GLenum internalformat, GLboolean sink );
typedef void ( NN_GLL_GL_APIENTRY *glResetHistogramType )( GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glResetMinmaxType )( GLenum target );
#define glColorTable g_nngllColorTable
#define glColorTableParameterfv g_nngllColorTableParameterfv
#define glColorTableParameteriv g_nngllColorTableParameteriv
#define glCopyColorTable g_nngllCopyColorTable
#define glGetColorTable g_nngllGetColorTable
#define glGetColorTableParameterfv g_nngllGetColorTableParameterfv
#define glGetColorTableParameteriv g_nngllGetColorTableParameteriv
#define glColorSubTable g_nngllColorSubTable
#define glCopyColorSubTable g_nngllCopyColorSubTable
#define glConvolutionFilter1D g_nngllConvolutionFilter1D
#define glConvolutionFilter2D g_nngllConvolutionFilter2D
#define glConvolutionParameterf g_nngllConvolutionParameterf
#define glConvolutionParameterfv g_nngllConvolutionParameterfv
#define glConvolutionParameteri g_nngllConvolutionParameteri
#define glConvolutionParameteriv g_nngllConvolutionParameteriv
#define glCopyConvolutionFilter1D g_nngllCopyConvolutionFilter1D
#define glCopyConvolutionFilter2D g_nngllCopyConvolutionFilter2D
#define glGetConvolutionFilter g_nngllGetConvolutionFilter
#define glGetConvolutionParameterfv g_nngllGetConvolutionParameterfv
#define glGetConvolutionParameteriv g_nngllGetConvolutionParameteriv
#define glGetSeparableFilter g_nngllGetSeparableFilter
#define glSeparableFilter2D g_nngllSeparableFilter2D
#define glGetHistogram g_nngllGetHistogram
#define glGetHistogramParameterfv g_nngllGetHistogramParameterfv
#define glGetHistogramParameteriv g_nngllGetHistogramParameteriv
#define glGetMinmax g_nngllGetMinmax
#define glGetMinmaxParameterfv g_nngllGetMinmaxParameterfv
#define glGetMinmaxParameteriv g_nngllGetMinmaxParameteriv
#define glHistogram g_nngllHistogram
#define glMinmax g_nngllMinmax
#define glResetHistogram g_nngllResetHistogram
#define glResetMinmax g_nngllResetMinmax
NN_GLL_API glColorTableType g_nngllColorTable;
NN_GLL_API glColorTableParameterfvType g_nngllColorTableParameterfv;
NN_GLL_API glColorTableParameterivType g_nngllColorTableParameteriv;
NN_GLL_API glCopyColorTableType g_nngllCopyColorTable;
NN_GLL_API glGetColorTableType g_nngllGetColorTable;
NN_GLL_API glGetColorTableParameterfvType g_nngllGetColorTableParameterfv;
NN_GLL_API glGetColorTableParameterivType g_nngllGetColorTableParameteriv;
NN_GLL_API glColorSubTableType g_nngllColorSubTable;
NN_GLL_API glCopyColorSubTableType g_nngllCopyColorSubTable;
NN_GLL_API glConvolutionFilter1DType g_nngllConvolutionFilter1D;
NN_GLL_API glConvolutionFilter2DType g_nngllConvolutionFilter2D;
NN_GLL_API glConvolutionParameterfType g_nngllConvolutionParameterf;
NN_GLL_API glConvolutionParameterfvType g_nngllConvolutionParameterfv;
NN_GLL_API glConvolutionParameteriType g_nngllConvolutionParameteri;
NN_GLL_API glConvolutionParameterivType g_nngllConvolutionParameteriv;
NN_GLL_API glCopyConvolutionFilter1DType g_nngllCopyConvolutionFilter1D;
NN_GLL_API glCopyConvolutionFilter2DType g_nngllCopyConvolutionFilter2D;
NN_GLL_API glGetConvolutionFilterType g_nngllGetConvolutionFilter;
NN_GLL_API glGetConvolutionParameterfvType g_nngllGetConvolutionParameterfv;
NN_GLL_API glGetConvolutionParameterivType g_nngllGetConvolutionParameteriv;
NN_GLL_API glGetSeparableFilterType g_nngllGetSeparableFilter;
NN_GLL_API glSeparableFilter2DType g_nngllSeparableFilter2D;
NN_GLL_API glGetHistogramType g_nngllGetHistogram;
NN_GLL_API glGetHistogramParameterfvType g_nngllGetHistogramParameterfv;
NN_GLL_API glGetHistogramParameterivType g_nngllGetHistogramParameteriv;
NN_GLL_API glGetMinmaxType g_nngllGetMinmax;
NN_GLL_API glGetMinmaxParameterfvType g_nngllGetMinmaxParameterfv;
NN_GLL_API glGetMinmaxParameterivType g_nngllGetMinmaxParameteriv;
NN_GLL_API glHistogramType g_nngllHistogram;
NN_GLL_API glMinmaxType g_nngllMinmax;
NN_GLL_API glResetHistogramType g_nngllResetHistogram;
NN_GLL_API glResetMinmaxType g_nngllResetMinmax;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_imaging();
#endif // GL_ARB_imaging

#if !defined(GL_ARB_indirect_parameters)
#define GL_ARB_indirect_parameters

#define GL_PARAMETER_BUFFER_ARB 0x80EE // NOLINT
#define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawArraysIndirectCountARBType )( GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawElementsIndirectCountARBType )( GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride );
#define glMultiDrawArraysIndirectCountARB g_nngllMultiDrawArraysIndirectCountARB
#define glMultiDrawElementsIndirectCountARB g_nngllMultiDrawElementsIndirectCountARB
NN_GLL_API glMultiDrawArraysIndirectCountARBType g_nngllMultiDrawArraysIndirectCountARB;
NN_GLL_API glMultiDrawElementsIndirectCountARBType g_nngllMultiDrawElementsIndirectCountARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_indirect_parameters();
#endif // GL_ARB_indirect_parameters

#if !defined(GL_ARB_instanced_arrays)
#define GL_ARB_instanced_arrays

#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribDivisorARBType )( GLuint index, GLuint divisor );
#define glVertexAttribDivisorARB g_nngllVertexAttribDivisorARB
NN_GLL_API glVertexAttribDivisorARBType g_nngllVertexAttribDivisorARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_instanced_arrays();
#endif // GL_ARB_instanced_arrays

#if !defined(GL_ARB_internalformat_query)
#define GL_ARB_internalformat_query

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_internalformat_query();
#endif // GL_ARB_internalformat_query

#if !defined(GL_ARB_internalformat_query2)
#define GL_ARB_internalformat_query2

#define GL_SRGB_DECODE_ARB 0x8299 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_internalformat_query2();
#endif // GL_ARB_internalformat_query2

#if !defined(GL_ARB_invalidate_subdata)
#define GL_ARB_invalidate_subdata

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_invalidate_subdata();
#endif // GL_ARB_invalidate_subdata

#if !defined(GL_ARB_map_buffer_alignment)
#define GL_ARB_map_buffer_alignment

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_map_buffer_alignment();
#endif // GL_ARB_map_buffer_alignment

#if !defined(GL_ARB_map_buffer_range)
#define GL_ARB_map_buffer_range

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_map_buffer_range();
#endif // GL_ARB_map_buffer_range

#if !defined(GL_ARB_matrix_palette)
#define GL_ARB_matrix_palette

#define GL_MATRIX_PALETTE_ARB 0x8840 // NOLINT
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841 // NOLINT
#define GL_MAX_PALETTE_MATRICES_ARB 0x8842 // NOLINT
#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843 // NOLINT
#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844 // NOLINT
#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845 // NOLINT
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846 // NOLINT
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847 // NOLINT
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848 // NOLINT
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glCurrentPaletteMatrixARBType )( GLint index );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixIndexubvARBType )( GLint size, const GLubyte *indices );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixIndexusvARBType )( GLint size, const GLushort *indices );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixIndexuivARBType )( GLint size, const GLuint *indices );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixIndexPointerARBType )( GLint size, GLenum type, GLsizei stride, const void *pointer );
#define glCurrentPaletteMatrixARB g_nngllCurrentPaletteMatrixARB
#define glMatrixIndexubvARB g_nngllMatrixIndexubvARB
#define glMatrixIndexusvARB g_nngllMatrixIndexusvARB
#define glMatrixIndexuivARB g_nngllMatrixIndexuivARB
#define glMatrixIndexPointerARB g_nngllMatrixIndexPointerARB
NN_GLL_API glCurrentPaletteMatrixARBType g_nngllCurrentPaletteMatrixARB;
NN_GLL_API glMatrixIndexubvARBType g_nngllMatrixIndexubvARB;
NN_GLL_API glMatrixIndexusvARBType g_nngllMatrixIndexusvARB;
NN_GLL_API glMatrixIndexuivARBType g_nngllMatrixIndexuivARB;
NN_GLL_API glMatrixIndexPointerARBType g_nngllMatrixIndexPointerARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_matrix_palette();
#endif // GL_ARB_matrix_palette

#if !defined(GL_ARB_multi_bind)
#define GL_ARB_multi_bind

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_multi_bind();
#endif // GL_ARB_multi_bind

#if !defined(GL_ARB_multi_draw_indirect)
#define GL_ARB_multi_draw_indirect

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_multi_draw_indirect();
#endif // GL_ARB_multi_draw_indirect

#if !defined(GL_ARB_multisample)
#define GL_ARB_multisample

#define GL_MULTISAMPLE_ARB 0x809D // NOLINT
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E // NOLINT
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F // NOLINT
#define GL_SAMPLE_COVERAGE_ARB 0x80A0 // NOLINT
#define GL_SAMPLE_BUFFERS_ARB 0x80A8 // NOLINT
#define GL_SAMPLES_ARB 0x80A9 // NOLINT
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA // NOLINT
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB // NOLINT
#define GL_MULTISAMPLE_BIT_ARB 0x20000000 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glSampleCoverageARBType )( GLfloat value, GLboolean invert );
#define glSampleCoverageARB g_nngllSampleCoverageARB
NN_GLL_API glSampleCoverageARBType g_nngllSampleCoverageARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_multisample();
#endif // GL_ARB_multisample

#if !defined(GL_ARB_multitexture)
#define GL_ARB_multitexture

#define GL_TEXTURE0_ARB 0x84C0 // NOLINT
#define GL_TEXTURE1_ARB 0x84C1 // NOLINT
#define GL_TEXTURE2_ARB 0x84C2 // NOLINT
#define GL_TEXTURE3_ARB 0x84C3 // NOLINT
#define GL_TEXTURE4_ARB 0x84C4 // NOLINT
#define GL_TEXTURE5_ARB 0x84C5 // NOLINT
#define GL_TEXTURE6_ARB 0x84C6 // NOLINT
#define GL_TEXTURE7_ARB 0x84C7 // NOLINT
#define GL_TEXTURE8_ARB 0x84C8 // NOLINT
#define GL_TEXTURE9_ARB 0x84C9 // NOLINT
#define GL_TEXTURE10_ARB 0x84CA // NOLINT
#define GL_TEXTURE11_ARB 0x84CB // NOLINT
#define GL_TEXTURE12_ARB 0x84CC // NOLINT
#define GL_TEXTURE13_ARB 0x84CD // NOLINT
#define GL_TEXTURE14_ARB 0x84CE // NOLINT
#define GL_TEXTURE15_ARB 0x84CF // NOLINT
#define GL_TEXTURE16_ARB 0x84D0 // NOLINT
#define GL_TEXTURE17_ARB 0x84D1 // NOLINT
#define GL_TEXTURE18_ARB 0x84D2 // NOLINT
#define GL_TEXTURE19_ARB 0x84D3 // NOLINT
#define GL_TEXTURE20_ARB 0x84D4 // NOLINT
#define GL_TEXTURE21_ARB 0x84D5 // NOLINT
#define GL_TEXTURE22_ARB 0x84D6 // NOLINT
#define GL_TEXTURE23_ARB 0x84D7 // NOLINT
#define GL_TEXTURE24_ARB 0x84D8 // NOLINT
#define GL_TEXTURE25_ARB 0x84D9 // NOLINT
#define GL_TEXTURE26_ARB 0x84DA // NOLINT
#define GL_TEXTURE27_ARB 0x84DB // NOLINT
#define GL_TEXTURE28_ARB 0x84DC // NOLINT
#define GL_TEXTURE29_ARB 0x84DD // NOLINT
#define GL_TEXTURE30_ARB 0x84DE // NOLINT
#define GL_TEXTURE31_ARB 0x84DF // NOLINT
#define GL_ACTIVE_TEXTURE_ARB 0x84E0 // NOLINT
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1 // NOLINT
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glActiveTextureARBType )( GLenum texture );
typedef void ( NN_GLL_GL_APIENTRY *glClientActiveTextureARBType )( GLenum texture );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1dARBType )( GLenum target, GLdouble s );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1dvARBType )( GLenum target, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1fARBType )( GLenum target, GLfloat s );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1fvARBType )( GLenum target, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1iARBType )( GLenum target, GLint s );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1ivARBType )( GLenum target, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1sARBType )( GLenum target, GLshort s );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1svARBType )( GLenum target, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2dARBType )( GLenum target, GLdouble s, GLdouble t );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2dvARBType )( GLenum target, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2fARBType )( GLenum target, GLfloat s, GLfloat t );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2fvARBType )( GLenum target, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2iARBType )( GLenum target, GLint s, GLint t );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2ivARBType )( GLenum target, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2sARBType )( GLenum target, GLshort s, GLshort t );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2svARBType )( GLenum target, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3dARBType )( GLenum target, GLdouble s, GLdouble t, GLdouble r );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3dvARBType )( GLenum target, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3fARBType )( GLenum target, GLfloat s, GLfloat t, GLfloat r );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3fvARBType )( GLenum target, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3iARBType )( GLenum target, GLint s, GLint t, GLint r );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3ivARBType )( GLenum target, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3sARBType )( GLenum target, GLshort s, GLshort t, GLshort r );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3svARBType )( GLenum target, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4dARBType )( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4dvARBType )( GLenum target, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4fARBType )( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4fvARBType )( GLenum target, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4iARBType )( GLenum target, GLint s, GLint t, GLint r, GLint q );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4ivARBType )( GLenum target, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4sARBType )( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4svARBType )( GLenum target, const GLshort *v );
#define glActiveTextureARB g_nngllActiveTextureARB
#define glClientActiveTextureARB g_nngllClientActiveTextureARB
#define glMultiTexCoord1dARB g_nngllMultiTexCoord1dARB
#define glMultiTexCoord1dvARB g_nngllMultiTexCoord1dvARB
#define glMultiTexCoord1fARB g_nngllMultiTexCoord1fARB
#define glMultiTexCoord1fvARB g_nngllMultiTexCoord1fvARB
#define glMultiTexCoord1iARB g_nngllMultiTexCoord1iARB
#define glMultiTexCoord1ivARB g_nngllMultiTexCoord1ivARB
#define glMultiTexCoord1sARB g_nngllMultiTexCoord1sARB
#define glMultiTexCoord1svARB g_nngllMultiTexCoord1svARB
#define glMultiTexCoord2dARB g_nngllMultiTexCoord2dARB
#define glMultiTexCoord2dvARB g_nngllMultiTexCoord2dvARB
#define glMultiTexCoord2fARB g_nngllMultiTexCoord2fARB
#define glMultiTexCoord2fvARB g_nngllMultiTexCoord2fvARB
#define glMultiTexCoord2iARB g_nngllMultiTexCoord2iARB
#define glMultiTexCoord2ivARB g_nngllMultiTexCoord2ivARB
#define glMultiTexCoord2sARB g_nngllMultiTexCoord2sARB
#define glMultiTexCoord2svARB g_nngllMultiTexCoord2svARB
#define glMultiTexCoord3dARB g_nngllMultiTexCoord3dARB
#define glMultiTexCoord3dvARB g_nngllMultiTexCoord3dvARB
#define glMultiTexCoord3fARB g_nngllMultiTexCoord3fARB
#define glMultiTexCoord3fvARB g_nngllMultiTexCoord3fvARB
#define glMultiTexCoord3iARB g_nngllMultiTexCoord3iARB
#define glMultiTexCoord3ivARB g_nngllMultiTexCoord3ivARB
#define glMultiTexCoord3sARB g_nngllMultiTexCoord3sARB
#define glMultiTexCoord3svARB g_nngllMultiTexCoord3svARB
#define glMultiTexCoord4dARB g_nngllMultiTexCoord4dARB
#define glMultiTexCoord4dvARB g_nngllMultiTexCoord4dvARB
#define glMultiTexCoord4fARB g_nngllMultiTexCoord4fARB
#define glMultiTexCoord4fvARB g_nngllMultiTexCoord4fvARB
#define glMultiTexCoord4iARB g_nngllMultiTexCoord4iARB
#define glMultiTexCoord4ivARB g_nngllMultiTexCoord4ivARB
#define glMultiTexCoord4sARB g_nngllMultiTexCoord4sARB
#define glMultiTexCoord4svARB g_nngllMultiTexCoord4svARB
NN_GLL_API glActiveTextureARBType g_nngllActiveTextureARB;
NN_GLL_API glClientActiveTextureARBType g_nngllClientActiveTextureARB;
NN_GLL_API glMultiTexCoord1dARBType g_nngllMultiTexCoord1dARB;
NN_GLL_API glMultiTexCoord1dvARBType g_nngllMultiTexCoord1dvARB;
NN_GLL_API glMultiTexCoord1fARBType g_nngllMultiTexCoord1fARB;
NN_GLL_API glMultiTexCoord1fvARBType g_nngllMultiTexCoord1fvARB;
NN_GLL_API glMultiTexCoord1iARBType g_nngllMultiTexCoord1iARB;
NN_GLL_API glMultiTexCoord1ivARBType g_nngllMultiTexCoord1ivARB;
NN_GLL_API glMultiTexCoord1sARBType g_nngllMultiTexCoord1sARB;
NN_GLL_API glMultiTexCoord1svARBType g_nngllMultiTexCoord1svARB;
NN_GLL_API glMultiTexCoord2dARBType g_nngllMultiTexCoord2dARB;
NN_GLL_API glMultiTexCoord2dvARBType g_nngllMultiTexCoord2dvARB;
NN_GLL_API glMultiTexCoord2fARBType g_nngllMultiTexCoord2fARB;
NN_GLL_API glMultiTexCoord2fvARBType g_nngllMultiTexCoord2fvARB;
NN_GLL_API glMultiTexCoord2iARBType g_nngllMultiTexCoord2iARB;
NN_GLL_API glMultiTexCoord2ivARBType g_nngllMultiTexCoord2ivARB;
NN_GLL_API glMultiTexCoord2sARBType g_nngllMultiTexCoord2sARB;
NN_GLL_API glMultiTexCoord2svARBType g_nngllMultiTexCoord2svARB;
NN_GLL_API glMultiTexCoord3dARBType g_nngllMultiTexCoord3dARB;
NN_GLL_API glMultiTexCoord3dvARBType g_nngllMultiTexCoord3dvARB;
NN_GLL_API glMultiTexCoord3fARBType g_nngllMultiTexCoord3fARB;
NN_GLL_API glMultiTexCoord3fvARBType g_nngllMultiTexCoord3fvARB;
NN_GLL_API glMultiTexCoord3iARBType g_nngllMultiTexCoord3iARB;
NN_GLL_API glMultiTexCoord3ivARBType g_nngllMultiTexCoord3ivARB;
NN_GLL_API glMultiTexCoord3sARBType g_nngllMultiTexCoord3sARB;
NN_GLL_API glMultiTexCoord3svARBType g_nngllMultiTexCoord3svARB;
NN_GLL_API glMultiTexCoord4dARBType g_nngllMultiTexCoord4dARB;
NN_GLL_API glMultiTexCoord4dvARBType g_nngllMultiTexCoord4dvARB;
NN_GLL_API glMultiTexCoord4fARBType g_nngllMultiTexCoord4fARB;
NN_GLL_API glMultiTexCoord4fvARBType g_nngllMultiTexCoord4fvARB;
NN_GLL_API glMultiTexCoord4iARBType g_nngllMultiTexCoord4iARB;
NN_GLL_API glMultiTexCoord4ivARBType g_nngllMultiTexCoord4ivARB;
NN_GLL_API glMultiTexCoord4sARBType g_nngllMultiTexCoord4sARB;
NN_GLL_API glMultiTexCoord4svARBType g_nngllMultiTexCoord4svARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_multitexture();
#endif // GL_ARB_multitexture

#if !defined(GL_ARB_occlusion_query)
#define GL_ARB_occlusion_query

#define GL_QUERY_COUNTER_BITS_ARB 0x8864 // NOLINT
#define GL_CURRENT_QUERY_ARB 0x8865 // NOLINT
#define GL_QUERY_RESULT_ARB 0x8866 // NOLINT
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867 // NOLINT
#define GL_SAMPLES_PASSED_ARB 0x8914 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGenQueriesARBType )( GLsizei n, GLuint *ids );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteQueriesARBType )( GLsizei n, const GLuint *ids );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsQueryARBType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glBeginQueryARBType )( GLenum target, GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glEndQueryARBType )( GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryivARBType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryObjectivARBType )( GLuint id, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryObjectuivARBType )( GLuint id, GLenum pname, GLuint *params );
#define glGenQueriesARB g_nngllGenQueriesARB
#define glDeleteQueriesARB g_nngllDeleteQueriesARB
#define glIsQueryARB g_nngllIsQueryARB
#define glBeginQueryARB g_nngllBeginQueryARB
#define glEndQueryARB g_nngllEndQueryARB
#define glGetQueryivARB g_nngllGetQueryivARB
#define glGetQueryObjectivARB g_nngllGetQueryObjectivARB
#define glGetQueryObjectuivARB g_nngllGetQueryObjectuivARB
NN_GLL_API glGenQueriesARBType g_nngllGenQueriesARB;
NN_GLL_API glDeleteQueriesARBType g_nngllDeleteQueriesARB;
NN_GLL_API glIsQueryARBType g_nngllIsQueryARB;
NN_GLL_API glBeginQueryARBType g_nngllBeginQueryARB;
NN_GLL_API glEndQueryARBType g_nngllEndQueryARB;
NN_GLL_API glGetQueryivARBType g_nngllGetQueryivARB;
NN_GLL_API glGetQueryObjectivARBType g_nngllGetQueryObjectivARB;
NN_GLL_API glGetQueryObjectuivARBType g_nngllGetQueryObjectuivARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_occlusion_query();
#endif // GL_ARB_occlusion_query

#if !defined(GL_ARB_occlusion_query2)
#define GL_ARB_occlusion_query2

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_occlusion_query2();
#endif // GL_ARB_occlusion_query2

#if !defined(GL_ARB_parallel_shader_compile)
#define GL_ARB_parallel_shader_compile

#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0 // NOLINT
#define GL_COMPLETION_STATUS_ARB 0x91B1 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glMaxShaderCompilerThreadsARBType )( GLuint count );
#define glMaxShaderCompilerThreadsARB g_nngllMaxShaderCompilerThreadsARB
NN_GLL_API glMaxShaderCompilerThreadsARBType g_nngllMaxShaderCompilerThreadsARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_parallel_shader_compile();
#endif // GL_ARB_parallel_shader_compile

#if !defined(GL_ARB_pipeline_statistics_query)
#define GL_ARB_pipeline_statistics_query

#define GL_VERTICES_SUBMITTED_ARB 0x82EE // NOLINT
#define GL_PRIMITIVES_SUBMITTED_ARB 0x82EF // NOLINT
#define GL_VERTEX_SHADER_INVOCATIONS_ARB 0x82F0 // NOLINT
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1 // NOLINT
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2 // NOLINT
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3 // NOLINT
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4 // NOLINT
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5 // NOLINT
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0x82F6 // NOLINT
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_pipeline_statistics_query();
#endif // GL_ARB_pipeline_statistics_query

#if !defined(GL_ARB_pixel_buffer_object)
#define GL_ARB_pixel_buffer_object

#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB // NOLINT
#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC // NOLINT
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED // NOLINT
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_pixel_buffer_object();
#endif // GL_ARB_pixel_buffer_object

#if !defined(GL_ARB_point_parameters)
#define GL_ARB_point_parameters

#define GL_POINT_SIZE_MIN_ARB 0x8126 // NOLINT
#define GL_POINT_SIZE_MAX_ARB 0x8127 // NOLINT
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128 // NOLINT
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterfARBType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterfvARBType )( GLenum pname, const GLfloat *params );
#define glPointParameterfARB g_nngllPointParameterfARB
#define glPointParameterfvARB g_nngllPointParameterfvARB
NN_GLL_API glPointParameterfARBType g_nngllPointParameterfARB;
NN_GLL_API glPointParameterfvARBType g_nngllPointParameterfvARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_point_parameters();
#endif // GL_ARB_point_parameters

#if !defined(GL_ARB_point_sprite)
#define GL_ARB_point_sprite

#define GL_POINT_SPRITE_ARB 0x8861 // NOLINT
#define GL_COORD_REPLACE_ARB 0x8862 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_point_sprite();
#endif // GL_ARB_point_sprite

#if !defined(GL_ARB_polygon_offset_clamp)
#define GL_ARB_polygon_offset_clamp

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_polygon_offset_clamp();
#endif // GL_ARB_polygon_offset_clamp

#if !defined(GL_ARB_post_depth_coverage)
#define GL_ARB_post_depth_coverage

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_post_depth_coverage();
#endif // GL_ARB_post_depth_coverage

#if !defined(GL_ARB_program_interface_query)
#define GL_ARB_program_interface_query

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_program_interface_query();
#endif // GL_ARB_program_interface_query

#if !defined(GL_ARB_provoking_vertex)
#define GL_ARB_provoking_vertex

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_provoking_vertex();
#endif // GL_ARB_provoking_vertex

#if !defined(GL_ARB_query_buffer_object)
#define GL_ARB_query_buffer_object

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_query_buffer_object();
#endif // GL_ARB_query_buffer_object

#if !defined(GL_ARB_robust_buffer_access_behavior)
#define GL_ARB_robust_buffer_access_behavior

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_robust_buffer_access_behavior();
#endif // GL_ARB_robust_buffer_access_behavior

#if !defined(GL_ARB_robustness)
#define GL_ARB_robustness

#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004 // NOLINT
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252 // NOLINT
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253 // NOLINT
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254 // NOLINT
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255 // NOLINT
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256 // NOLINT
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261 // NOLINT
typedef GLenum ( NN_GLL_GL_APIENTRY *glGetGraphicsResetStatusARBType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glGetnTexImageARBType )( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img );
typedef void ( NN_GLL_GL_APIENTRY *glReadnPixelsARBType )( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetnCompressedTexImageARBType )( GLenum target, GLint lod, GLsizei bufSize, void *img );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformfvARBType )( GLuint program, GLint location, GLsizei bufSize, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformivARBType )( GLuint program, GLint location, GLsizei bufSize, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformuivARBType )( GLuint program, GLint location, GLsizei bufSize, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformdvARBType )( GLuint program, GLint location, GLsizei bufSize, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetnMapdvARBType )( GLenum target, GLenum query, GLsizei bufSize, GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetnMapfvARBType )( GLenum target, GLenum query, GLsizei bufSize, GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetnMapivARBType )( GLenum target, GLenum query, GLsizei bufSize, GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetnPixelMapfvARBType )( GLenum map, GLsizei bufSize, GLfloat *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetnPixelMapuivARBType )( GLenum map, GLsizei bufSize, GLuint *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetnPixelMapusvARBType )( GLenum map, GLsizei bufSize, GLushort *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetnPolygonStippleARBType )( GLsizei bufSize, GLubyte *pattern );
typedef void ( NN_GLL_GL_APIENTRY *glGetnColorTableARBType )( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table );
typedef void ( NN_GLL_GL_APIENTRY *glGetnConvolutionFilterARBType )( GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image );
typedef void ( NN_GLL_GL_APIENTRY *glGetnSeparableFilterARBType )( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span );
typedef void ( NN_GLL_GL_APIENTRY *glGetnHistogramARBType )( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetnMinmaxARBType )( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values );
#define glGetGraphicsResetStatusARB g_nngllGetGraphicsResetStatusARB
#define glGetnTexImageARB g_nngllGetnTexImageARB
#define glReadnPixelsARB g_nngllReadnPixelsARB
#define glGetnCompressedTexImageARB g_nngllGetnCompressedTexImageARB
#define glGetnUniformfvARB g_nngllGetnUniformfvARB
#define glGetnUniformivARB g_nngllGetnUniformivARB
#define glGetnUniformuivARB g_nngllGetnUniformuivARB
#define glGetnUniformdvARB g_nngllGetnUniformdvARB
#define glGetnMapdvARB g_nngllGetnMapdvARB
#define glGetnMapfvARB g_nngllGetnMapfvARB
#define glGetnMapivARB g_nngllGetnMapivARB
#define glGetnPixelMapfvARB g_nngllGetnPixelMapfvARB
#define glGetnPixelMapuivARB g_nngllGetnPixelMapuivARB
#define glGetnPixelMapusvARB g_nngllGetnPixelMapusvARB
#define glGetnPolygonStippleARB g_nngllGetnPolygonStippleARB
#define glGetnColorTableARB g_nngllGetnColorTableARB
#define glGetnConvolutionFilterARB g_nngllGetnConvolutionFilterARB
#define glGetnSeparableFilterARB g_nngllGetnSeparableFilterARB
#define glGetnHistogramARB g_nngllGetnHistogramARB
#define glGetnMinmaxARB g_nngllGetnMinmaxARB
NN_GLL_API glGetGraphicsResetStatusARBType g_nngllGetGraphicsResetStatusARB;
NN_GLL_API glGetnTexImageARBType g_nngllGetnTexImageARB;
NN_GLL_API glReadnPixelsARBType g_nngllReadnPixelsARB;
NN_GLL_API glGetnCompressedTexImageARBType g_nngllGetnCompressedTexImageARB;
NN_GLL_API glGetnUniformfvARBType g_nngllGetnUniformfvARB;
NN_GLL_API glGetnUniformivARBType g_nngllGetnUniformivARB;
NN_GLL_API glGetnUniformuivARBType g_nngllGetnUniformuivARB;
NN_GLL_API glGetnUniformdvARBType g_nngllGetnUniformdvARB;
NN_GLL_API glGetnMapdvARBType g_nngllGetnMapdvARB;
NN_GLL_API glGetnMapfvARBType g_nngllGetnMapfvARB;
NN_GLL_API glGetnMapivARBType g_nngllGetnMapivARB;
NN_GLL_API glGetnPixelMapfvARBType g_nngllGetnPixelMapfvARB;
NN_GLL_API glGetnPixelMapuivARBType g_nngllGetnPixelMapuivARB;
NN_GLL_API glGetnPixelMapusvARBType g_nngllGetnPixelMapusvARB;
NN_GLL_API glGetnPolygonStippleARBType g_nngllGetnPolygonStippleARB;
NN_GLL_API glGetnColorTableARBType g_nngllGetnColorTableARB;
NN_GLL_API glGetnConvolutionFilterARBType g_nngllGetnConvolutionFilterARB;
NN_GLL_API glGetnSeparableFilterARBType g_nngllGetnSeparableFilterARB;
NN_GLL_API glGetnHistogramARBType g_nngllGetnHistogramARB;
NN_GLL_API glGetnMinmaxARBType g_nngllGetnMinmaxARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_robustness();
#endif // GL_ARB_robustness

#if !defined(GL_ARB_robustness_isolation)
#define GL_ARB_robustness_isolation

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_robustness_isolation();
#endif // GL_ARB_robustness_isolation

#if !defined(GL_ARB_sample_locations)
#define GL_ARB_sample_locations

#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D // NOLINT
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E // NOLINT
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F // NOLINT
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340 // NOLINT
#define GL_SAMPLE_LOCATION_ARB 0x8E50 // NOLINT
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341 // NOLINT
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342 // NOLINT
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferSampleLocationsfvARBType )( GLenum target, GLuint start, GLsizei count, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferSampleLocationsfvARBType )( GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glEvaluateDepthValuesARBType )(  );
#define glFramebufferSampleLocationsfvARB g_nngllFramebufferSampleLocationsfvARB
#define glNamedFramebufferSampleLocationsfvARB g_nngllNamedFramebufferSampleLocationsfvARB
#define glEvaluateDepthValuesARB g_nngllEvaluateDepthValuesARB
NN_GLL_API glFramebufferSampleLocationsfvARBType g_nngllFramebufferSampleLocationsfvARB;
NN_GLL_API glNamedFramebufferSampleLocationsfvARBType g_nngllNamedFramebufferSampleLocationsfvARB;
NN_GLL_API glEvaluateDepthValuesARBType g_nngllEvaluateDepthValuesARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_sample_locations();
#endif // GL_ARB_sample_locations

#if !defined(GL_ARB_sample_shading)
#define GL_ARB_sample_shading

#define GL_SAMPLE_SHADING_ARB 0x8C36 // NOLINT
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glMinSampleShadingARBType )( GLfloat value );
#define glMinSampleShadingARB g_nngllMinSampleShadingARB
NN_GLL_API glMinSampleShadingARBType g_nngllMinSampleShadingARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_sample_shading();
#endif // GL_ARB_sample_shading

#if !defined(GL_ARB_sampler_objects)
#define GL_ARB_sampler_objects

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_sampler_objects();
#endif // GL_ARB_sampler_objects

#if !defined(GL_ARB_seamless_cube_map)
#define GL_ARB_seamless_cube_map

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_seamless_cube_map();
#endif // GL_ARB_seamless_cube_map

#if !defined(GL_ARB_seamless_cubemap_per_texture)
#define GL_ARB_seamless_cubemap_per_texture

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_seamless_cubemap_per_texture();
#endif // GL_ARB_seamless_cubemap_per_texture

#if !defined(GL_ARB_separate_shader_objects)
#define GL_ARB_separate_shader_objects

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_separate_shader_objects();
#endif // GL_ARB_separate_shader_objects

#if !defined(GL_ARB_shader_atomic_counter_ops)
#define GL_ARB_shader_atomic_counter_ops

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_atomic_counter_ops();
#endif // GL_ARB_shader_atomic_counter_ops

#if !defined(GL_ARB_shader_atomic_counters)
#define GL_ARB_shader_atomic_counters

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_atomic_counters();
#endif // GL_ARB_shader_atomic_counters

#if !defined(GL_ARB_shader_ballot)
#define GL_ARB_shader_ballot

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_ballot();
#endif // GL_ARB_shader_ballot

#if !defined(GL_ARB_shader_bit_encoding)
#define GL_ARB_shader_bit_encoding

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_bit_encoding();
#endif // GL_ARB_shader_bit_encoding

#if !defined(GL_ARB_shader_clock)
#define GL_ARB_shader_clock

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_clock();
#endif // GL_ARB_shader_clock

#if !defined(GL_ARB_shader_draw_parameters)
#define GL_ARB_shader_draw_parameters

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_draw_parameters();
#endif // GL_ARB_shader_draw_parameters

#if !defined(GL_ARB_shader_group_vote)
#define GL_ARB_shader_group_vote

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_group_vote();
#endif // GL_ARB_shader_group_vote

#if !defined(GL_ARB_shader_image_load_store)
#define GL_ARB_shader_image_load_store

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_image_load_store();
#endif // GL_ARB_shader_image_load_store

#if !defined(GL_ARB_shader_image_size)
#define GL_ARB_shader_image_size

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_image_size();
#endif // GL_ARB_shader_image_size

#if !defined(GL_ARB_shader_objects)
#define GL_ARB_shader_objects

#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef char GLcharARB;
#define GL_PROGRAM_OBJECT_ARB 0x8B40 // NOLINT
#define GL_SHADER_OBJECT_ARB 0x8B48 // NOLINT
#define GL_OBJECT_TYPE_ARB 0x8B4E // NOLINT
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F // NOLINT
#define GL_FLOAT_VEC2_ARB 0x8B50 // NOLINT
#define GL_FLOAT_VEC3_ARB 0x8B51 // NOLINT
#define GL_FLOAT_VEC4_ARB 0x8B52 // NOLINT
#define GL_INT_VEC2_ARB 0x8B53 // NOLINT
#define GL_INT_VEC3_ARB 0x8B54 // NOLINT
#define GL_INT_VEC4_ARB 0x8B55 // NOLINT
#define GL_BOOL_ARB 0x8B56 // NOLINT
#define GL_BOOL_VEC2_ARB 0x8B57 // NOLINT
#define GL_BOOL_VEC3_ARB 0x8B58 // NOLINT
#define GL_BOOL_VEC4_ARB 0x8B59 // NOLINT
#define GL_FLOAT_MAT2_ARB 0x8B5A // NOLINT
#define GL_FLOAT_MAT3_ARB 0x8B5B // NOLINT
#define GL_FLOAT_MAT4_ARB 0x8B5C // NOLINT
#define GL_SAMPLER_1D_ARB 0x8B5D // NOLINT
#define GL_SAMPLER_2D_ARB 0x8B5E // NOLINT
#define GL_SAMPLER_3D_ARB 0x8B5F // NOLINT
#define GL_SAMPLER_CUBE_ARB 0x8B60 // NOLINT
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61 // NOLINT
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62 // NOLINT
#define GL_SAMPLER_2D_RECT_ARB 0x8B63 // NOLINT
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64 // NOLINT
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80 // NOLINT
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81 // NOLINT
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82 // NOLINT
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83 // NOLINT
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84 // NOLINT
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85 // NOLINT
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86 // NOLINT
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87 // NOLINT
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDeleteObjectARBType )( GLhandleARB obj );
typedef GLhandleARB ( NN_GLL_GL_APIENTRY *glGetHandleARBType )( GLenum pname );
typedef void ( NN_GLL_GL_APIENTRY *glDetachObjectARBType )( GLhandleARB containerObj, GLhandleARB attachedObj );
typedef GLhandleARB ( NN_GLL_GL_APIENTRY *glCreateShaderObjectARBType )( GLenum shaderType );
typedef void ( NN_GLL_GL_APIENTRY *glShaderSourceARBType )( GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length );
typedef void ( NN_GLL_GL_APIENTRY *glCompileShaderARBType )( GLhandleARB shaderObj );
typedef GLhandleARB ( NN_GLL_GL_APIENTRY *glCreateProgramObjectARBType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glAttachObjectARBType )( GLhandleARB containerObj, GLhandleARB obj );
typedef void ( NN_GLL_GL_APIENTRY *glLinkProgramARBType )( GLhandleARB programObj );
typedef void ( NN_GLL_GL_APIENTRY *glUseProgramObjectARBType )( GLhandleARB programObj );
typedef void ( NN_GLL_GL_APIENTRY *glValidateProgramARBType )( GLhandleARB programObj );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1fARBType )( GLint location, GLfloat v0 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2fARBType )( GLint location, GLfloat v0, GLfloat v1 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3fARBType )( GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4fARBType )( GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1iARBType )( GLint location, GLint v0 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2iARBType )( GLint location, GLint v0, GLint v1 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3iARBType )( GLint location, GLint v0, GLint v1, GLint v2 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4iARBType )( GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1fvARBType )( GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2fvARBType )( GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3fvARBType )( GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4fvARBType )( GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1ivARBType )( GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2ivARBType )( GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3ivARBType )( GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4ivARBType )( GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix2fvARBType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix3fvARBType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformMatrix4fvARBType )( GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glGetObjectParameterfvARBType )( GLhandleARB obj, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetObjectParameterivARBType )( GLhandleARB obj, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetInfoLogARBType )( GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog );
// Could be an alias of glGetAttachedShaders except that GLhandleARB is different on MacOS X
typedef void ( NN_GLL_GL_APIENTRY *glGetAttachedObjectsARBType )( GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetUniformLocationARBType )( GLhandleARB programObj, const GLcharARB *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveUniformARBType )( GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformfvARBType )( GLhandleARB programObj, GLint location, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformivARBType )( GLhandleARB programObj, GLint location, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetShaderSourceARBType )( GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source );
#define glDeleteObjectARB g_nngllDeleteObjectARB
#define glGetHandleARB g_nngllGetHandleARB
#define glDetachObjectARB g_nngllDetachObjectARB
#define glCreateShaderObjectARB g_nngllCreateShaderObjectARB
#define glShaderSourceARB g_nngllShaderSourceARB
#define glCompileShaderARB g_nngllCompileShaderARB
#define glCreateProgramObjectARB g_nngllCreateProgramObjectARB
#define glAttachObjectARB g_nngllAttachObjectARB
#define glLinkProgramARB g_nngllLinkProgramARB
#define glUseProgramObjectARB g_nngllUseProgramObjectARB
#define glValidateProgramARB g_nngllValidateProgramARB
#define glUniform1fARB g_nngllUniform1fARB
#define glUniform2fARB g_nngllUniform2fARB
#define glUniform3fARB g_nngllUniform3fARB
#define glUniform4fARB g_nngllUniform4fARB
#define glUniform1iARB g_nngllUniform1iARB
#define glUniform2iARB g_nngllUniform2iARB
#define glUniform3iARB g_nngllUniform3iARB
#define glUniform4iARB g_nngllUniform4iARB
#define glUniform1fvARB g_nngllUniform1fvARB
#define glUniform2fvARB g_nngllUniform2fvARB
#define glUniform3fvARB g_nngllUniform3fvARB
#define glUniform4fvARB g_nngllUniform4fvARB
#define glUniform1ivARB g_nngllUniform1ivARB
#define glUniform2ivARB g_nngllUniform2ivARB
#define glUniform3ivARB g_nngllUniform3ivARB
#define glUniform4ivARB g_nngllUniform4ivARB
#define glUniformMatrix2fvARB g_nngllUniformMatrix2fvARB
#define glUniformMatrix3fvARB g_nngllUniformMatrix3fvARB
#define glUniformMatrix4fvARB g_nngllUniformMatrix4fvARB
#define glGetObjectParameterfvARB g_nngllGetObjectParameterfvARB
#define glGetObjectParameterivARB g_nngllGetObjectParameterivARB
#define glGetInfoLogARB g_nngllGetInfoLogARB
#define glGetAttachedObjectsARB g_nngllGetAttachedObjectsARB
#define glGetUniformLocationARB g_nngllGetUniformLocationARB
#define glGetActiveUniformARB g_nngllGetActiveUniformARB
#define glGetUniformfvARB g_nngllGetUniformfvARB
#define glGetUniformivARB g_nngllGetUniformivARB
#define glGetShaderSourceARB g_nngllGetShaderSourceARB
NN_GLL_API glDeleteObjectARBType g_nngllDeleteObjectARB;
NN_GLL_API glGetHandleARBType g_nngllGetHandleARB;
NN_GLL_API glDetachObjectARBType g_nngllDetachObjectARB;
NN_GLL_API glCreateShaderObjectARBType g_nngllCreateShaderObjectARB;
NN_GLL_API glShaderSourceARBType g_nngllShaderSourceARB;
NN_GLL_API glCompileShaderARBType g_nngllCompileShaderARB;
NN_GLL_API glCreateProgramObjectARBType g_nngllCreateProgramObjectARB;
NN_GLL_API glAttachObjectARBType g_nngllAttachObjectARB;
NN_GLL_API glLinkProgramARBType g_nngllLinkProgramARB;
NN_GLL_API glUseProgramObjectARBType g_nngllUseProgramObjectARB;
NN_GLL_API glValidateProgramARBType g_nngllValidateProgramARB;
NN_GLL_API glUniform1fARBType g_nngllUniform1fARB;
NN_GLL_API glUniform2fARBType g_nngllUniform2fARB;
NN_GLL_API glUniform3fARBType g_nngllUniform3fARB;
NN_GLL_API glUniform4fARBType g_nngllUniform4fARB;
NN_GLL_API glUniform1iARBType g_nngllUniform1iARB;
NN_GLL_API glUniform2iARBType g_nngllUniform2iARB;
NN_GLL_API glUniform3iARBType g_nngllUniform3iARB;
NN_GLL_API glUniform4iARBType g_nngllUniform4iARB;
NN_GLL_API glUniform1fvARBType g_nngllUniform1fvARB;
NN_GLL_API glUniform2fvARBType g_nngllUniform2fvARB;
NN_GLL_API glUniform3fvARBType g_nngllUniform3fvARB;
NN_GLL_API glUniform4fvARBType g_nngllUniform4fvARB;
NN_GLL_API glUniform1ivARBType g_nngllUniform1ivARB;
NN_GLL_API glUniform2ivARBType g_nngllUniform2ivARB;
NN_GLL_API glUniform3ivARBType g_nngllUniform3ivARB;
NN_GLL_API glUniform4ivARBType g_nngllUniform4ivARB;
NN_GLL_API glUniformMatrix2fvARBType g_nngllUniformMatrix2fvARB;
NN_GLL_API glUniformMatrix3fvARBType g_nngllUniformMatrix3fvARB;
NN_GLL_API glUniformMatrix4fvARBType g_nngllUniformMatrix4fvARB;
NN_GLL_API glGetObjectParameterfvARBType g_nngllGetObjectParameterfvARB;
NN_GLL_API glGetObjectParameterivARBType g_nngllGetObjectParameterivARB;
NN_GLL_API glGetInfoLogARBType g_nngllGetInfoLogARB;
NN_GLL_API glGetAttachedObjectsARBType g_nngllGetAttachedObjectsARB;
NN_GLL_API glGetUniformLocationARBType g_nngllGetUniformLocationARB;
NN_GLL_API glGetActiveUniformARBType g_nngllGetActiveUniformARB;
NN_GLL_API glGetUniformfvARBType g_nngllGetUniformfvARB;
NN_GLL_API glGetUniformivARBType g_nngllGetUniformivARB;
NN_GLL_API glGetShaderSourceARBType g_nngllGetShaderSourceARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_objects();
#endif // GL_ARB_shader_objects

#if !defined(GL_ARB_shader_precision)
#define GL_ARB_shader_precision

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_precision();
#endif // GL_ARB_shader_precision

#if !defined(GL_ARB_shader_stencil_export)
#define GL_ARB_shader_stencil_export

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_stencil_export();
#endif // GL_ARB_shader_stencil_export

#if !defined(GL_ARB_shader_storage_buffer_object)
#define GL_ARB_shader_storage_buffer_object

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_storage_buffer_object();
#endif // GL_ARB_shader_storage_buffer_object

#if !defined(GL_ARB_shader_subroutine)
#define GL_ARB_shader_subroutine

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_subroutine();
#endif // GL_ARB_shader_subroutine

#if !defined(GL_ARB_shader_texture_image_samples)
#define GL_ARB_shader_texture_image_samples

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_texture_image_samples();
#endif // GL_ARB_shader_texture_image_samples

#if !defined(GL_ARB_shader_texture_lod)
#define GL_ARB_shader_texture_lod

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_texture_lod();
#endif // GL_ARB_shader_texture_lod

#if !defined(GL_ARB_shader_viewport_layer_array)
#define GL_ARB_shader_viewport_layer_array

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shader_viewport_layer_array();
#endif // GL_ARB_shader_viewport_layer_array

#if !defined(GL_ARB_shading_language_100)
#define GL_ARB_shading_language_100

#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shading_language_100();
#endif // GL_ARB_shading_language_100

#if !defined(GL_ARB_shading_language_420pack)
#define GL_ARB_shading_language_420pack

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shading_language_420pack();
#endif // GL_ARB_shading_language_420pack

#if !defined(GL_ARB_shading_language_include)
#define GL_ARB_shading_language_include

#define GL_SHADER_INCLUDE_ARB 0x8DAE // NOLINT
#define GL_NAMED_STRING_LENGTH_ARB 0x8DE9 // NOLINT
#define GL_NAMED_STRING_TYPE_ARB 0x8DEA // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glNamedStringARBType )( GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteNamedStringARBType )( GLint namelen, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glCompileShaderIncludeARBType )( GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsNamedStringARBType )( GLint namelen, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedStringARBType )( GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedStringivARBType )( GLint namelen, const GLchar *name, GLenum pname, GLint *params );
#define glNamedStringARB g_nngllNamedStringARB
#define glDeleteNamedStringARB g_nngllDeleteNamedStringARB
#define glCompileShaderIncludeARB g_nngllCompileShaderIncludeARB
#define glIsNamedStringARB g_nngllIsNamedStringARB
#define glGetNamedStringARB g_nngllGetNamedStringARB
#define glGetNamedStringivARB g_nngllGetNamedStringivARB
NN_GLL_API glNamedStringARBType g_nngllNamedStringARB;
NN_GLL_API glDeleteNamedStringARBType g_nngllDeleteNamedStringARB;
NN_GLL_API glCompileShaderIncludeARBType g_nngllCompileShaderIncludeARB;
NN_GLL_API glIsNamedStringARBType g_nngllIsNamedStringARB;
NN_GLL_API glGetNamedStringARBType g_nngllGetNamedStringARB;
NN_GLL_API glGetNamedStringivARBType g_nngllGetNamedStringivARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shading_language_include();
#endif // GL_ARB_shading_language_include

#if !defined(GL_ARB_shading_language_packing)
#define GL_ARB_shading_language_packing

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shading_language_packing();
#endif // GL_ARB_shading_language_packing

#if !defined(GL_ARB_shadow)
#define GL_ARB_shadow

#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C // NOLINT
#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D // NOLINT
#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shadow();
#endif // GL_ARB_shadow

#if !defined(GL_ARB_shadow_ambient)
#define GL_ARB_shadow_ambient

#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_shadow_ambient();
#endif // GL_ARB_shadow_ambient

#if !defined(GL_ARB_sparse_buffer)
#define GL_ARB_sparse_buffer

#define GL_SPARSE_STORAGE_BIT_ARB 0x0400 // NOLINT
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0x82F8 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBufferPageCommitmentARBType )( GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit );
typedef void ( NN_GLL_GL_APIENTRY *glNamedBufferPageCommitmentEXTType )( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit );
typedef void ( NN_GLL_GL_APIENTRY *glNamedBufferPageCommitmentARBType )( GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit );
#define glBufferPageCommitmentARB g_nngllBufferPageCommitmentARB
#define glNamedBufferPageCommitmentEXT g_nngllNamedBufferPageCommitmentEXT
#define glNamedBufferPageCommitmentARB g_nngllNamedBufferPageCommitmentARB
NN_GLL_API glBufferPageCommitmentARBType g_nngllBufferPageCommitmentARB;
NN_GLL_API glNamedBufferPageCommitmentEXTType g_nngllNamedBufferPageCommitmentEXT;
NN_GLL_API glNamedBufferPageCommitmentARBType g_nngllNamedBufferPageCommitmentARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_sparse_buffer();
#endif // GL_ARB_sparse_buffer

#if !defined(GL_ARB_sparse_texture)
#define GL_ARB_sparse_texture

#define GL_TEXTURE_SPARSE_ARB 0x91A6 // NOLINT
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0x91A7 // NOLINT
#define GL_NUM_SPARSE_LEVELS_ARB 0x91AA // NOLINT
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0x91A8 // NOLINT
#define GL_VIRTUAL_PAGE_SIZE_X_ARB 0x9195 // NOLINT
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0x9196 // NOLINT
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0x9197 // NOLINT
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0x9198 // NOLINT
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199 // NOLINT
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A // NOLINT
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTexPageCommitmentARBType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit );
#define glTexPageCommitmentARB g_nngllTexPageCommitmentARB
NN_GLL_API glTexPageCommitmentARBType g_nngllTexPageCommitmentARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_sparse_texture();
#endif // GL_ARB_sparse_texture

#if !defined(GL_ARB_sparse_texture2)
#define GL_ARB_sparse_texture2

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_sparse_texture2();
#endif // GL_ARB_sparse_texture2

#if !defined(GL_ARB_sparse_texture_clamp)
#define GL_ARB_sparse_texture_clamp

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_sparse_texture_clamp();
#endif // GL_ARB_sparse_texture_clamp

#if !defined(GL_ARB_spirv_extensions)
#define GL_ARB_spirv_extensions

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_spirv_extensions();
#endif // GL_ARB_spirv_extensions

#if !defined(GL_ARB_stencil_texturing)
#define GL_ARB_stencil_texturing

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_stencil_texturing();
#endif // GL_ARB_stencil_texturing

#if !defined(GL_ARB_sync)
#define GL_ARB_sync

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_sync();
#endif // GL_ARB_sync

#if !defined(GL_ARB_tessellation_shader)
#define GL_ARB_tessellation_shader

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_tessellation_shader();
#endif // GL_ARB_tessellation_shader

#if !defined(GL_ARB_texture_barrier)
#define GL_ARB_texture_barrier

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_barrier();
#endif // GL_ARB_texture_barrier

#if !defined(GL_ARB_texture_border_clamp)
#define GL_ARB_texture_border_clamp

#define GL_CLAMP_TO_BORDER_ARB 0x812D // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_border_clamp();
#endif // GL_ARB_texture_border_clamp

#if !defined(GL_ARB_texture_buffer_object)
#define GL_ARB_texture_buffer_object

#define GL_TEXTURE_BUFFER_ARB 0x8C2A // NOLINT
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B // NOLINT
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C // NOLINT
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D // NOLINT
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTexBufferARBType )( GLenum target, GLenum internalformat, GLuint buffer );
#define glTexBufferARB g_nngllTexBufferARB
NN_GLL_API glTexBufferARBType g_nngllTexBufferARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_buffer_object();
#endif // GL_ARB_texture_buffer_object

#if !defined(GL_ARB_texture_buffer_object_rgb32)
#define GL_ARB_texture_buffer_object_rgb32

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_buffer_object_rgb32();
#endif // GL_ARB_texture_buffer_object_rgb32

#if !defined(GL_ARB_texture_buffer_range)
#define GL_ARB_texture_buffer_range

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_buffer_range();
#endif // GL_ARB_texture_buffer_range

#if !defined(GL_ARB_texture_compression)
#define GL_ARB_texture_compression

#define GL_COMPRESSED_ALPHA_ARB 0x84E9 // NOLINT
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA // NOLINT
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB // NOLINT
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC // NOLINT
#define GL_COMPRESSED_RGB_ARB 0x84ED // NOLINT
#define GL_COMPRESSED_RGBA_ARB 0x84EE // NOLINT
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF // NOLINT
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0 // NOLINT
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1 // NOLINT
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2 // NOLINT
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexImage3DARBType )( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexImage2DARBType )( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexImage1DARBType )( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexSubImage3DARBType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexSubImage2DARBType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTexSubImage1DARBType )( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetCompressedTexImageARBType )( GLenum target, GLint level, void *img );
#define glCompressedTexImage3DARB g_nngllCompressedTexImage3DARB
#define glCompressedTexImage2DARB g_nngllCompressedTexImage2DARB
#define glCompressedTexImage1DARB g_nngllCompressedTexImage1DARB
#define glCompressedTexSubImage3DARB g_nngllCompressedTexSubImage3DARB
#define glCompressedTexSubImage2DARB g_nngllCompressedTexSubImage2DARB
#define glCompressedTexSubImage1DARB g_nngllCompressedTexSubImage1DARB
#define glGetCompressedTexImageARB g_nngllGetCompressedTexImageARB
NN_GLL_API glCompressedTexImage3DARBType g_nngllCompressedTexImage3DARB;
NN_GLL_API glCompressedTexImage2DARBType g_nngllCompressedTexImage2DARB;
NN_GLL_API glCompressedTexImage1DARBType g_nngllCompressedTexImage1DARB;
NN_GLL_API glCompressedTexSubImage3DARBType g_nngllCompressedTexSubImage3DARB;
NN_GLL_API glCompressedTexSubImage2DARBType g_nngllCompressedTexSubImage2DARB;
NN_GLL_API glCompressedTexSubImage1DARBType g_nngllCompressedTexSubImage1DARB;
NN_GLL_API glGetCompressedTexImageARBType g_nngllGetCompressedTexImageARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_compression();
#endif // GL_ARB_texture_compression

#if !defined(GL_ARB_texture_compression_bptc)
#define GL_ARB_texture_compression_bptc

#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C // NOLINT
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D // NOLINT
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E // NOLINT
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_compression_bptc();
#endif // GL_ARB_texture_compression_bptc

#if !defined(GL_ARB_texture_compression_rgtc)
#define GL_ARB_texture_compression_rgtc

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_compression_rgtc();
#endif // GL_ARB_texture_compression_rgtc

#if !defined(GL_ARB_texture_cube_map)
#define GL_ARB_texture_cube_map

#define GL_NORMAL_MAP_ARB 0x8511 // NOLINT
#define GL_REFLECTION_MAP_ARB 0x8512 // NOLINT
#define GL_TEXTURE_CUBE_MAP_ARB 0x8513 // NOLINT
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514 // NOLINT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515 // NOLINT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516 // NOLINT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517 // NOLINT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518 // NOLINT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519 // NOLINT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A // NOLINT
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B // NOLINT
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_cube_map();
#endif // GL_ARB_texture_cube_map

#if !defined(GL_ARB_texture_cube_map_array)
#define GL_ARB_texture_cube_map_array

#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0x9009 // NOLINT
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A // NOLINT
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B // NOLINT
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900C // NOLINT
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D // NOLINT
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_cube_map_array();
#endif // GL_ARB_texture_cube_map_array

#if !defined(GL_ARB_texture_env_add)
#define GL_ARB_texture_env_add

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_env_add();
#endif // GL_ARB_texture_env_add

#if !defined(GL_ARB_texture_env_combine)
#define GL_ARB_texture_env_combine

#define GL_COMBINE_ARB 0x8570 // NOLINT
#define GL_COMBINE_RGB_ARB 0x8571 // NOLINT
#define GL_COMBINE_ALPHA_ARB 0x8572 // NOLINT
#define GL_SOURCE0_RGB_ARB 0x8580 // NOLINT
#define GL_SOURCE1_RGB_ARB 0x8581 // NOLINT
#define GL_SOURCE2_RGB_ARB 0x8582 // NOLINT
#define GL_SOURCE0_ALPHA_ARB 0x8588 // NOLINT
#define GL_SOURCE1_ALPHA_ARB 0x8589 // NOLINT
#define GL_SOURCE2_ALPHA_ARB 0x858A // NOLINT
#define GL_OPERAND0_RGB_ARB 0x8590 // NOLINT
#define GL_OPERAND1_RGB_ARB 0x8591 // NOLINT
#define GL_OPERAND2_RGB_ARB 0x8592 // NOLINT
#define GL_OPERAND0_ALPHA_ARB 0x8598 // NOLINT
#define GL_OPERAND1_ALPHA_ARB 0x8599 // NOLINT
#define GL_OPERAND2_ALPHA_ARB 0x859A // NOLINT
#define GL_RGB_SCALE_ARB 0x8573 // NOLINT
#define GL_ADD_SIGNED_ARB 0x8574 // NOLINT
#define GL_INTERPOLATE_ARB 0x8575 // NOLINT
#define GL_SUBTRACT_ARB 0x84E7 // NOLINT
#define GL_CONSTANT_ARB 0x8576 // NOLINT
#define GL_PRIMARY_COLOR_ARB 0x8577 // NOLINT
#define GL_PREVIOUS_ARB 0x8578 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_env_combine();
#endif // GL_ARB_texture_env_combine

#if !defined(GL_ARB_texture_env_crossbar)
#define GL_ARB_texture_env_crossbar

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_env_crossbar();
#endif // GL_ARB_texture_env_crossbar

#if !defined(GL_ARB_texture_env_dot3)
#define GL_ARB_texture_env_dot3

#define GL_DOT3_RGB_ARB 0x86AE // NOLINT
#define GL_DOT3_RGBA_ARB 0x86AF // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_env_dot3();
#endif // GL_ARB_texture_env_dot3

#if !defined(GL_ARB_texture_filter_anisotropic)
#define GL_ARB_texture_filter_anisotropic

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_filter_anisotropic();
#endif // GL_ARB_texture_filter_anisotropic

#if !defined(GL_ARB_texture_filter_minmax)
#define GL_ARB_texture_filter_minmax

#define GL_TEXTURE_REDUCTION_MODE_ARB 0x9366 // NOLINT
#define GL_WEIGHTED_AVERAGE_ARB 0x9367 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_filter_minmax();
#endif // GL_ARB_texture_filter_minmax

#if !defined(GL_ARB_texture_float)
#define GL_ARB_texture_float

#define GL_TEXTURE_RED_TYPE_ARB 0x8C10 // NOLINT
#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11 // NOLINT
#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12 // NOLINT
#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13 // NOLINT
#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14 // NOLINT
#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15 // NOLINT
#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16 // NOLINT
#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17 // NOLINT
#define GL_RGBA32F_ARB 0x8814 // NOLINT
#define GL_RGB32F_ARB 0x8815 // NOLINT
#define GL_ALPHA32F_ARB 0x8816 // NOLINT
#define GL_INTENSITY32F_ARB 0x8817 // NOLINT
#define GL_LUMINANCE32F_ARB 0x8818 // NOLINT
#define GL_LUMINANCE_ALPHA32F_ARB 0x8819 // NOLINT
#define GL_RGBA16F_ARB 0x881A // NOLINT
#define GL_RGB16F_ARB 0x881B // NOLINT
#define GL_ALPHA16F_ARB 0x881C // NOLINT
#define GL_INTENSITY16F_ARB 0x881D // NOLINT
#define GL_LUMINANCE16F_ARB 0x881E // NOLINT
#define GL_LUMINANCE_ALPHA16F_ARB 0x881F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_float();
#endif // GL_ARB_texture_float

#if !defined(GL_ARB_texture_gather)
#define GL_ARB_texture_gather

#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E // NOLINT
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F // NOLINT
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_gather();
#endif // GL_ARB_texture_gather

#if !defined(GL_ARB_texture_mirror_clamp_to_edge)
#define GL_ARB_texture_mirror_clamp_to_edge

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_mirror_clamp_to_edge();
#endif // GL_ARB_texture_mirror_clamp_to_edge

#if !defined(GL_ARB_texture_mirrored_repeat)
#define GL_ARB_texture_mirrored_repeat

#define GL_MIRRORED_REPEAT_ARB 0x8370 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_mirrored_repeat();
#endif // GL_ARB_texture_mirrored_repeat

#if !defined(GL_ARB_texture_multisample)
#define GL_ARB_texture_multisample

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_multisample();
#endif // GL_ARB_texture_multisample

#if !defined(GL_ARB_texture_non_power_of_two)
#define GL_ARB_texture_non_power_of_two

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_non_power_of_two();
#endif // GL_ARB_texture_non_power_of_two

#if !defined(GL_ARB_texture_query_levels)
#define GL_ARB_texture_query_levels

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_query_levels();
#endif // GL_ARB_texture_query_levels

#if !defined(GL_ARB_texture_query_lod)
#define GL_ARB_texture_query_lod

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_query_lod();
#endif // GL_ARB_texture_query_lod

#if !defined(GL_ARB_texture_rectangle)
#define GL_ARB_texture_rectangle

#define GL_TEXTURE_RECTANGLE_ARB 0x84F5 // NOLINT
#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6 // NOLINT
#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7 // NOLINT
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_rectangle();
#endif // GL_ARB_texture_rectangle

#if !defined(GL_ARB_texture_rg)
#define GL_ARB_texture_rg

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_rg();
#endif // GL_ARB_texture_rg

#if !defined(GL_ARB_texture_rgb10_a2ui)
#define GL_ARB_texture_rgb10_a2ui

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_rgb10_a2ui();
#endif // GL_ARB_texture_rgb10_a2ui

#if !defined(GL_ARB_texture_stencil8)
#define GL_ARB_texture_stencil8

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_stencil8();
#endif // GL_ARB_texture_stencil8

#if !defined(GL_ARB_texture_storage)
#define GL_ARB_texture_storage

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_storage();
#endif // GL_ARB_texture_storage

#if !defined(GL_ARB_texture_storage_multisample)
#define GL_ARB_texture_storage_multisample

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_storage_multisample();
#endif // GL_ARB_texture_storage_multisample

#if !defined(GL_ARB_texture_swizzle)
#define GL_ARB_texture_swizzle

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_swizzle();
#endif // GL_ARB_texture_swizzle

#if !defined(GL_ARB_texture_view)
#define GL_ARB_texture_view

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_texture_view();
#endif // GL_ARB_texture_view

#if !defined(GL_ARB_timer_query)
#define GL_ARB_timer_query

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_timer_query();
#endif // GL_ARB_timer_query

#if !defined(GL_ARB_transform_feedback2)
#define GL_ARB_transform_feedback2

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_transform_feedback2();
#endif // GL_ARB_transform_feedback2

#if !defined(GL_ARB_transform_feedback3)
#define GL_ARB_transform_feedback3

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_transform_feedback3();
#endif // GL_ARB_transform_feedback3

#if !defined(GL_ARB_transform_feedback_instanced)
#define GL_ARB_transform_feedback_instanced

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_transform_feedback_instanced();
#endif // GL_ARB_transform_feedback_instanced

#if !defined(GL_ARB_transform_feedback_overflow_query)
#define GL_ARB_transform_feedback_overflow_query

#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC // NOLINT
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_transform_feedback_overflow_query();
#endif // GL_ARB_transform_feedback_overflow_query

#if !defined(GL_ARB_transpose_matrix)
#define GL_ARB_transpose_matrix

#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3 // NOLINT
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4 // NOLINT
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5 // NOLINT
#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glLoadTransposeMatrixfARBType )( const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glLoadTransposeMatrixdARBType )( const GLdouble *m );
typedef void ( NN_GLL_GL_APIENTRY *glMultTransposeMatrixfARBType )( const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMultTransposeMatrixdARBType )( const GLdouble *m );
#define glLoadTransposeMatrixfARB g_nngllLoadTransposeMatrixfARB
#define glLoadTransposeMatrixdARB g_nngllLoadTransposeMatrixdARB
#define glMultTransposeMatrixfARB g_nngllMultTransposeMatrixfARB
#define glMultTransposeMatrixdARB g_nngllMultTransposeMatrixdARB
NN_GLL_API glLoadTransposeMatrixfARBType g_nngllLoadTransposeMatrixfARB;
NN_GLL_API glLoadTransposeMatrixdARBType g_nngllLoadTransposeMatrixdARB;
NN_GLL_API glMultTransposeMatrixfARBType g_nngllMultTransposeMatrixfARB;
NN_GLL_API glMultTransposeMatrixdARBType g_nngllMultTransposeMatrixdARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_transpose_matrix();
#endif // GL_ARB_transpose_matrix

#if !defined(GL_ARB_uniform_buffer_object)
#define GL_ARB_uniform_buffer_object

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_uniform_buffer_object();
#endif // GL_ARB_uniform_buffer_object

#if !defined(GL_ARB_vertex_array_bgra)
#define GL_ARB_vertex_array_bgra

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_vertex_array_bgra();
#endif // GL_ARB_vertex_array_bgra

#if !defined(GL_ARB_vertex_array_object)
#define GL_ARB_vertex_array_object

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_vertex_array_object();
#endif // GL_ARB_vertex_array_object

#if !defined(GL_ARB_vertex_attrib_64bit)
#define GL_ARB_vertex_attrib_64bit

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_vertex_attrib_64bit();
#endif // GL_ARB_vertex_attrib_64bit

#if !defined(GL_ARB_vertex_attrib_binding)
#define GL_ARB_vertex_attrib_binding

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_vertex_attrib_binding();
#endif // GL_ARB_vertex_attrib_binding

#if !defined(GL_ARB_vertex_blend)
#define GL_ARB_vertex_blend

#define GL_MAX_VERTEX_UNITS_ARB 0x86A4 // NOLINT
#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5 // NOLINT
#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6 // NOLINT
#define GL_VERTEX_BLEND_ARB 0x86A7 // NOLINT
#define GL_CURRENT_WEIGHT_ARB 0x86A8 // NOLINT
#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9 // NOLINT
#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA // NOLINT
#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB // NOLINT
#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC // NOLINT
#define GL_WEIGHT_ARRAY_ARB 0x86AD // NOLINT
#define GL_MODELVIEW0_ARB 0x1700 // NOLINT
#define GL_MODELVIEW1_ARB 0x850A // NOLINT
#define GL_MODELVIEW2_ARB 0x8722 // NOLINT
#define GL_MODELVIEW3_ARB 0x8723 // NOLINT
#define GL_MODELVIEW4_ARB 0x8724 // NOLINT
#define GL_MODELVIEW5_ARB 0x8725 // NOLINT
#define GL_MODELVIEW6_ARB 0x8726 // NOLINT
#define GL_MODELVIEW7_ARB 0x8727 // NOLINT
#define GL_MODELVIEW8_ARB 0x8728 // NOLINT
#define GL_MODELVIEW9_ARB 0x8729 // NOLINT
#define GL_MODELVIEW10_ARB 0x872A // NOLINT
#define GL_MODELVIEW11_ARB 0x872B // NOLINT
#define GL_MODELVIEW12_ARB 0x872C // NOLINT
#define GL_MODELVIEW13_ARB 0x872D // NOLINT
#define GL_MODELVIEW14_ARB 0x872E // NOLINT
#define GL_MODELVIEW15_ARB 0x872F // NOLINT
#define GL_MODELVIEW16_ARB 0x8730 // NOLINT
#define GL_MODELVIEW17_ARB 0x8731 // NOLINT
#define GL_MODELVIEW18_ARB 0x8732 // NOLINT
#define GL_MODELVIEW19_ARB 0x8733 // NOLINT
#define GL_MODELVIEW20_ARB 0x8734 // NOLINT
#define GL_MODELVIEW21_ARB 0x8735 // NOLINT
#define GL_MODELVIEW22_ARB 0x8736 // NOLINT
#define GL_MODELVIEW23_ARB 0x8737 // NOLINT
#define GL_MODELVIEW24_ARB 0x8738 // NOLINT
#define GL_MODELVIEW25_ARB 0x8739 // NOLINT
#define GL_MODELVIEW26_ARB 0x873A // NOLINT
#define GL_MODELVIEW27_ARB 0x873B // NOLINT
#define GL_MODELVIEW28_ARB 0x873C // NOLINT
#define GL_MODELVIEW29_ARB 0x873D // NOLINT
#define GL_MODELVIEW30_ARB 0x873E // NOLINT
#define GL_MODELVIEW31_ARB 0x873F // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glWeightbvARBType )( GLint size, const GLbyte *weights );
typedef void ( NN_GLL_GL_APIENTRY *glWeightsvARBType )( GLint size, const GLshort *weights );
typedef void ( NN_GLL_GL_APIENTRY *glWeightivARBType )( GLint size, const GLint *weights );
typedef void ( NN_GLL_GL_APIENTRY *glWeightfvARBType )( GLint size, const GLfloat *weights );
typedef void ( NN_GLL_GL_APIENTRY *glWeightdvARBType )( GLint size, const GLdouble *weights );
typedef void ( NN_GLL_GL_APIENTRY *glWeightubvARBType )( GLint size, const GLubyte *weights );
typedef void ( NN_GLL_GL_APIENTRY *glWeightusvARBType )( GLint size, const GLushort *weights );
typedef void ( NN_GLL_GL_APIENTRY *glWeightuivARBType )( GLint size, const GLuint *weights );
typedef void ( NN_GLL_GL_APIENTRY *glWeightPointerARBType )( GLint size, GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glVertexBlendARBType )( GLint count );
#define glWeightbvARB g_nngllWeightbvARB
#define glWeightsvARB g_nngllWeightsvARB
#define glWeightivARB g_nngllWeightivARB
#define glWeightfvARB g_nngllWeightfvARB
#define glWeightdvARB g_nngllWeightdvARB
#define glWeightubvARB g_nngllWeightubvARB
#define glWeightusvARB g_nngllWeightusvARB
#define glWeightuivARB g_nngllWeightuivARB
#define glWeightPointerARB g_nngllWeightPointerARB
#define glVertexBlendARB g_nngllVertexBlendARB
NN_GLL_API glWeightbvARBType g_nngllWeightbvARB;
NN_GLL_API glWeightsvARBType g_nngllWeightsvARB;
NN_GLL_API glWeightivARBType g_nngllWeightivARB;
NN_GLL_API glWeightfvARBType g_nngllWeightfvARB;
NN_GLL_API glWeightdvARBType g_nngllWeightdvARB;
NN_GLL_API glWeightubvARBType g_nngllWeightubvARB;
NN_GLL_API glWeightusvARBType g_nngllWeightusvARB;
NN_GLL_API glWeightuivARBType g_nngllWeightuivARB;
NN_GLL_API glWeightPointerARBType g_nngllWeightPointerARB;
NN_GLL_API glVertexBlendARBType g_nngllVertexBlendARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_vertex_blend();
#endif // GL_ARB_vertex_blend

#if !defined(GL_ARB_vertex_buffer_object)
#define GL_ARB_vertex_buffer_object

typedef ptrdiff_t GLsizeiptrARB;
typedef ptrdiff_t GLintptrARB;
#define GL_BUFFER_SIZE_ARB 0x8764 // NOLINT
#define GL_BUFFER_USAGE_ARB 0x8765 // NOLINT
#define GL_ARRAY_BUFFER_ARB 0x8892 // NOLINT
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893 // NOLINT
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894 // NOLINT
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895 // NOLINT
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896 // NOLINT
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897 // NOLINT
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898 // NOLINT
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A // NOLINT
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C // NOLINT
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D // NOLINT
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F // NOLINT
#define GL_READ_ONLY_ARB 0x88B8 // NOLINT
#define GL_WRITE_ONLY_ARB 0x88B9 // NOLINT
#define GL_READ_WRITE_ARB 0x88BA // NOLINT
#define GL_BUFFER_ACCESS_ARB 0x88BB // NOLINT
#define GL_BUFFER_MAPPED_ARB 0x88BC // NOLINT
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD // NOLINT
#define GL_STREAM_DRAW_ARB 0x88E0 // NOLINT
#define GL_STREAM_READ_ARB 0x88E1 // NOLINT
#define GL_STREAM_COPY_ARB 0x88E2 // NOLINT
#define GL_STATIC_DRAW_ARB 0x88E4 // NOLINT
#define GL_STATIC_READ_ARB 0x88E5 // NOLINT
#define GL_STATIC_COPY_ARB 0x88E6 // NOLINT
#define GL_DYNAMIC_DRAW_ARB 0x88E8 // NOLINT
#define GL_DYNAMIC_READ_ARB 0x88E9 // NOLINT
#define GL_DYNAMIC_COPY_ARB 0x88EA // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBindBufferARBType )( GLenum target, GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteBuffersARBType )( GLsizei n, const GLuint *buffers );
typedef void ( NN_GLL_GL_APIENTRY *glGenBuffersARBType )( GLsizei n, GLuint *buffers );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsBufferARBType )( GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glBufferDataARBType )( GLenum target, GLsizeiptrARB size, const void *data, GLenum usage );
typedef void ( NN_GLL_GL_APIENTRY *glBufferSubDataARBType )( GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetBufferSubDataARBType )( GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data );
typedef void *( NN_GLL_GL_APIENTRY *glMapBufferARBType )( GLenum target, GLenum access );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glUnmapBufferARBType )( GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glGetBufferParameterivARBType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetBufferPointervARBType )( GLenum target, GLenum pname, void **params );
#define glBindBufferARB g_nngllBindBufferARB
#define glDeleteBuffersARB g_nngllDeleteBuffersARB
#define glGenBuffersARB g_nngllGenBuffersARB
#define glIsBufferARB g_nngllIsBufferARB
#define glBufferDataARB g_nngllBufferDataARB
#define glBufferSubDataARB g_nngllBufferSubDataARB
#define glGetBufferSubDataARB g_nngllGetBufferSubDataARB
#define glMapBufferARB g_nngllMapBufferARB
#define glUnmapBufferARB g_nngllUnmapBufferARB
#define glGetBufferParameterivARB g_nngllGetBufferParameterivARB
#define glGetBufferPointervARB g_nngllGetBufferPointervARB
NN_GLL_API glBindBufferARBType g_nngllBindBufferARB;
NN_GLL_API glDeleteBuffersARBType g_nngllDeleteBuffersARB;
NN_GLL_API glGenBuffersARBType g_nngllGenBuffersARB;
NN_GLL_API glIsBufferARBType g_nngllIsBufferARB;
NN_GLL_API glBufferDataARBType g_nngllBufferDataARB;
NN_GLL_API glBufferSubDataARBType g_nngllBufferSubDataARB;
NN_GLL_API glGetBufferSubDataARBType g_nngllGetBufferSubDataARB;
NN_GLL_API glMapBufferARBType g_nngllMapBufferARB;
NN_GLL_API glUnmapBufferARBType g_nngllUnmapBufferARB;
NN_GLL_API glGetBufferParameterivARBType g_nngllGetBufferParameterivARB;
NN_GLL_API glGetBufferPointervARBType g_nngllGetBufferPointervARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_vertex_buffer_object();
#endif // GL_ARB_vertex_buffer_object

#if !defined(GL_ARB_vertex_program)
#define GL_ARB_vertex_program

#define GL_COLOR_SUM_ARB 0x8458 // NOLINT
#define GL_VERTEX_PROGRAM_ARB 0x8620 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625 // NOLINT
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626 // NOLINT
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642 // NOLINT
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645 // NOLINT
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A // NOLINT
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0 // NOLINT
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1 // NOLINT
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2 // NOLINT
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1dARBType )( GLuint index, GLdouble x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1dvARBType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1fARBType )( GLuint index, GLfloat x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1fvARBType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1sARBType )( GLuint index, GLshort x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1svARBType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2dARBType )( GLuint index, GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2dvARBType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2fARBType )( GLuint index, GLfloat x, GLfloat y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2fvARBType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2sARBType )( GLuint index, GLshort x, GLshort y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2svARBType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3dARBType )( GLuint index, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3dvARBType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3fARBType )( GLuint index, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3fvARBType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3sARBType )( GLuint index, GLshort x, GLshort y, GLshort z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3svARBType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NbvARBType )( GLuint index, const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NivARBType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NsvARBType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NubARBType )( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NubvARBType )( GLuint index, const GLubyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NuivARBType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4NusvARBType )( GLuint index, const GLushort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4bvARBType )( GLuint index, const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4dARBType )( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4dvARBType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4fARBType )( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4fvARBType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4ivARBType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4sARBType )( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4svARBType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4ubvARBType )( GLuint index, const GLubyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4uivARBType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4usvARBType )( GLuint index, const GLushort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribPointerARBType )( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glEnableVertexAttribArrayARBType )( GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glDisableVertexAttribArrayARBType )( GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribdvARBType )( GLuint index, GLenum pname, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribfvARBType )( GLuint index, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribivARBType )( GLuint index, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribPointervARBType )( GLuint index, GLenum pname, void **pointer );
#define glVertexAttrib1dARB g_nngllVertexAttrib1dARB
#define glVertexAttrib1dvARB g_nngllVertexAttrib1dvARB
#define glVertexAttrib1fARB g_nngllVertexAttrib1fARB
#define glVertexAttrib1fvARB g_nngllVertexAttrib1fvARB
#define glVertexAttrib1sARB g_nngllVertexAttrib1sARB
#define glVertexAttrib1svARB g_nngllVertexAttrib1svARB
#define glVertexAttrib2dARB g_nngllVertexAttrib2dARB
#define glVertexAttrib2dvARB g_nngllVertexAttrib2dvARB
#define glVertexAttrib2fARB g_nngllVertexAttrib2fARB
#define glVertexAttrib2fvARB g_nngllVertexAttrib2fvARB
#define glVertexAttrib2sARB g_nngllVertexAttrib2sARB
#define glVertexAttrib2svARB g_nngllVertexAttrib2svARB
#define glVertexAttrib3dARB g_nngllVertexAttrib3dARB
#define glVertexAttrib3dvARB g_nngllVertexAttrib3dvARB
#define glVertexAttrib3fARB g_nngllVertexAttrib3fARB
#define glVertexAttrib3fvARB g_nngllVertexAttrib3fvARB
#define glVertexAttrib3sARB g_nngllVertexAttrib3sARB
#define glVertexAttrib3svARB g_nngllVertexAttrib3svARB
#define glVertexAttrib4NbvARB g_nngllVertexAttrib4NbvARB
#define glVertexAttrib4NivARB g_nngllVertexAttrib4NivARB
#define glVertexAttrib4NsvARB g_nngllVertexAttrib4NsvARB
#define glVertexAttrib4NubARB g_nngllVertexAttrib4NubARB
#define glVertexAttrib4NubvARB g_nngllVertexAttrib4NubvARB
#define glVertexAttrib4NuivARB g_nngllVertexAttrib4NuivARB
#define glVertexAttrib4NusvARB g_nngllVertexAttrib4NusvARB
#define glVertexAttrib4bvARB g_nngllVertexAttrib4bvARB
#define glVertexAttrib4dARB g_nngllVertexAttrib4dARB
#define glVertexAttrib4dvARB g_nngllVertexAttrib4dvARB
#define glVertexAttrib4fARB g_nngllVertexAttrib4fARB
#define glVertexAttrib4fvARB g_nngllVertexAttrib4fvARB
#define glVertexAttrib4ivARB g_nngllVertexAttrib4ivARB
#define glVertexAttrib4sARB g_nngllVertexAttrib4sARB
#define glVertexAttrib4svARB g_nngllVertexAttrib4svARB
#define glVertexAttrib4ubvARB g_nngllVertexAttrib4ubvARB
#define glVertexAttrib4uivARB g_nngllVertexAttrib4uivARB
#define glVertexAttrib4usvARB g_nngllVertexAttrib4usvARB
#define glVertexAttribPointerARB g_nngllVertexAttribPointerARB
#define glEnableVertexAttribArrayARB g_nngllEnableVertexAttribArrayARB
#define glDisableVertexAttribArrayARB g_nngllDisableVertexAttribArrayARB
#define glGetVertexAttribdvARB g_nngllGetVertexAttribdvARB
#define glGetVertexAttribfvARB g_nngllGetVertexAttribfvARB
#define glGetVertexAttribivARB g_nngllGetVertexAttribivARB
#define glGetVertexAttribPointervARB g_nngllGetVertexAttribPointervARB
NN_GLL_API glVertexAttrib1dARBType g_nngllVertexAttrib1dARB;
NN_GLL_API glVertexAttrib1dvARBType g_nngllVertexAttrib1dvARB;
NN_GLL_API glVertexAttrib1fARBType g_nngllVertexAttrib1fARB;
NN_GLL_API glVertexAttrib1fvARBType g_nngllVertexAttrib1fvARB;
NN_GLL_API glVertexAttrib1sARBType g_nngllVertexAttrib1sARB;
NN_GLL_API glVertexAttrib1svARBType g_nngllVertexAttrib1svARB;
NN_GLL_API glVertexAttrib2dARBType g_nngllVertexAttrib2dARB;
NN_GLL_API glVertexAttrib2dvARBType g_nngllVertexAttrib2dvARB;
NN_GLL_API glVertexAttrib2fARBType g_nngllVertexAttrib2fARB;
NN_GLL_API glVertexAttrib2fvARBType g_nngllVertexAttrib2fvARB;
NN_GLL_API glVertexAttrib2sARBType g_nngllVertexAttrib2sARB;
NN_GLL_API glVertexAttrib2svARBType g_nngllVertexAttrib2svARB;
NN_GLL_API glVertexAttrib3dARBType g_nngllVertexAttrib3dARB;
NN_GLL_API glVertexAttrib3dvARBType g_nngllVertexAttrib3dvARB;
NN_GLL_API glVertexAttrib3fARBType g_nngllVertexAttrib3fARB;
NN_GLL_API glVertexAttrib3fvARBType g_nngllVertexAttrib3fvARB;
NN_GLL_API glVertexAttrib3sARBType g_nngllVertexAttrib3sARB;
NN_GLL_API glVertexAttrib3svARBType g_nngllVertexAttrib3svARB;
NN_GLL_API glVertexAttrib4NbvARBType g_nngllVertexAttrib4NbvARB;
NN_GLL_API glVertexAttrib4NivARBType g_nngllVertexAttrib4NivARB;
NN_GLL_API glVertexAttrib4NsvARBType g_nngllVertexAttrib4NsvARB;
NN_GLL_API glVertexAttrib4NubARBType g_nngllVertexAttrib4NubARB;
NN_GLL_API glVertexAttrib4NubvARBType g_nngllVertexAttrib4NubvARB;
NN_GLL_API glVertexAttrib4NuivARBType g_nngllVertexAttrib4NuivARB;
NN_GLL_API glVertexAttrib4NusvARBType g_nngllVertexAttrib4NusvARB;
NN_GLL_API glVertexAttrib4bvARBType g_nngllVertexAttrib4bvARB;
NN_GLL_API glVertexAttrib4dARBType g_nngllVertexAttrib4dARB;
NN_GLL_API glVertexAttrib4dvARBType g_nngllVertexAttrib4dvARB;
NN_GLL_API glVertexAttrib4fARBType g_nngllVertexAttrib4fARB;
NN_GLL_API glVertexAttrib4fvARBType g_nngllVertexAttrib4fvARB;
NN_GLL_API glVertexAttrib4ivARBType g_nngllVertexAttrib4ivARB;
NN_GLL_API glVertexAttrib4sARBType g_nngllVertexAttrib4sARB;
NN_GLL_API glVertexAttrib4svARBType g_nngllVertexAttrib4svARB;
NN_GLL_API glVertexAttrib4ubvARBType g_nngllVertexAttrib4ubvARB;
NN_GLL_API glVertexAttrib4uivARBType g_nngllVertexAttrib4uivARB;
NN_GLL_API glVertexAttrib4usvARBType g_nngllVertexAttrib4usvARB;
NN_GLL_API glVertexAttribPointerARBType g_nngllVertexAttribPointerARB;
NN_GLL_API glEnableVertexAttribArrayARBType g_nngllEnableVertexAttribArrayARB;
NN_GLL_API glDisableVertexAttribArrayARBType g_nngllDisableVertexAttribArrayARB;
NN_GLL_API glGetVertexAttribdvARBType g_nngllGetVertexAttribdvARB;
NN_GLL_API glGetVertexAttribfvARBType g_nngllGetVertexAttribfvARB;
NN_GLL_API glGetVertexAttribivARBType g_nngllGetVertexAttribivARB;
NN_GLL_API glGetVertexAttribPointervARBType g_nngllGetVertexAttribPointervARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_vertex_program();
#endif // GL_ARB_vertex_program

#if !defined(GL_ARB_vertex_shader)
#define GL_ARB_vertex_shader

#define GL_VERTEX_SHADER_ARB 0x8B31 // NOLINT
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A // NOLINT
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B // NOLINT
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C // NOLINT
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D // NOLINT
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89 // NOLINT
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBindAttribLocationARBType )( GLhandleARB programObj, GLuint index, const GLcharARB *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveAttribARBType )( GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetAttribLocationARBType )( GLhandleARB programObj, const GLcharARB *name );
#define glBindAttribLocationARB g_nngllBindAttribLocationARB
#define glGetActiveAttribARB g_nngllGetActiveAttribARB
#define glGetAttribLocationARB g_nngllGetAttribLocationARB
NN_GLL_API glBindAttribLocationARBType g_nngllBindAttribLocationARB;
NN_GLL_API glGetActiveAttribARBType g_nngllGetActiveAttribARB;
NN_GLL_API glGetAttribLocationARBType g_nngllGetAttribLocationARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_vertex_shader();
#endif // GL_ARB_vertex_shader

#if !defined(GL_ARB_vertex_type_10f_11f_11f_rev)
#define GL_ARB_vertex_type_10f_11f_11f_rev

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_vertex_type_10f_11f_11f_rev();
#endif // GL_ARB_vertex_type_10f_11f_11f_rev

#if !defined(GL_ARB_vertex_type_2_10_10_10_rev)
#define GL_ARB_vertex_type_2_10_10_10_rev

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_vertex_type_2_10_10_10_rev();
#endif // GL_ARB_vertex_type_2_10_10_10_rev

#if !defined(GL_ARB_viewport_array)
#define GL_ARB_viewport_array

NN_GLL_API GLboolean nngllIsSupported_GL_ARB_viewport_array();
#endif // GL_ARB_viewport_array

#if !defined(GL_ARB_window_pos)
#define GL_ARB_window_pos

typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2dARBType )( GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2dvARBType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2fARBType )( GLfloat x, GLfloat y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2fvARBType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2iARBType )( GLint x, GLint y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2ivARBType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2sARBType )( GLshort x, GLshort y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2svARBType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3dARBType )( GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3dvARBType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3fARBType )( GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3fvARBType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3iARBType )( GLint x, GLint y, GLint z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3ivARBType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3sARBType )( GLshort x, GLshort y, GLshort z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3svARBType )( const GLshort *v );
#define glWindowPos2dARB g_nngllWindowPos2dARB
#define glWindowPos2dvARB g_nngllWindowPos2dvARB
#define glWindowPos2fARB g_nngllWindowPos2fARB
#define glWindowPos2fvARB g_nngllWindowPos2fvARB
#define glWindowPos2iARB g_nngllWindowPos2iARB
#define glWindowPos2ivARB g_nngllWindowPos2ivARB
#define glWindowPos2sARB g_nngllWindowPos2sARB
#define glWindowPos2svARB g_nngllWindowPos2svARB
#define glWindowPos3dARB g_nngllWindowPos3dARB
#define glWindowPos3dvARB g_nngllWindowPos3dvARB
#define glWindowPos3fARB g_nngllWindowPos3fARB
#define glWindowPos3fvARB g_nngllWindowPos3fvARB
#define glWindowPos3iARB g_nngllWindowPos3iARB
#define glWindowPos3ivARB g_nngllWindowPos3ivARB
#define glWindowPos3sARB g_nngllWindowPos3sARB
#define glWindowPos3svARB g_nngllWindowPos3svARB
NN_GLL_API glWindowPos2dARBType g_nngllWindowPos2dARB;
NN_GLL_API glWindowPos2dvARBType g_nngllWindowPos2dvARB;
NN_GLL_API glWindowPos2fARBType g_nngllWindowPos2fARB;
NN_GLL_API glWindowPos2fvARBType g_nngllWindowPos2fvARB;
NN_GLL_API glWindowPos2iARBType g_nngllWindowPos2iARB;
NN_GLL_API glWindowPos2ivARBType g_nngllWindowPos2ivARB;
NN_GLL_API glWindowPos2sARBType g_nngllWindowPos2sARB;
NN_GLL_API glWindowPos2svARBType g_nngllWindowPos2svARB;
NN_GLL_API glWindowPos3dARBType g_nngllWindowPos3dARB;
NN_GLL_API glWindowPos3dvARBType g_nngllWindowPos3dvARB;
NN_GLL_API glWindowPos3fARBType g_nngllWindowPos3fARB;
NN_GLL_API glWindowPos3fvARBType g_nngllWindowPos3fvARB;
NN_GLL_API glWindowPos3iARBType g_nngllWindowPos3iARB;
NN_GLL_API glWindowPos3ivARBType g_nngllWindowPos3ivARB;
NN_GLL_API glWindowPos3sARBType g_nngllWindowPos3sARB;
NN_GLL_API glWindowPos3svARBType g_nngllWindowPos3svARB;
NN_GLL_API GLboolean nngllIsSupported_GL_ARB_window_pos();
#endif // GL_ARB_window_pos

#if !defined(GL_ATI_draw_buffers)
#define GL_ATI_draw_buffers

#define GL_MAX_DRAW_BUFFERS_ATI 0x8824 // NOLINT
#define GL_DRAW_BUFFER0_ATI 0x8825 // NOLINT
#define GL_DRAW_BUFFER1_ATI 0x8826 // NOLINT
#define GL_DRAW_BUFFER2_ATI 0x8827 // NOLINT
#define GL_DRAW_BUFFER3_ATI 0x8828 // NOLINT
#define GL_DRAW_BUFFER4_ATI 0x8829 // NOLINT
#define GL_DRAW_BUFFER5_ATI 0x882A // NOLINT
#define GL_DRAW_BUFFER6_ATI 0x882B // NOLINT
#define GL_DRAW_BUFFER7_ATI 0x882C // NOLINT
#define GL_DRAW_BUFFER8_ATI 0x882D // NOLINT
#define GL_DRAW_BUFFER9_ATI 0x882E // NOLINT
#define GL_DRAW_BUFFER10_ATI 0x882F // NOLINT
#define GL_DRAW_BUFFER11_ATI 0x8830 // NOLINT
#define GL_DRAW_BUFFER12_ATI 0x8831 // NOLINT
#define GL_DRAW_BUFFER13_ATI 0x8832 // NOLINT
#define GL_DRAW_BUFFER14_ATI 0x8833 // NOLINT
#define GL_DRAW_BUFFER15_ATI 0x8834 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDrawBuffersATIType )( GLsizei n, const GLenum *bufs );
#define glDrawBuffersATI g_nngllDrawBuffersATI
NN_GLL_API glDrawBuffersATIType g_nngllDrawBuffersATI;
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_draw_buffers();
#endif // GL_ATI_draw_buffers

#if !defined(GL_ATI_element_array)
#define GL_ATI_element_array

#define GL_ELEMENT_ARRAY_ATI 0x8768 // NOLINT
#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769 // NOLINT
#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glElementPointerATIType )( GLenum type, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glDrawElementArrayATIType )( GLenum mode, GLsizei count );
typedef void ( NN_GLL_GL_APIENTRY *glDrawRangeElementArrayATIType )( GLenum mode, GLuint start, GLuint end, GLsizei count );
#define glElementPointerATI g_nngllElementPointerATI
#define glDrawElementArrayATI g_nngllDrawElementArrayATI
#define glDrawRangeElementArrayATI g_nngllDrawRangeElementArrayATI
NN_GLL_API glElementPointerATIType g_nngllElementPointerATI;
NN_GLL_API glDrawElementArrayATIType g_nngllDrawElementArrayATI;
NN_GLL_API glDrawRangeElementArrayATIType g_nngllDrawRangeElementArrayATI;
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_element_array();
#endif // GL_ATI_element_array

#if !defined(GL_ATI_envmap_bumpmap)
#define GL_ATI_envmap_bumpmap

#define GL_BUMP_ROT_MATRIX_ATI 0x8775 // NOLINT
#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776 // NOLINT
#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777 // NOLINT
#define GL_BUMP_TEX_UNITS_ATI 0x8778 // NOLINT
#define GL_DUDV_ATI 0x8779 // NOLINT
#define GL_DU8DV8_ATI 0x877A // NOLINT
#define GL_BUMP_ENVMAP_ATI 0x877B // NOLINT
#define GL_BUMP_TARGET_ATI 0x877C // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTexBumpParameterivATIType )( GLenum pname, const GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glTexBumpParameterfvATIType )( GLenum pname, const GLfloat *param );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexBumpParameterivATIType )( GLenum pname, GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexBumpParameterfvATIType )( GLenum pname, GLfloat *param );
#define glTexBumpParameterivATI g_nngllTexBumpParameterivATI
#define glTexBumpParameterfvATI g_nngllTexBumpParameterfvATI
#define glGetTexBumpParameterivATI g_nngllGetTexBumpParameterivATI
#define glGetTexBumpParameterfvATI g_nngllGetTexBumpParameterfvATI
NN_GLL_API glTexBumpParameterivATIType g_nngllTexBumpParameterivATI;
NN_GLL_API glTexBumpParameterfvATIType g_nngllTexBumpParameterfvATI;
NN_GLL_API glGetTexBumpParameterivATIType g_nngllGetTexBumpParameterivATI;
NN_GLL_API glGetTexBumpParameterfvATIType g_nngllGetTexBumpParameterfvATI;
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_envmap_bumpmap();
#endif // GL_ATI_envmap_bumpmap

#if !defined(GL_ATI_fragment_shader)
#define GL_ATI_fragment_shader

#define GL_FRAGMENT_SHADER_ATI 0x8920 // NOLINT
#define GL_REG_0_ATI 0x8921 // NOLINT
#define GL_REG_1_ATI 0x8922 // NOLINT
#define GL_REG_2_ATI 0x8923 // NOLINT
#define GL_REG_3_ATI 0x8924 // NOLINT
#define GL_REG_4_ATI 0x8925 // NOLINT
#define GL_REG_5_ATI 0x8926 // NOLINT
#define GL_REG_6_ATI 0x8927 // NOLINT
#define GL_REG_7_ATI 0x8928 // NOLINT
#define GL_REG_8_ATI 0x8929 // NOLINT
#define GL_REG_9_ATI 0x892A // NOLINT
#define GL_REG_10_ATI 0x892B // NOLINT
#define GL_REG_11_ATI 0x892C // NOLINT
#define GL_REG_12_ATI 0x892D // NOLINT
#define GL_REG_13_ATI 0x892E // NOLINT
#define GL_REG_14_ATI 0x892F // NOLINT
#define GL_REG_15_ATI 0x8930 // NOLINT
#define GL_REG_16_ATI 0x8931 // NOLINT
#define GL_REG_17_ATI 0x8932 // NOLINT
#define GL_REG_18_ATI 0x8933 // NOLINT
#define GL_REG_19_ATI 0x8934 // NOLINT
#define GL_REG_20_ATI 0x8935 // NOLINT
#define GL_REG_21_ATI 0x8936 // NOLINT
#define GL_REG_22_ATI 0x8937 // NOLINT
#define GL_REG_23_ATI 0x8938 // NOLINT
#define GL_REG_24_ATI 0x8939 // NOLINT
#define GL_REG_25_ATI 0x893A // NOLINT
#define GL_REG_26_ATI 0x893B // NOLINT
#define GL_REG_27_ATI 0x893C // NOLINT
#define GL_REG_28_ATI 0x893D // NOLINT
#define GL_REG_29_ATI 0x893E // NOLINT
#define GL_REG_30_ATI 0x893F // NOLINT
#define GL_REG_31_ATI 0x8940 // NOLINT
#define GL_CON_0_ATI 0x8941 // NOLINT
#define GL_CON_1_ATI 0x8942 // NOLINT
#define GL_CON_2_ATI 0x8943 // NOLINT
#define GL_CON_3_ATI 0x8944 // NOLINT
#define GL_CON_4_ATI 0x8945 // NOLINT
#define GL_CON_5_ATI 0x8946 // NOLINT
#define GL_CON_6_ATI 0x8947 // NOLINT
#define GL_CON_7_ATI 0x8948 // NOLINT
#define GL_CON_8_ATI 0x8949 // NOLINT
#define GL_CON_9_ATI 0x894A // NOLINT
#define GL_CON_10_ATI 0x894B // NOLINT
#define GL_CON_11_ATI 0x894C // NOLINT
#define GL_CON_12_ATI 0x894D // NOLINT
#define GL_CON_13_ATI 0x894E // NOLINT
#define GL_CON_14_ATI 0x894F // NOLINT
#define GL_CON_15_ATI 0x8950 // NOLINT
#define GL_CON_16_ATI 0x8951 // NOLINT
#define GL_CON_17_ATI 0x8952 // NOLINT
#define GL_CON_18_ATI 0x8953 // NOLINT
#define GL_CON_19_ATI 0x8954 // NOLINT
#define GL_CON_20_ATI 0x8955 // NOLINT
#define GL_CON_21_ATI 0x8956 // NOLINT
#define GL_CON_22_ATI 0x8957 // NOLINT
#define GL_CON_23_ATI 0x8958 // NOLINT
#define GL_CON_24_ATI 0x8959 // NOLINT
#define GL_CON_25_ATI 0x895A // NOLINT
#define GL_CON_26_ATI 0x895B // NOLINT
#define GL_CON_27_ATI 0x895C // NOLINT
#define GL_CON_28_ATI 0x895D // NOLINT
#define GL_CON_29_ATI 0x895E // NOLINT
#define GL_CON_30_ATI 0x895F // NOLINT
#define GL_CON_31_ATI 0x8960 // NOLINT
#define GL_MOV_ATI 0x8961 // NOLINT
#define GL_ADD_ATI 0x8963 // NOLINT
#define GL_MUL_ATI 0x8964 // NOLINT
#define GL_SUB_ATI 0x8965 // NOLINT
#define GL_DOT3_ATI 0x8966 // NOLINT
#define GL_DOT4_ATI 0x8967 // NOLINT
#define GL_MAD_ATI 0x8968 // NOLINT
#define GL_LERP_ATI 0x8969 // NOLINT
#define GL_CND_ATI 0x896A // NOLINT
#define GL_CND0_ATI 0x896B // NOLINT
#define GL_DOT2_ADD_ATI 0x896C // NOLINT
#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D // NOLINT
#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E // NOLINT
#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F // NOLINT
#define GL_NUM_PASSES_ATI 0x8970 // NOLINT
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971 // NOLINT
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972 // NOLINT
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973 // NOLINT
#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974 // NOLINT
#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975 // NOLINT
#define GL_SWIZZLE_STR_ATI 0x8976 // NOLINT
#define GL_SWIZZLE_STQ_ATI 0x8977 // NOLINT
#define GL_SWIZZLE_STR_DR_ATI 0x8978 // NOLINT
#define GL_SWIZZLE_STQ_DQ_ATI 0x8979 // NOLINT
#define GL_SWIZZLE_STRQ_ATI 0x897A // NOLINT
#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B // NOLINT
#define GL_RED_BIT_ATI 0x00000001 // NOLINT
#define GL_GREEN_BIT_ATI 0x00000002 // NOLINT
#define GL_BLUE_BIT_ATI 0x00000004 // NOLINT
#define GL_2X_BIT_ATI 0x00000001 // NOLINT
#define GL_4X_BIT_ATI 0x00000002 // NOLINT
#define GL_8X_BIT_ATI 0x00000004 // NOLINT
#define GL_HALF_BIT_ATI 0x00000008 // NOLINT
#define GL_QUARTER_BIT_ATI 0x00000010 // NOLINT
#define GL_EIGHTH_BIT_ATI 0x00000020 // NOLINT
#define GL_SATURATE_BIT_ATI 0x00000040 // NOLINT
#define GL_COMP_BIT_ATI 0x00000002 // NOLINT
#define GL_NEGATE_BIT_ATI 0x00000004 // NOLINT
#define GL_BIAS_BIT_ATI 0x00000008 // NOLINT
typedef GLuint ( NN_GLL_GL_APIENTRY *glGenFragmentShadersATIType )( GLuint range );
typedef void ( NN_GLL_GL_APIENTRY *glBindFragmentShaderATIType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteFragmentShaderATIType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glBeginFragmentShaderATIType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glEndFragmentShaderATIType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glPassTexCoordATIType )( GLuint dst, GLuint coord, GLenum swizzle );
typedef void ( NN_GLL_GL_APIENTRY *glSampleMapATIType )( GLuint dst, GLuint interp, GLenum swizzle );
typedef void ( NN_GLL_GL_APIENTRY *glColorFragmentOp1ATIType )( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod );
typedef void ( NN_GLL_GL_APIENTRY *glColorFragmentOp2ATIType )( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod );
typedef void ( NN_GLL_GL_APIENTRY *glColorFragmentOp3ATIType )( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod );
typedef void ( NN_GLL_GL_APIENTRY *glAlphaFragmentOp1ATIType )( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod );
typedef void ( NN_GLL_GL_APIENTRY *glAlphaFragmentOp2ATIType )( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod );
typedef void ( NN_GLL_GL_APIENTRY *glAlphaFragmentOp3ATIType )( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod );
typedef void ( NN_GLL_GL_APIENTRY *glSetFragmentShaderConstantATIType )( GLuint dst, const GLfloat *value );
#define glGenFragmentShadersATI g_nngllGenFragmentShadersATI
#define glBindFragmentShaderATI g_nngllBindFragmentShaderATI
#define glDeleteFragmentShaderATI g_nngllDeleteFragmentShaderATI
#define glBeginFragmentShaderATI g_nngllBeginFragmentShaderATI
#define glEndFragmentShaderATI g_nngllEndFragmentShaderATI
#define glPassTexCoordATI g_nngllPassTexCoordATI
#define glSampleMapATI g_nngllSampleMapATI
#define glColorFragmentOp1ATI g_nngllColorFragmentOp1ATI
#define glColorFragmentOp2ATI g_nngllColorFragmentOp2ATI
#define glColorFragmentOp3ATI g_nngllColorFragmentOp3ATI
#define glAlphaFragmentOp1ATI g_nngllAlphaFragmentOp1ATI
#define glAlphaFragmentOp2ATI g_nngllAlphaFragmentOp2ATI
#define glAlphaFragmentOp3ATI g_nngllAlphaFragmentOp3ATI
#define glSetFragmentShaderConstantATI g_nngllSetFragmentShaderConstantATI
NN_GLL_API glGenFragmentShadersATIType g_nngllGenFragmentShadersATI;
NN_GLL_API glBindFragmentShaderATIType g_nngllBindFragmentShaderATI;
NN_GLL_API glDeleteFragmentShaderATIType g_nngllDeleteFragmentShaderATI;
NN_GLL_API glBeginFragmentShaderATIType g_nngllBeginFragmentShaderATI;
NN_GLL_API glEndFragmentShaderATIType g_nngllEndFragmentShaderATI;
NN_GLL_API glPassTexCoordATIType g_nngllPassTexCoordATI;
NN_GLL_API glSampleMapATIType g_nngllSampleMapATI;
NN_GLL_API glColorFragmentOp1ATIType g_nngllColorFragmentOp1ATI;
NN_GLL_API glColorFragmentOp2ATIType g_nngllColorFragmentOp2ATI;
NN_GLL_API glColorFragmentOp3ATIType g_nngllColorFragmentOp3ATI;
NN_GLL_API glAlphaFragmentOp1ATIType g_nngllAlphaFragmentOp1ATI;
NN_GLL_API glAlphaFragmentOp2ATIType g_nngllAlphaFragmentOp2ATI;
NN_GLL_API glAlphaFragmentOp3ATIType g_nngllAlphaFragmentOp3ATI;
NN_GLL_API glSetFragmentShaderConstantATIType g_nngllSetFragmentShaderConstantATI;
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_fragment_shader();
#endif // GL_ATI_fragment_shader

#if !defined(GL_ATI_map_object_buffer)
#define GL_ATI_map_object_buffer

typedef void *( NN_GLL_GL_APIENTRY *glMapObjectBufferATIType )( GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glUnmapObjectBufferATIType )( GLuint buffer );
#define glMapObjectBufferATI g_nngllMapObjectBufferATI
#define glUnmapObjectBufferATI g_nngllUnmapObjectBufferATI
NN_GLL_API glMapObjectBufferATIType g_nngllMapObjectBufferATI;
NN_GLL_API glUnmapObjectBufferATIType g_nngllUnmapObjectBufferATI;
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_map_object_buffer();
#endif // GL_ATI_map_object_buffer

#if !defined(GL_ATI_meminfo)
#define GL_ATI_meminfo

#define GL_VBO_FREE_MEMORY_ATI 0x87FB // NOLINT
#define GL_TEXTURE_FREE_MEMORY_ATI 0x87FC // NOLINT
#define GL_RENDERBUFFER_FREE_MEMORY_ATI 0x87FD // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_meminfo();
#endif // GL_ATI_meminfo
// WGL extension defining some associated GL enums. ATI does not export this extension.

#if !defined(GL_ATI_pixel_format_float)
#define GL_ATI_pixel_format_float

#define GL_RGBA_FLOAT_MODE_ATI 0x8820 // NOLINT
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_pixel_format_float();
#endif // GL_ATI_pixel_format_float

#if !defined(GL_ATI_pn_triangles)
#define GL_ATI_pn_triangles

#define GL_PN_TRIANGLES_ATI 0x87F0 // NOLINT
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1 // NOLINT
#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2 // NOLINT
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3 // NOLINT
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4 // NOLINT
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5 // NOLINT
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6 // NOLINT
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7 // NOLINT
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPNTrianglesiATIType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glPNTrianglesfATIType )( GLenum pname, GLfloat param );
#define glPNTrianglesiATI g_nngllPNTrianglesiATI
#define glPNTrianglesfATI g_nngllPNTrianglesfATI
NN_GLL_API glPNTrianglesiATIType g_nngllPNTrianglesiATI;
NN_GLL_API glPNTrianglesfATIType g_nngllPNTrianglesfATI;
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_pn_triangles();
#endif // GL_ATI_pn_triangles

#if !defined(GL_ATI_separate_stencil)
#define GL_ATI_separate_stencil

#define GL_STENCIL_BACK_FUNC_ATI 0x8800 // NOLINT
#define GL_STENCIL_BACK_FAIL_ATI 0x8801 // NOLINT
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802 // NOLINT
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glStencilOpSeparateATIType )( GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass );
typedef void ( NN_GLL_GL_APIENTRY *glStencilFuncSeparateATIType )( GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask );
#define glStencilOpSeparateATI g_nngllStencilOpSeparateATI
#define glStencilFuncSeparateATI g_nngllStencilFuncSeparateATI
NN_GLL_API glStencilOpSeparateATIType g_nngllStencilOpSeparateATI;
NN_GLL_API glStencilFuncSeparateATIType g_nngllStencilFuncSeparateATI;
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_separate_stencil();
#endif // GL_ATI_separate_stencil

#if !defined(GL_ATI_text_fragment_shader)
#define GL_ATI_text_fragment_shader

#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_text_fragment_shader();
#endif // GL_ATI_text_fragment_shader

#if !defined(GL_ATI_texture_env_combine3)
#define GL_ATI_texture_env_combine3

#define GL_MODULATE_ADD_ATI 0x8744 // NOLINT
#define GL_MODULATE_SIGNED_ADD_ATI 0x8745 // NOLINT
#define GL_MODULATE_SUBTRACT_ATI 0x8746 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_texture_env_combine3();
#endif // GL_ATI_texture_env_combine3

#if !defined(GL_ATI_texture_float)
#define GL_ATI_texture_float

#define GL_RGBA_FLOAT32_ATI 0x8814 // NOLINT
#define GL_RGB_FLOAT32_ATI 0x8815 // NOLINT
#define GL_ALPHA_FLOAT32_ATI 0x8816 // NOLINT
#define GL_INTENSITY_FLOAT32_ATI 0x8817 // NOLINT
#define GL_LUMINANCE_FLOAT32_ATI 0x8818 // NOLINT
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819 // NOLINT
#define GL_RGBA_FLOAT16_ATI 0x881A // NOLINT
#define GL_RGB_FLOAT16_ATI 0x881B // NOLINT
#define GL_ALPHA_FLOAT16_ATI 0x881C // NOLINT
#define GL_INTENSITY_FLOAT16_ATI 0x881D // NOLINT
#define GL_LUMINANCE_FLOAT16_ATI 0x881E // NOLINT
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_texture_float();
#endif // GL_ATI_texture_float

#if !defined(GL_ATI_texture_mirror_once)
#define GL_ATI_texture_mirror_once

#define GL_MIRROR_CLAMP_ATI 0x8742 // NOLINT
#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_texture_mirror_once();
#endif // GL_ATI_texture_mirror_once

#if !defined(GL_ATI_vertex_array_object)
#define GL_ATI_vertex_array_object

#define GL_STATIC_ATI 0x8760 // NOLINT
#define GL_DYNAMIC_ATI 0x8761 // NOLINT
#define GL_PRESERVE_ATI 0x8762 // NOLINT
#define GL_DISCARD_ATI 0x8763 // NOLINT
#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764 // NOLINT
#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765 // NOLINT
#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766 // NOLINT
#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767 // NOLINT
typedef GLuint ( NN_GLL_GL_APIENTRY *glNewObjectBufferATIType )( GLsizei size, const void *pointer, GLenum usage );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsObjectBufferATIType )( GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glUpdateObjectBufferATIType )( GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve );
typedef void ( NN_GLL_GL_APIENTRY *glGetObjectBufferfvATIType )( GLuint buffer, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetObjectBufferivATIType )( GLuint buffer, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glFreeObjectBufferATIType )( GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glArrayObjectATIType )( GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset );
typedef void ( NN_GLL_GL_APIENTRY *glGetArrayObjectfvATIType )( GLenum array, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetArrayObjectivATIType )( GLenum array, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glVariantArrayObjectATIType )( GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset );
typedef void ( NN_GLL_GL_APIENTRY *glGetVariantArrayObjectfvATIType )( GLuint id, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVariantArrayObjectivATIType )( GLuint id, GLenum pname, GLint *params );
#define glNewObjectBufferATI g_nngllNewObjectBufferATI
#define glIsObjectBufferATI g_nngllIsObjectBufferATI
#define glUpdateObjectBufferATI g_nngllUpdateObjectBufferATI
#define glGetObjectBufferfvATI g_nngllGetObjectBufferfvATI
#define glGetObjectBufferivATI g_nngllGetObjectBufferivATI
#define glFreeObjectBufferATI g_nngllFreeObjectBufferATI
#define glArrayObjectATI g_nngllArrayObjectATI
#define glGetArrayObjectfvATI g_nngllGetArrayObjectfvATI
#define glGetArrayObjectivATI g_nngllGetArrayObjectivATI
#define glVariantArrayObjectATI g_nngllVariantArrayObjectATI
#define glGetVariantArrayObjectfvATI g_nngllGetVariantArrayObjectfvATI
#define glGetVariantArrayObjectivATI g_nngllGetVariantArrayObjectivATI
NN_GLL_API glNewObjectBufferATIType g_nngllNewObjectBufferATI;
NN_GLL_API glIsObjectBufferATIType g_nngllIsObjectBufferATI;
NN_GLL_API glUpdateObjectBufferATIType g_nngllUpdateObjectBufferATI;
NN_GLL_API glGetObjectBufferfvATIType g_nngllGetObjectBufferfvATI;
NN_GLL_API glGetObjectBufferivATIType g_nngllGetObjectBufferivATI;
NN_GLL_API glFreeObjectBufferATIType g_nngllFreeObjectBufferATI;
NN_GLL_API glArrayObjectATIType g_nngllArrayObjectATI;
NN_GLL_API glGetArrayObjectfvATIType g_nngllGetArrayObjectfvATI;
NN_GLL_API glGetArrayObjectivATIType g_nngllGetArrayObjectivATI;
NN_GLL_API glVariantArrayObjectATIType g_nngllVariantArrayObjectATI;
NN_GLL_API glGetVariantArrayObjectfvATIType g_nngllGetVariantArrayObjectfvATI;
NN_GLL_API glGetVariantArrayObjectivATIType g_nngllGetVariantArrayObjectivATI;
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_vertex_array_object();
#endif // GL_ATI_vertex_array_object

#if !defined(GL_ATI_vertex_attrib_array_object)
#define GL_ATI_vertex_attrib_array_object

typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribArrayObjectATIType )( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribArrayObjectfvATIType )( GLuint index, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribArrayObjectivATIType )( GLuint index, GLenum pname, GLint *params );
#define glVertexAttribArrayObjectATI g_nngllVertexAttribArrayObjectATI
#define glGetVertexAttribArrayObjectfvATI g_nngllGetVertexAttribArrayObjectfvATI
#define glGetVertexAttribArrayObjectivATI g_nngllGetVertexAttribArrayObjectivATI
NN_GLL_API glVertexAttribArrayObjectATIType g_nngllVertexAttribArrayObjectATI;
NN_GLL_API glGetVertexAttribArrayObjectfvATIType g_nngllGetVertexAttribArrayObjectfvATI;
NN_GLL_API glGetVertexAttribArrayObjectivATIType g_nngllGetVertexAttribArrayObjectivATI;
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_vertex_attrib_array_object();
#endif // GL_ATI_vertex_attrib_array_object

#if !defined(GL_ATI_vertex_streams)
#define GL_ATI_vertex_streams

#define GL_MAX_VERTEX_STREAMS_ATI 0x876B // NOLINT
#define GL_VERTEX_STREAM0_ATI 0x876C // NOLINT
#define GL_VERTEX_STREAM1_ATI 0x876D // NOLINT
#define GL_VERTEX_STREAM2_ATI 0x876E // NOLINT
#define GL_VERTEX_STREAM3_ATI 0x876F // NOLINT
#define GL_VERTEX_STREAM4_ATI 0x8770 // NOLINT
#define GL_VERTEX_STREAM5_ATI 0x8771 // NOLINT
#define GL_VERTEX_STREAM6_ATI 0x8772 // NOLINT
#define GL_VERTEX_STREAM7_ATI 0x8773 // NOLINT
#define GL_VERTEX_SOURCE_ATI 0x8774 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream1sATIType )( GLenum stream, GLshort x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream1svATIType )( GLenum stream, const GLshort *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream1iATIType )( GLenum stream, GLint x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream1ivATIType )( GLenum stream, const GLint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream1fATIType )( GLenum stream, GLfloat x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream1fvATIType )( GLenum stream, const GLfloat *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream1dATIType )( GLenum stream, GLdouble x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream1dvATIType )( GLenum stream, const GLdouble *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream2sATIType )( GLenum stream, GLshort x, GLshort y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream2svATIType )( GLenum stream, const GLshort *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream2iATIType )( GLenum stream, GLint x, GLint y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream2ivATIType )( GLenum stream, const GLint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream2fATIType )( GLenum stream, GLfloat x, GLfloat y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream2fvATIType )( GLenum stream, const GLfloat *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream2dATIType )( GLenum stream, GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream2dvATIType )( GLenum stream, const GLdouble *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream3sATIType )( GLenum stream, GLshort x, GLshort y, GLshort z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream3svATIType )( GLenum stream, const GLshort *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream3iATIType )( GLenum stream, GLint x, GLint y, GLint z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream3ivATIType )( GLenum stream, const GLint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream3fATIType )( GLenum stream, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream3fvATIType )( GLenum stream, const GLfloat *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream3dATIType )( GLenum stream, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream3dvATIType )( GLenum stream, const GLdouble *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream4sATIType )( GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream4svATIType )( GLenum stream, const GLshort *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream4iATIType )( GLenum stream, GLint x, GLint y, GLint z, GLint w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream4ivATIType )( GLenum stream, const GLint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream4fATIType )( GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream4fvATIType )( GLenum stream, const GLfloat *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream4dATIType )( GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexStream4dvATIType )( GLenum stream, const GLdouble *coords );
typedef void ( NN_GLL_GL_APIENTRY *glNormalStream3bATIType )( GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz );
typedef void ( NN_GLL_GL_APIENTRY *glNormalStream3bvATIType )( GLenum stream, const GLbyte *coords );
typedef void ( NN_GLL_GL_APIENTRY *glNormalStream3sATIType )( GLenum stream, GLshort nx, GLshort ny, GLshort nz );
typedef void ( NN_GLL_GL_APIENTRY *glNormalStream3svATIType )( GLenum stream, const GLshort *coords );
typedef void ( NN_GLL_GL_APIENTRY *glNormalStream3iATIType )( GLenum stream, GLint nx, GLint ny, GLint nz );
typedef void ( NN_GLL_GL_APIENTRY *glNormalStream3ivATIType )( GLenum stream, const GLint *coords );
typedef void ( NN_GLL_GL_APIENTRY *glNormalStream3fATIType )( GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz );
typedef void ( NN_GLL_GL_APIENTRY *glNormalStream3fvATIType )( GLenum stream, const GLfloat *coords );
typedef void ( NN_GLL_GL_APIENTRY *glNormalStream3dATIType )( GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz );
typedef void ( NN_GLL_GL_APIENTRY *glNormalStream3dvATIType )( GLenum stream, const GLdouble *coords );
typedef void ( NN_GLL_GL_APIENTRY *glClientActiveVertexStreamATIType )( GLenum stream );
typedef void ( NN_GLL_GL_APIENTRY *glVertexBlendEnviATIType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glVertexBlendEnvfATIType )( GLenum pname, GLfloat param );
#define glVertexStream1sATI g_nngllVertexStream1sATI
#define glVertexStream1svATI g_nngllVertexStream1svATI
#define glVertexStream1iATI g_nngllVertexStream1iATI
#define glVertexStream1ivATI g_nngllVertexStream1ivATI
#define glVertexStream1fATI g_nngllVertexStream1fATI
#define glVertexStream1fvATI g_nngllVertexStream1fvATI
#define glVertexStream1dATI g_nngllVertexStream1dATI
#define glVertexStream1dvATI g_nngllVertexStream1dvATI
#define glVertexStream2sATI g_nngllVertexStream2sATI
#define glVertexStream2svATI g_nngllVertexStream2svATI
#define glVertexStream2iATI g_nngllVertexStream2iATI
#define glVertexStream2ivATI g_nngllVertexStream2ivATI
#define glVertexStream2fATI g_nngllVertexStream2fATI
#define glVertexStream2fvATI g_nngllVertexStream2fvATI
#define glVertexStream2dATI g_nngllVertexStream2dATI
#define glVertexStream2dvATI g_nngllVertexStream2dvATI
#define glVertexStream3sATI g_nngllVertexStream3sATI
#define glVertexStream3svATI g_nngllVertexStream3svATI
#define glVertexStream3iATI g_nngllVertexStream3iATI
#define glVertexStream3ivATI g_nngllVertexStream3ivATI
#define glVertexStream3fATI g_nngllVertexStream3fATI
#define glVertexStream3fvATI g_nngllVertexStream3fvATI
#define glVertexStream3dATI g_nngllVertexStream3dATI
#define glVertexStream3dvATI g_nngllVertexStream3dvATI
#define glVertexStream4sATI g_nngllVertexStream4sATI
#define glVertexStream4svATI g_nngllVertexStream4svATI
#define glVertexStream4iATI g_nngllVertexStream4iATI
#define glVertexStream4ivATI g_nngllVertexStream4ivATI
#define glVertexStream4fATI g_nngllVertexStream4fATI
#define glVertexStream4fvATI g_nngllVertexStream4fvATI
#define glVertexStream4dATI g_nngllVertexStream4dATI
#define glVertexStream4dvATI g_nngllVertexStream4dvATI
#define glNormalStream3bATI g_nngllNormalStream3bATI
#define glNormalStream3bvATI g_nngllNormalStream3bvATI
#define glNormalStream3sATI g_nngllNormalStream3sATI
#define glNormalStream3svATI g_nngllNormalStream3svATI
#define glNormalStream3iATI g_nngllNormalStream3iATI
#define glNormalStream3ivATI g_nngllNormalStream3ivATI
#define glNormalStream3fATI g_nngllNormalStream3fATI
#define glNormalStream3fvATI g_nngllNormalStream3fvATI
#define glNormalStream3dATI g_nngllNormalStream3dATI
#define glNormalStream3dvATI g_nngllNormalStream3dvATI
#define glClientActiveVertexStreamATI g_nngllClientActiveVertexStreamATI
#define glVertexBlendEnviATI g_nngllVertexBlendEnviATI
#define glVertexBlendEnvfATI g_nngllVertexBlendEnvfATI
NN_GLL_API glVertexStream1sATIType g_nngllVertexStream1sATI;
NN_GLL_API glVertexStream1svATIType g_nngllVertexStream1svATI;
NN_GLL_API glVertexStream1iATIType g_nngllVertexStream1iATI;
NN_GLL_API glVertexStream1ivATIType g_nngllVertexStream1ivATI;
NN_GLL_API glVertexStream1fATIType g_nngllVertexStream1fATI;
NN_GLL_API glVertexStream1fvATIType g_nngllVertexStream1fvATI;
NN_GLL_API glVertexStream1dATIType g_nngllVertexStream1dATI;
NN_GLL_API glVertexStream1dvATIType g_nngllVertexStream1dvATI;
NN_GLL_API glVertexStream2sATIType g_nngllVertexStream2sATI;
NN_GLL_API glVertexStream2svATIType g_nngllVertexStream2svATI;
NN_GLL_API glVertexStream2iATIType g_nngllVertexStream2iATI;
NN_GLL_API glVertexStream2ivATIType g_nngllVertexStream2ivATI;
NN_GLL_API glVertexStream2fATIType g_nngllVertexStream2fATI;
NN_GLL_API glVertexStream2fvATIType g_nngllVertexStream2fvATI;
NN_GLL_API glVertexStream2dATIType g_nngllVertexStream2dATI;
NN_GLL_API glVertexStream2dvATIType g_nngllVertexStream2dvATI;
NN_GLL_API glVertexStream3sATIType g_nngllVertexStream3sATI;
NN_GLL_API glVertexStream3svATIType g_nngllVertexStream3svATI;
NN_GLL_API glVertexStream3iATIType g_nngllVertexStream3iATI;
NN_GLL_API glVertexStream3ivATIType g_nngllVertexStream3ivATI;
NN_GLL_API glVertexStream3fATIType g_nngllVertexStream3fATI;
NN_GLL_API glVertexStream3fvATIType g_nngllVertexStream3fvATI;
NN_GLL_API glVertexStream3dATIType g_nngllVertexStream3dATI;
NN_GLL_API glVertexStream3dvATIType g_nngllVertexStream3dvATI;
NN_GLL_API glVertexStream4sATIType g_nngllVertexStream4sATI;
NN_GLL_API glVertexStream4svATIType g_nngllVertexStream4svATI;
NN_GLL_API glVertexStream4iATIType g_nngllVertexStream4iATI;
NN_GLL_API glVertexStream4ivATIType g_nngllVertexStream4ivATI;
NN_GLL_API glVertexStream4fATIType g_nngllVertexStream4fATI;
NN_GLL_API glVertexStream4fvATIType g_nngllVertexStream4fvATI;
NN_GLL_API glVertexStream4dATIType g_nngllVertexStream4dATI;
NN_GLL_API glVertexStream4dvATIType g_nngllVertexStream4dvATI;
NN_GLL_API glNormalStream3bATIType g_nngllNormalStream3bATI;
NN_GLL_API glNormalStream3bvATIType g_nngllNormalStream3bvATI;
NN_GLL_API glNormalStream3sATIType g_nngllNormalStream3sATI;
NN_GLL_API glNormalStream3svATIType g_nngllNormalStream3svATI;
NN_GLL_API glNormalStream3iATIType g_nngllNormalStream3iATI;
NN_GLL_API glNormalStream3ivATIType g_nngllNormalStream3ivATI;
NN_GLL_API glNormalStream3fATIType g_nngllNormalStream3fATI;
NN_GLL_API glNormalStream3fvATIType g_nngllNormalStream3fvATI;
NN_GLL_API glNormalStream3dATIType g_nngllNormalStream3dATI;
NN_GLL_API glNormalStream3dvATIType g_nngllNormalStream3dvATI;
NN_GLL_API glClientActiveVertexStreamATIType g_nngllClientActiveVertexStreamATI;
NN_GLL_API glVertexBlendEnviATIType g_nngllVertexBlendEnviATI;
NN_GLL_API glVertexBlendEnvfATIType g_nngllVertexBlendEnvfATI;
NN_GLL_API GLboolean nngllIsSupported_GL_ATI_vertex_streams();
#endif // GL_ATI_vertex_streams

#if !defined(GL_EXT_422_pixels)
#define GL_EXT_422_pixels

#define GL_422_EXT 0x80CC // NOLINT
#define GL_422_REV_EXT 0x80CD // NOLINT
#define GL_422_AVERAGE_EXT 0x80CE // NOLINT
#define GL_422_REV_AVERAGE_EXT 0x80CF // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_422_pixels();
#endif // GL_EXT_422_pixels

#if !defined(GL_EXT_EGL_image_storage)
#define GL_EXT_EGL_image_storage

typedef void *GLeglImageOES;
typedef void ( NN_GLL_GL_APIENTRY *glEGLImageTargetTexStorageEXTType )( GLenum target, GLeglImageOES image, const GLint* attrib_list );
typedef void ( NN_GLL_GL_APIENTRY *glEGLImageTargetTextureStorageEXTType )( GLuint texture, GLeglImageOES image, const GLint* attrib_list );
#define glEGLImageTargetTexStorageEXT g_nngllEGLImageTargetTexStorageEXT
#define glEGLImageTargetTextureStorageEXT g_nngllEGLImageTargetTextureStorageEXT
NN_GLL_API glEGLImageTargetTexStorageEXTType g_nngllEGLImageTargetTexStorageEXT;
NN_GLL_API glEGLImageTargetTextureStorageEXTType g_nngllEGLImageTargetTextureStorageEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_EGL_image_storage();
#endif // GL_EXT_EGL_image_storage

#if !defined(GL_EXT_abgr)
#define GL_EXT_abgr

#define GL_ABGR_EXT 0x8000 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_abgr();
#endif // GL_EXT_abgr

#if !defined(GL_EXT_bgra)
#define GL_EXT_bgra

#define GL_BGR_EXT 0x80E0 // NOLINT
#define GL_BGRA_EXT 0x80E1 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_bgra();
#endif // GL_EXT_bgra

#if !defined(GL_EXT_bindable_uniform)
#define GL_EXT_bindable_uniform

#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2 // NOLINT
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3 // NOLINT
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4 // NOLINT
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED // NOLINT
#define GL_UNIFORM_BUFFER_EXT 0x8DEE // NOLINT
#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glUniformBufferEXTType )( GLuint program, GLint location, GLuint buffer );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetUniformBufferSizeEXTType )( GLuint program, GLint location );
typedef GLintptr ( NN_GLL_GL_APIENTRY *glGetUniformOffsetEXTType )( GLuint program, GLint location );
#define glUniformBufferEXT g_nngllUniformBufferEXT
#define glGetUniformBufferSizeEXT g_nngllGetUniformBufferSizeEXT
#define glGetUniformOffsetEXT g_nngllGetUniformOffsetEXT
NN_GLL_API glUniformBufferEXTType g_nngllUniformBufferEXT;
NN_GLL_API glGetUniformBufferSizeEXTType g_nngllGetUniformBufferSizeEXT;
NN_GLL_API glGetUniformOffsetEXTType g_nngllGetUniformOffsetEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_bindable_uniform();
#endif // GL_EXT_bindable_uniform

#if !defined(GL_EXT_blend_color)
#define GL_EXT_blend_color

#define GL_CONSTANT_COLOR_EXT 0x8001 // NOLINT
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002 // NOLINT
#define GL_CONSTANT_ALPHA_EXT 0x8003 // NOLINT
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004 // NOLINT
#define GL_BLEND_COLOR_EXT 0x8005 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBlendColorEXTType )( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
#define glBlendColorEXT g_nngllBlendColorEXT
NN_GLL_API glBlendColorEXTType g_nngllBlendColorEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_blend_color();
#endif // GL_EXT_blend_color

#if !defined(GL_EXT_blend_equation_separate)
#define GL_EXT_blend_equation_separate

#define GL_BLEND_EQUATION_RGB_EXT 0x8009 // NOLINT
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBlendEquationSeparateEXTType )( GLenum modeRGB, GLenum modeAlpha );
#define glBlendEquationSeparateEXT g_nngllBlendEquationSeparateEXT
NN_GLL_API glBlendEquationSeparateEXTType g_nngllBlendEquationSeparateEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_blend_equation_separate();
#endif // GL_EXT_blend_equation_separate

#if !defined(GL_EXT_blend_func_separate)
#define GL_EXT_blend_func_separate

#define GL_BLEND_DST_RGB_EXT 0x80C8 // NOLINT
#define GL_BLEND_SRC_RGB_EXT 0x80C9 // NOLINT
#define GL_BLEND_DST_ALPHA_EXT 0x80CA // NOLINT
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBlendFuncSeparateEXTType )( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
#define glBlendFuncSeparateEXT g_nngllBlendFuncSeparateEXT
NN_GLL_API glBlendFuncSeparateEXTType g_nngllBlendFuncSeparateEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_blend_func_separate();
#endif // GL_EXT_blend_func_separate

#if !defined(GL_EXT_blend_logic_op)
#define GL_EXT_blend_logic_op

NN_GLL_API GLboolean nngllIsSupported_GL_EXT_blend_logic_op();
#endif // GL_EXT_blend_logic_op

#if !defined(GL_EXT_blend_minmax)
#define GL_EXT_blend_minmax

#define GL_MIN_EXT 0x8007 // NOLINT
#define GL_MAX_EXT 0x8008 // NOLINT
#define GL_FUNC_ADD_EXT 0x8006 // NOLINT
#define GL_BLEND_EQUATION_EXT 0x8009 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBlendEquationEXTType )( GLenum mode );
#define glBlendEquationEXT g_nngllBlendEquationEXT
NN_GLL_API glBlendEquationEXTType g_nngllBlendEquationEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_blend_minmax();
#endif // GL_EXT_blend_minmax

#if !defined(GL_EXT_blend_subtract)
#define GL_EXT_blend_subtract

#define GL_FUNC_SUBTRACT_EXT 0x800A // NOLINT
#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_blend_subtract();
#endif // GL_EXT_blend_subtract

#if !defined(GL_EXT_clip_volume_hint)
#define GL_EXT_clip_volume_hint

#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_clip_volume_hint();
#endif // GL_EXT_clip_volume_hint

#if !defined(GL_EXT_cmyka)
#define GL_EXT_cmyka

#define GL_CMYK_EXT 0x800C // NOLINT
#define GL_CMYKA_EXT 0x800D // NOLINT
#define GL_PACK_CMYK_HINT_EXT 0x800E // NOLINT
#define GL_UNPACK_CMYK_HINT_EXT 0x800F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_cmyka();
#endif // GL_EXT_cmyka

#if !defined(GL_EXT_color_subtable)
#define GL_EXT_color_subtable

typedef void ( NN_GLL_GL_APIENTRY *glColorSubTableEXTType )( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glCopyColorSubTableEXTType )( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
#define glColorSubTableEXT g_nngllColorSubTableEXT
#define glCopyColorSubTableEXT g_nngllCopyColorSubTableEXT
NN_GLL_API glColorSubTableEXTType g_nngllColorSubTableEXT;
NN_GLL_API glCopyColorSubTableEXTType g_nngllCopyColorSubTableEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_color_subtable();
#endif // GL_EXT_color_subtable

#if !defined(GL_EXT_compiled_vertex_array)
#define GL_EXT_compiled_vertex_array

#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0x81A8 // NOLINT
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0x81A9 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glLockArraysEXTType )( GLint first, GLsizei count );
typedef void ( NN_GLL_GL_APIENTRY *glUnlockArraysEXTType )(  );
#define glLockArraysEXT g_nngllLockArraysEXT
#define glUnlockArraysEXT g_nngllUnlockArraysEXT
NN_GLL_API glLockArraysEXTType g_nngllLockArraysEXT;
NN_GLL_API glUnlockArraysEXTType g_nngllUnlockArraysEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_compiled_vertex_array();
#endif // GL_EXT_compiled_vertex_array

#if !defined(GL_EXT_convolution)
#define GL_EXT_convolution

#define GL_CONVOLUTION_1D_EXT 0x8010 // NOLINT
#define GL_CONVOLUTION_2D_EXT 0x8011 // NOLINT
#define GL_SEPARABLE_2D_EXT 0x8012 // NOLINT
#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013 // NOLINT
#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014 // NOLINT
#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015 // NOLINT
#define GL_REDUCE_EXT 0x8016 // NOLINT
#define GL_CONVOLUTION_FORMAT_EXT 0x8017 // NOLINT
#define GL_CONVOLUTION_WIDTH_EXT 0x8018 // NOLINT
#define GL_CONVOLUTION_HEIGHT_EXT 0x8019 // NOLINT
#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A // NOLINT
#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B // NOLINT
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C // NOLINT
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D // NOLINT
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E // NOLINT
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F // NOLINT
#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020 // NOLINT
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021 // NOLINT
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022 // NOLINT
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionFilter1DEXTType )( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionFilter2DEXTType )( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionParameterfEXTType )( GLenum target, GLenum pname, GLfloat params );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionParameterfvEXTType )( GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionParameteriEXTType )( GLenum target, GLenum pname, GLint params );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionParameterivEXTType )( GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glCopyConvolutionFilter1DEXTType )( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glCopyConvolutionFilter2DEXTType )( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glGetConvolutionFilterEXTType )( GLenum target, GLenum format, GLenum type, void *image );
typedef void ( NN_GLL_GL_APIENTRY *glGetConvolutionParameterfvEXTType )( GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetConvolutionParameterivEXTType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetSeparableFilterEXTType )( GLenum target, GLenum format, GLenum type, void *row, void *column, void *span );
typedef void ( NN_GLL_GL_APIENTRY *glSeparableFilter2DEXTType )( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column );
#define glConvolutionFilter1DEXT g_nngllConvolutionFilter1DEXT
#define glConvolutionFilter2DEXT g_nngllConvolutionFilter2DEXT
#define glConvolutionParameterfEXT g_nngllConvolutionParameterfEXT
#define glConvolutionParameterfvEXT g_nngllConvolutionParameterfvEXT
#define glConvolutionParameteriEXT g_nngllConvolutionParameteriEXT
#define glConvolutionParameterivEXT g_nngllConvolutionParameterivEXT
#define glCopyConvolutionFilter1DEXT g_nngllCopyConvolutionFilter1DEXT
#define glCopyConvolutionFilter2DEXT g_nngllCopyConvolutionFilter2DEXT
#define glGetConvolutionFilterEXT g_nngllGetConvolutionFilterEXT
#define glGetConvolutionParameterfvEXT g_nngllGetConvolutionParameterfvEXT
#define glGetConvolutionParameterivEXT g_nngllGetConvolutionParameterivEXT
#define glGetSeparableFilterEXT g_nngllGetSeparableFilterEXT
#define glSeparableFilter2DEXT g_nngllSeparableFilter2DEXT
NN_GLL_API glConvolutionFilter1DEXTType g_nngllConvolutionFilter1DEXT;
NN_GLL_API glConvolutionFilter2DEXTType g_nngllConvolutionFilter2DEXT;
NN_GLL_API glConvolutionParameterfEXTType g_nngllConvolutionParameterfEXT;
NN_GLL_API glConvolutionParameterfvEXTType g_nngllConvolutionParameterfvEXT;
NN_GLL_API glConvolutionParameteriEXTType g_nngllConvolutionParameteriEXT;
NN_GLL_API glConvolutionParameterivEXTType g_nngllConvolutionParameterivEXT;
NN_GLL_API glCopyConvolutionFilter1DEXTType g_nngllCopyConvolutionFilter1DEXT;
NN_GLL_API glCopyConvolutionFilter2DEXTType g_nngllCopyConvolutionFilter2DEXT;
NN_GLL_API glGetConvolutionFilterEXTType g_nngllGetConvolutionFilterEXT;
NN_GLL_API glGetConvolutionParameterfvEXTType g_nngllGetConvolutionParameterfvEXT;
NN_GLL_API glGetConvolutionParameterivEXTType g_nngllGetConvolutionParameterivEXT;
NN_GLL_API glGetSeparableFilterEXTType g_nngllGetSeparableFilterEXT;
NN_GLL_API glSeparableFilter2DEXTType g_nngllSeparableFilter2DEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_convolution();
#endif // GL_EXT_convolution

#if !defined(GL_EXT_coordinate_frame)
#define GL_EXT_coordinate_frame

#define GL_TANGENT_ARRAY_EXT 0x8439 // NOLINT
#define GL_BINORMAL_ARRAY_EXT 0x843A // NOLINT
#define GL_CURRENT_TANGENT_EXT 0x843B // NOLINT
#define GL_CURRENT_BINORMAL_EXT 0x843C // NOLINT
#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E // NOLINT
#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F // NOLINT
#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440 // NOLINT
#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441 // NOLINT
#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442 // NOLINT
#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443 // NOLINT
#define GL_MAP1_TANGENT_EXT 0x8444 // NOLINT
#define GL_MAP2_TANGENT_EXT 0x8445 // NOLINT
#define GL_MAP1_BINORMAL_EXT 0x8446 // NOLINT
#define GL_MAP2_BINORMAL_EXT 0x8447 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTangent3bEXTType )( GLbyte tx, GLbyte ty, GLbyte tz );
typedef void ( NN_GLL_GL_APIENTRY *glTangent3bvEXTType )( const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glTangent3dEXTType )( GLdouble tx, GLdouble ty, GLdouble tz );
typedef void ( NN_GLL_GL_APIENTRY *glTangent3dvEXTType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glTangent3fEXTType )( GLfloat tx, GLfloat ty, GLfloat tz );
typedef void ( NN_GLL_GL_APIENTRY *glTangent3fvEXTType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTangent3iEXTType )( GLint tx, GLint ty, GLint tz );
typedef void ( NN_GLL_GL_APIENTRY *glTangent3ivEXTType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glTangent3sEXTType )( GLshort tx, GLshort ty, GLshort tz );
typedef void ( NN_GLL_GL_APIENTRY *glTangent3svEXTType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glBinormal3bEXTType )( GLbyte bx, GLbyte by, GLbyte bz );
typedef void ( NN_GLL_GL_APIENTRY *glBinormal3bvEXTType )( const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glBinormal3dEXTType )( GLdouble bx, GLdouble by, GLdouble bz );
typedef void ( NN_GLL_GL_APIENTRY *glBinormal3dvEXTType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glBinormal3fEXTType )( GLfloat bx, GLfloat by, GLfloat bz );
typedef void ( NN_GLL_GL_APIENTRY *glBinormal3fvEXTType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glBinormal3iEXTType )( GLint bx, GLint by, GLint bz );
typedef void ( NN_GLL_GL_APIENTRY *glBinormal3ivEXTType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glBinormal3sEXTType )( GLshort bx, GLshort by, GLshort bz );
typedef void ( NN_GLL_GL_APIENTRY *glBinormal3svEXTType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glTangentPointerEXTType )( GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glBinormalPointerEXTType )( GLenum type, GLsizei stride, const void *pointer );
#define glTangent3bEXT g_nngllTangent3bEXT
#define glTangent3bvEXT g_nngllTangent3bvEXT
#define glTangent3dEXT g_nngllTangent3dEXT
#define glTangent3dvEXT g_nngllTangent3dvEXT
#define glTangent3fEXT g_nngllTangent3fEXT
#define glTangent3fvEXT g_nngllTangent3fvEXT
#define glTangent3iEXT g_nngllTangent3iEXT
#define glTangent3ivEXT g_nngllTangent3ivEXT
#define glTangent3sEXT g_nngllTangent3sEXT
#define glTangent3svEXT g_nngllTangent3svEXT
#define glBinormal3bEXT g_nngllBinormal3bEXT
#define glBinormal3bvEXT g_nngllBinormal3bvEXT
#define glBinormal3dEXT g_nngllBinormal3dEXT
#define glBinormal3dvEXT g_nngllBinormal3dvEXT
#define glBinormal3fEXT g_nngllBinormal3fEXT
#define glBinormal3fvEXT g_nngllBinormal3fvEXT
#define glBinormal3iEXT g_nngllBinormal3iEXT
#define glBinormal3ivEXT g_nngllBinormal3ivEXT
#define glBinormal3sEXT g_nngllBinormal3sEXT
#define glBinormal3svEXT g_nngllBinormal3svEXT
#define glTangentPointerEXT g_nngllTangentPointerEXT
#define glBinormalPointerEXT g_nngllBinormalPointerEXT
NN_GLL_API glTangent3bEXTType g_nngllTangent3bEXT;
NN_GLL_API glTangent3bvEXTType g_nngllTangent3bvEXT;
NN_GLL_API glTangent3dEXTType g_nngllTangent3dEXT;
NN_GLL_API glTangent3dvEXTType g_nngllTangent3dvEXT;
NN_GLL_API glTangent3fEXTType g_nngllTangent3fEXT;
NN_GLL_API glTangent3fvEXTType g_nngllTangent3fvEXT;
NN_GLL_API glTangent3iEXTType g_nngllTangent3iEXT;
NN_GLL_API glTangent3ivEXTType g_nngllTangent3ivEXT;
NN_GLL_API glTangent3sEXTType g_nngllTangent3sEXT;
NN_GLL_API glTangent3svEXTType g_nngllTangent3svEXT;
NN_GLL_API glBinormal3bEXTType g_nngllBinormal3bEXT;
NN_GLL_API glBinormal3bvEXTType g_nngllBinormal3bvEXT;
NN_GLL_API glBinormal3dEXTType g_nngllBinormal3dEXT;
NN_GLL_API glBinormal3dvEXTType g_nngllBinormal3dvEXT;
NN_GLL_API glBinormal3fEXTType g_nngllBinormal3fEXT;
NN_GLL_API glBinormal3fvEXTType g_nngllBinormal3fvEXT;
NN_GLL_API glBinormal3iEXTType g_nngllBinormal3iEXT;
NN_GLL_API glBinormal3ivEXTType g_nngllBinormal3ivEXT;
NN_GLL_API glBinormal3sEXTType g_nngllBinormal3sEXT;
NN_GLL_API glBinormal3svEXTType g_nngllBinormal3svEXT;
NN_GLL_API glTangentPointerEXTType g_nngllTangentPointerEXT;
NN_GLL_API glBinormalPointerEXTType g_nngllBinormalPointerEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_coordinate_frame();
#endif // GL_EXT_coordinate_frame

#if !defined(GL_EXT_copy_texture)
#define GL_EXT_copy_texture

typedef void ( NN_GLL_GL_APIENTRY *glCopyTexImage1DEXTType )( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTexImage2DEXTType )( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTexSubImage1DEXTType )( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTexSubImage2DEXTType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTexSubImage3DEXTType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
#define glCopyTexImage1DEXT g_nngllCopyTexImage1DEXT
#define glCopyTexImage2DEXT g_nngllCopyTexImage2DEXT
#define glCopyTexSubImage1DEXT g_nngllCopyTexSubImage1DEXT
#define glCopyTexSubImage2DEXT g_nngllCopyTexSubImage2DEXT
#define glCopyTexSubImage3DEXT g_nngllCopyTexSubImage3DEXT
NN_GLL_API glCopyTexImage1DEXTType g_nngllCopyTexImage1DEXT;
NN_GLL_API glCopyTexImage2DEXTType g_nngllCopyTexImage2DEXT;
NN_GLL_API glCopyTexSubImage1DEXTType g_nngllCopyTexSubImage1DEXT;
NN_GLL_API glCopyTexSubImage2DEXTType g_nngllCopyTexSubImage2DEXT;
NN_GLL_API glCopyTexSubImage3DEXTType g_nngllCopyTexSubImage3DEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_copy_texture();
#endif // GL_EXT_copy_texture

#if !defined(GL_EXT_cull_vertex)
#define GL_EXT_cull_vertex

#define GL_CULL_VERTEX_EXT 0x81AA // NOLINT
#define GL_CULL_VERTEX_EYE_POSITION_EXT 0x81AB // NOLINT
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glCullParameterdvEXTType )( GLenum pname, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glCullParameterfvEXTType )( GLenum pname, GLfloat *params );
#define glCullParameterdvEXT g_nngllCullParameterdvEXT
#define glCullParameterfvEXT g_nngllCullParameterfvEXT
NN_GLL_API glCullParameterdvEXTType g_nngllCullParameterdvEXT;
NN_GLL_API glCullParameterfvEXTType g_nngllCullParameterfvEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_cull_vertex();
#endif // GL_EXT_cull_vertex

#if !defined(GL_EXT_debug_label)
#define GL_EXT_debug_label

#define GL_PROGRAM_PIPELINE_OBJECT_EXT 0x8A4F // NOLINT
#define GL_PROGRAM_OBJECT_EXT 0x8B40 // NOLINT
#define GL_SHADER_OBJECT_EXT 0x8B48 // NOLINT
#define GL_BUFFER_OBJECT_EXT 0x9151 // NOLINT
#define GL_QUERY_OBJECT_EXT 0x9153 // NOLINT
#define GL_VERTEX_ARRAY_OBJECT_EXT 0x9154 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glLabelObjectEXTType )( GLenum type, GLuint object, GLsizei length, const GLchar *label );
typedef void ( NN_GLL_GL_APIENTRY *glGetObjectLabelEXTType )( GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label );
#define glLabelObjectEXT g_nngllLabelObjectEXT
#define glGetObjectLabelEXT g_nngllGetObjectLabelEXT
NN_GLL_API glLabelObjectEXTType g_nngllLabelObjectEXT;
NN_GLL_API glGetObjectLabelEXTType g_nngllGetObjectLabelEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_debug_label();
#endif // GL_EXT_debug_label

#if !defined(GL_EXT_debug_marker)
#define GL_EXT_debug_marker

typedef void ( NN_GLL_GL_APIENTRY *glInsertEventMarkerEXTType )( GLsizei length, const GLchar *marker );
typedef void ( NN_GLL_GL_APIENTRY *glPushGroupMarkerEXTType )( GLsizei length, const GLchar *marker );
typedef void ( NN_GLL_GL_APIENTRY *glPopGroupMarkerEXTType )(  );
#define glInsertEventMarkerEXT g_nngllInsertEventMarkerEXT
#define glPushGroupMarkerEXT g_nngllPushGroupMarkerEXT
#define glPopGroupMarkerEXT g_nngllPopGroupMarkerEXT
NN_GLL_API glInsertEventMarkerEXTType g_nngllInsertEventMarkerEXT;
NN_GLL_API glPushGroupMarkerEXTType g_nngllPushGroupMarkerEXT;
NN_GLL_API glPopGroupMarkerEXTType g_nngllPopGroupMarkerEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_debug_marker();
#endif // GL_EXT_debug_marker

#if !defined(GL_EXT_depth_bounds_test)
#define GL_EXT_depth_bounds_test

#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890 // NOLINT
#define GL_DEPTH_BOUNDS_EXT 0x8891 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDepthBoundsEXTType )( GLclampd zmin, GLclampd zmax );
#define glDepthBoundsEXT g_nngllDepthBoundsEXT
NN_GLL_API glDepthBoundsEXTType g_nngllDepthBoundsEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_depth_bounds_test();
#endif // GL_EXT_depth_bounds_test
// DSA extension doesn't identify which interfaces are core profile and keeps getting expanded. This is in sync with revision 34, 2010/09/07

#if !defined(GL_EXT_direct_state_access)
#define GL_EXT_direct_state_access

#define GL_PROGRAM_MATRIX_EXT 0x8E2D // NOLINT
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E // NOLINT
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glMatrixLoadfEXTType )( GLenum mode, const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixLoaddEXTType )( GLenum mode, const GLdouble *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixMultfEXTType )( GLenum mode, const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixMultdEXTType )( GLenum mode, const GLdouble *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixLoadIdentityEXTType )( GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixRotatefEXTType )( GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixRotatedEXTType )( GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixScalefEXTType )( GLenum mode, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixScaledEXTType )( GLenum mode, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixTranslatefEXTType )( GLenum mode, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixTranslatedEXTType )( GLenum mode, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixFrustumEXTType )( GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixOrthoEXTType )( GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixPopEXTType )( GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixPushEXTType )( GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glClientAttribDefaultEXTType )( GLbitfield mask );
typedef void ( NN_GLL_GL_APIENTRY *glPushClientAttribDefaultEXTType )( GLbitfield mask );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameterfEXTType )( GLuint texture, GLenum target, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameterfvEXTType )( GLuint texture, GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameteriEXTType )( GLuint texture, GLenum target, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameterivEXTType )( GLuint texture, GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glTextureImage1DEXTType )( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTextureImage2DEXTType )( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTextureSubImage1DEXTType )( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTextureSubImage2DEXTType )( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTextureImage1DEXTType )( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTextureImage2DEXTType )( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTextureSubImage1DEXTType )( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTextureSubImage2DEXTType )( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureImageEXTType )( GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureParameterfvEXTType )( GLuint texture, GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureParameterivEXTType )( GLuint texture, GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureLevelParameterfvEXTType )( GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureLevelParameterivEXTType )( GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glTextureImage3DEXTType )( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTextureSubImage3DEXTType )( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glCopyTextureSubImage3DEXTType )( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glBindMultiTextureEXTType )( GLenum texunit, GLenum target, GLuint texture );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoordPointerEXTType )( GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexEnvfEXTType )( GLenum texunit, GLenum target, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexEnvfvEXTType )( GLenum texunit, GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexEnviEXTType )( GLenum texunit, GLenum target, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexEnvivEXTType )( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexGendEXTType )( GLenum texunit, GLenum coord, GLenum pname, GLdouble param );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexGendvEXTType )( GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexGenfEXTType )( GLenum texunit, GLenum coord, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexGenfvEXTType )( GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexGeniEXTType )( GLenum texunit, GLenum coord, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexGenivEXTType )( GLenum texunit, GLenum coord, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexEnvfvEXTType )( GLenum texunit, GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexEnvivEXTType )( GLenum texunit, GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexGendvEXTType )( GLenum texunit, GLenum coord, GLenum pname, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexGenfvEXTType )( GLenum texunit, GLenum coord, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexGenivEXTType )( GLenum texunit, GLenum coord, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexParameteriEXTType )( GLenum texunit, GLenum target, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexParameterivEXTType )( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexParameterfEXTType )( GLenum texunit, GLenum target, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexParameterfvEXTType )( GLenum texunit, GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexImage1DEXTType )( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexImage2DEXTType )( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexSubImage1DEXTType )( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexSubImage2DEXTType )( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glCopyMultiTexImage1DEXTType )( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
typedef void ( NN_GLL_GL_APIENTRY *glCopyMultiTexImage2DEXTType )( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
typedef void ( NN_GLL_GL_APIENTRY *glCopyMultiTexSubImage1DEXTType )( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glCopyMultiTexSubImage2DEXTType )( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexImageEXTType )( GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexParameterfvEXTType )( GLenum texunit, GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexParameterivEXTType )( GLenum texunit, GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexLevelParameterfvEXTType )( GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexLevelParameterivEXTType )( GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexImage3DEXTType )( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexSubImage3DEXTType )( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glCopyMultiTexSubImage3DEXTType )( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glEnableClientStateIndexedEXTType )( GLenum array, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glDisableClientStateIndexedEXTType )( GLenum array, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glGetFloatIndexedvEXTType )( GLenum target, GLuint index, GLfloat *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetDoubleIndexedvEXTType )( GLenum target, GLuint index, GLdouble *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetPointerIndexedvEXTType )( GLenum target, GLuint index, void **data );
typedef void ( NN_GLL_GL_APIENTRY *glEnableIndexedEXTType )( GLenum target, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glDisableIndexedEXTType )( GLenum target, GLuint index );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsEnabledIndexedEXTType )( GLenum target, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glGetIntegerIndexedvEXTType )( GLenum target, GLuint index, GLint *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetBooleanIndexedvEXTType )( GLenum target, GLuint index, GLboolean *data );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTextureImage3DEXTType )( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTextureImage2DEXTType )( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTextureImage1DEXTType )( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTextureSubImage3DEXTType )( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTextureSubImage2DEXTType )( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedTextureSubImage1DEXTType )( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glGetCompressedTextureImageEXTType )( GLuint texture, GLenum target, GLint lod, void *img );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedMultiTexImage3DEXTType )( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedMultiTexImage2DEXTType )( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedMultiTexImage1DEXTType )( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedMultiTexSubImage3DEXTType )( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedMultiTexSubImage2DEXTType )( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glCompressedMultiTexSubImage1DEXTType )( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits );
typedef void ( NN_GLL_GL_APIENTRY *glGetCompressedMultiTexImageEXTType )( GLenum texunit, GLenum target, GLint lod, void *img );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixLoadTransposefEXTType )( GLenum mode, const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixLoadTransposedEXTType )( GLenum mode, const GLdouble *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixMultTransposefEXTType )( GLenum mode, const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixMultTransposedEXTType )( GLenum mode, const GLdouble *m );
typedef void ( NN_GLL_GL_APIENTRY *glNamedBufferDataEXTType )( GLuint buffer, GLsizeiptr size, const void *data, GLenum usage );
typedef void ( NN_GLL_GL_APIENTRY *glNamedBufferSubDataEXTType )( GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
typedef void *( NN_GLL_GL_APIENTRY *glMapNamedBufferEXTType )( GLuint buffer, GLenum access );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glUnmapNamedBufferEXTType )( GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedBufferParameterivEXTType )( GLuint buffer, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedBufferPointervEXTType )( GLuint buffer, GLenum pname, void **params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedBufferSubDataEXTType )( GLuint buffer, GLintptr offset, GLsizeiptr size, void *data );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1fEXTType )( GLuint program, GLint location, GLfloat v0 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2fEXTType )( GLuint program, GLint location, GLfloat v0, GLfloat v1 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3fEXTType )( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4fEXTType )( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1iEXTType )( GLuint program, GLint location, GLint v0 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2iEXTType )( GLuint program, GLint location, GLint v0, GLint v1 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3iEXTType )( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4iEXTType )( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1fvEXTType )( GLuint program, GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2fvEXTType )( GLuint program, GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3fvEXTType )( GLuint program, GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4fvEXTType )( GLuint program, GLint location, GLsizei count, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1ivEXTType )( GLuint program, GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2ivEXTType )( GLuint program, GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3ivEXTType )( GLuint program, GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4ivEXTType )( GLuint program, GLint location, GLsizei count, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2fvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3fvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4fvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2x3fvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3x2fvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2x4fvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4x2fvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3x4fvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4x3fvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glTextureBufferEXTType )( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexBufferEXTType )( GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameterIivEXTType )( GLuint texture, GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glTextureParameterIuivEXTType )( GLuint texture, GLenum target, GLenum pname, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureParameterIivEXTType )( GLuint texture, GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTextureParameterIuivEXTType )( GLuint texture, GLenum target, GLenum pname, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexParameterIivEXTType )( GLenum texunit, GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexParameterIuivEXTType )( GLenum texunit, GLenum target, GLenum pname, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexParameterIivEXTType )( GLenum texunit, GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMultiTexParameterIuivEXTType )( GLenum texunit, GLenum target, GLenum pname, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1uiEXTType )( GLuint program, GLint location, GLuint v0 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2uiEXTType )( GLuint program, GLint location, GLuint v0, GLuint v1 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3uiEXTType )( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4uiEXTType )( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1uivEXTType )( GLuint program, GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2uivEXTType )( GLuint program, GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3uivEXTType )( GLuint program, GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4uivEXTType )( GLuint program, GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramLocalParameters4fvEXTType )( GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramLocalParameterI4iEXTType )( GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramLocalParameterI4ivEXTType )( GLuint program, GLenum target, GLuint index, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramLocalParametersI4ivEXTType )( GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramLocalParameterI4uiEXTType )( GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramLocalParameterI4uivEXTType )( GLuint program, GLenum target, GLuint index, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramLocalParametersI4uivEXTType )( GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedProgramLocalParameterIivEXTType )( GLuint program, GLenum target, GLuint index, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedProgramLocalParameterIuivEXTType )( GLuint program, GLenum target, GLuint index, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glEnableClientStateiEXTType )( GLenum array, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glDisableClientStateiEXTType )( GLenum array, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glGetFloati_vEXTType )( GLenum pname, GLuint index, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetDoublei_vEXTType )( GLenum pname, GLuint index, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetPointeri_vEXTType )( GLenum pname, GLuint index, void **params );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramStringEXTType )( GLuint program, GLenum target, GLenum format, GLsizei len, const void *string );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramLocalParameter4dEXTType )( GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramLocalParameter4dvEXTType )( GLuint program, GLenum target, GLuint index, const GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramLocalParameter4fEXTType )( GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glNamedProgramLocalParameter4fvEXTType )( GLuint program, GLenum target, GLuint index, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedProgramLocalParameterdvEXTType )( GLuint program, GLenum target, GLuint index, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedProgramLocalParameterfvEXTType )( GLuint program, GLenum target, GLuint index, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedProgramivEXTType )( GLuint program, GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedProgramStringEXTType )( GLuint program, GLenum target, GLenum pname, void *string );
typedef void ( NN_GLL_GL_APIENTRY *glNamedRenderbufferStorageEXTType )( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedRenderbufferParameterivEXTType )( GLuint renderbuffer, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glNamedRenderbufferStorageMultisampleEXTType )( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glNamedRenderbufferStorageMultisampleCoverageEXTType )( GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height );
typedef GLenum ( NN_GLL_GL_APIENTRY *glCheckNamedFramebufferStatusEXTType )( GLuint framebuffer, GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferTexture1DEXTType )( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferTexture2DEXTType )( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferTexture3DEXTType )( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferRenderbufferEXTType )( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedFramebufferAttachmentParameterivEXTType )( GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGenerateTextureMipmapEXTType )( GLuint texture, GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glGenerateMultiTexMipmapEXTType )( GLenum texunit, GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferDrawBufferEXTType )( GLuint framebuffer, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferDrawBuffersEXTType )( GLuint framebuffer, GLsizei n, const GLenum *bufs );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferReadBufferEXTType )( GLuint framebuffer, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glGetFramebufferParameterivEXTType )( GLuint framebuffer, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glNamedCopyBufferSubDataEXTType )( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferTextureEXTType )( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferTextureLayerEXTType )( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferTextureFaceEXTType )( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face );
typedef void ( NN_GLL_GL_APIENTRY *glTextureRenderbufferEXTType )( GLuint texture, GLenum target, GLuint renderbuffer );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexRenderbufferEXTType )( GLenum texunit, GLenum target, GLuint renderbuffer );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexOffsetEXTType )( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayColorOffsetEXTType )( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayEdgeFlagOffsetEXTType )( GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayIndexOffsetEXTType )( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayNormalOffsetEXTType )( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayTexCoordOffsetEXTType )( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayMultiTexCoordOffsetEXTType )( GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayFogCoordOffsetEXTType )( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArraySecondaryColorOffsetEXTType )( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexAttribOffsetEXTType )( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexAttribIOffsetEXTType )( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glEnableVertexArrayEXTType )( GLuint vaobj, GLenum array );
typedef void ( NN_GLL_GL_APIENTRY *glDisableVertexArrayEXTType )( GLuint vaobj, GLenum array );
typedef void ( NN_GLL_GL_APIENTRY *glEnableVertexArrayAttribEXTType )( GLuint vaobj, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glDisableVertexArrayAttribEXTType )( GLuint vaobj, GLuint index );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexArrayIntegervEXTType )( GLuint vaobj, GLenum pname, GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexArrayPointervEXTType )( GLuint vaobj, GLenum pname, void **param );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexArrayIntegeri_vEXTType )( GLuint vaobj, GLuint index, GLenum pname, GLint *param );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexArrayPointeri_vEXTType )( GLuint vaobj, GLuint index, GLenum pname, void **param );
typedef void *( NN_GLL_GL_APIENTRY *glMapNamedBufferRangeEXTType )( GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access );
typedef void ( NN_GLL_GL_APIENTRY *glFlushMappedNamedBufferRangeEXTType )( GLuint buffer, GLintptr offset, GLsizeiptr length );
typedef void ( NN_GLL_GL_APIENTRY *glNamedBufferStorageEXTType )( GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags );
typedef void ( NN_GLL_GL_APIENTRY *glClearNamedBufferDataEXTType )( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glClearNamedBufferSubDataEXTType )( GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferParameteriEXTType )( GLuint framebuffer, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedFramebufferParameterivEXTType )( GLuint framebuffer, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1dEXTType )( GLuint program, GLint location, GLdouble x );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2dEXTType )( GLuint program, GLint location, GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3dEXTType )( GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4dEXTType )( GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform1dvEXTType )( GLuint program, GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform2dvEXTType )( GLuint program, GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform3dvEXTType )( GLuint program, GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniform4dvEXTType )( GLuint program, GLint location, GLsizei count, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2dvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3dvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4dvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2x3dvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix2x4dvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3x2dvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix3x4dvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4x2dvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformMatrix4x3dvEXTType )( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value );
typedef void ( NN_GLL_GL_APIENTRY *glTextureBufferRangeEXTType )( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorage1DEXTType )( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorage2DEXTType )( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorage3DEXTType )( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorage2DMultisampleEXTType )( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorage3DMultisampleEXTType )( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayBindVertexBufferEXTType )( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexAttribFormatEXTType )( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexAttribIFormatEXTType )( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexAttribLFormatEXTType )( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexAttribBindingEXTType )( GLuint vaobj, GLuint attribindex, GLuint bindingindex );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexBindingDivisorEXTType )( GLuint vaobj, GLuint bindingindex, GLuint divisor );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexAttribLOffsetEXTType )( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glTexturePageCommitmentEXTType )( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayVertexAttribDivisorEXTType )( GLuint vaobj, GLuint index, GLuint divisor );
#define glMatrixLoadfEXT g_nngllMatrixLoadfEXT
#define glMatrixLoaddEXT g_nngllMatrixLoaddEXT
#define glMatrixMultfEXT g_nngllMatrixMultfEXT
#define glMatrixMultdEXT g_nngllMatrixMultdEXT
#define glMatrixLoadIdentityEXT g_nngllMatrixLoadIdentityEXT
#define glMatrixRotatefEXT g_nngllMatrixRotatefEXT
#define glMatrixRotatedEXT g_nngllMatrixRotatedEXT
#define glMatrixScalefEXT g_nngllMatrixScalefEXT
#define glMatrixScaledEXT g_nngllMatrixScaledEXT
#define glMatrixTranslatefEXT g_nngllMatrixTranslatefEXT
#define glMatrixTranslatedEXT g_nngllMatrixTranslatedEXT
#define glMatrixFrustumEXT g_nngllMatrixFrustumEXT
#define glMatrixOrthoEXT g_nngllMatrixOrthoEXT
#define glMatrixPopEXT g_nngllMatrixPopEXT
#define glMatrixPushEXT g_nngllMatrixPushEXT
#define glClientAttribDefaultEXT g_nngllClientAttribDefaultEXT
#define glPushClientAttribDefaultEXT g_nngllPushClientAttribDefaultEXT
#define glTextureParameterfEXT g_nngllTextureParameterfEXT
#define glTextureParameterfvEXT g_nngllTextureParameterfvEXT
#define glTextureParameteriEXT g_nngllTextureParameteriEXT
#define glTextureParameterivEXT g_nngllTextureParameterivEXT
#define glTextureImage1DEXT g_nngllTextureImage1DEXT
#define glTextureImage2DEXT g_nngllTextureImage2DEXT
#define glTextureSubImage1DEXT g_nngllTextureSubImage1DEXT
#define glTextureSubImage2DEXT g_nngllTextureSubImage2DEXT
#define glCopyTextureImage1DEXT g_nngllCopyTextureImage1DEXT
#define glCopyTextureImage2DEXT g_nngllCopyTextureImage2DEXT
#define glCopyTextureSubImage1DEXT g_nngllCopyTextureSubImage1DEXT
#define glCopyTextureSubImage2DEXT g_nngllCopyTextureSubImage2DEXT
#define glGetTextureImageEXT g_nngllGetTextureImageEXT
#define glGetTextureParameterfvEXT g_nngllGetTextureParameterfvEXT
#define glGetTextureParameterivEXT g_nngllGetTextureParameterivEXT
#define glGetTextureLevelParameterfvEXT g_nngllGetTextureLevelParameterfvEXT
#define glGetTextureLevelParameterivEXT g_nngllGetTextureLevelParameterivEXT
#define glTextureImage3DEXT g_nngllTextureImage3DEXT
#define glTextureSubImage3DEXT g_nngllTextureSubImage3DEXT
#define glCopyTextureSubImage3DEXT g_nngllCopyTextureSubImage3DEXT
#define glBindMultiTextureEXT g_nngllBindMultiTextureEXT
#define glMultiTexCoordPointerEXT g_nngllMultiTexCoordPointerEXT
#define glMultiTexEnvfEXT g_nngllMultiTexEnvfEXT
#define glMultiTexEnvfvEXT g_nngllMultiTexEnvfvEXT
#define glMultiTexEnviEXT g_nngllMultiTexEnviEXT
#define glMultiTexEnvivEXT g_nngllMultiTexEnvivEXT
#define glMultiTexGendEXT g_nngllMultiTexGendEXT
#define glMultiTexGendvEXT g_nngllMultiTexGendvEXT
#define glMultiTexGenfEXT g_nngllMultiTexGenfEXT
#define glMultiTexGenfvEXT g_nngllMultiTexGenfvEXT
#define glMultiTexGeniEXT g_nngllMultiTexGeniEXT
#define glMultiTexGenivEXT g_nngllMultiTexGenivEXT
#define glGetMultiTexEnvfvEXT g_nngllGetMultiTexEnvfvEXT
#define glGetMultiTexEnvivEXT g_nngllGetMultiTexEnvivEXT
#define glGetMultiTexGendvEXT g_nngllGetMultiTexGendvEXT
#define glGetMultiTexGenfvEXT g_nngllGetMultiTexGenfvEXT
#define glGetMultiTexGenivEXT g_nngllGetMultiTexGenivEXT
#define glMultiTexParameteriEXT g_nngllMultiTexParameteriEXT
#define glMultiTexParameterivEXT g_nngllMultiTexParameterivEXT
#define glMultiTexParameterfEXT g_nngllMultiTexParameterfEXT
#define glMultiTexParameterfvEXT g_nngllMultiTexParameterfvEXT
#define glMultiTexImage1DEXT g_nngllMultiTexImage1DEXT
#define glMultiTexImage2DEXT g_nngllMultiTexImage2DEXT
#define glMultiTexSubImage1DEXT g_nngllMultiTexSubImage1DEXT
#define glMultiTexSubImage2DEXT g_nngllMultiTexSubImage2DEXT
#define glCopyMultiTexImage1DEXT g_nngllCopyMultiTexImage1DEXT
#define glCopyMultiTexImage2DEXT g_nngllCopyMultiTexImage2DEXT
#define glCopyMultiTexSubImage1DEXT g_nngllCopyMultiTexSubImage1DEXT
#define glCopyMultiTexSubImage2DEXT g_nngllCopyMultiTexSubImage2DEXT
#define glGetMultiTexImageEXT g_nngllGetMultiTexImageEXT
#define glGetMultiTexParameterfvEXT g_nngllGetMultiTexParameterfvEXT
#define glGetMultiTexParameterivEXT g_nngllGetMultiTexParameterivEXT
#define glGetMultiTexLevelParameterfvEXT g_nngllGetMultiTexLevelParameterfvEXT
#define glGetMultiTexLevelParameterivEXT g_nngllGetMultiTexLevelParameterivEXT
#define glMultiTexImage3DEXT g_nngllMultiTexImage3DEXT
#define glMultiTexSubImage3DEXT g_nngllMultiTexSubImage3DEXT
#define glCopyMultiTexSubImage3DEXT g_nngllCopyMultiTexSubImage3DEXT
#define glEnableClientStateIndexedEXT g_nngllEnableClientStateIndexedEXT
#define glDisableClientStateIndexedEXT g_nngllDisableClientStateIndexedEXT
#define glGetFloatIndexedvEXT g_nngllGetFloatIndexedvEXT
#define glGetDoubleIndexedvEXT g_nngllGetDoubleIndexedvEXT
#define glGetPointerIndexedvEXT g_nngllGetPointerIndexedvEXT
#define glEnableIndexedEXT g_nngllEnableIndexedEXT
#define glDisableIndexedEXT g_nngllDisableIndexedEXT
#define glIsEnabledIndexedEXT g_nngllIsEnabledIndexedEXT
#define glGetIntegerIndexedvEXT g_nngllGetIntegerIndexedvEXT
#define glGetBooleanIndexedvEXT g_nngllGetBooleanIndexedvEXT
#define glCompressedTextureImage3DEXT g_nngllCompressedTextureImage3DEXT
#define glCompressedTextureImage2DEXT g_nngllCompressedTextureImage2DEXT
#define glCompressedTextureImage1DEXT g_nngllCompressedTextureImage1DEXT
#define glCompressedTextureSubImage3DEXT g_nngllCompressedTextureSubImage3DEXT
#define glCompressedTextureSubImage2DEXT g_nngllCompressedTextureSubImage2DEXT
#define glCompressedTextureSubImage1DEXT g_nngllCompressedTextureSubImage1DEXT
#define glGetCompressedTextureImageEXT g_nngllGetCompressedTextureImageEXT
#define glCompressedMultiTexImage3DEXT g_nngllCompressedMultiTexImage3DEXT
#define glCompressedMultiTexImage2DEXT g_nngllCompressedMultiTexImage2DEXT
#define glCompressedMultiTexImage1DEXT g_nngllCompressedMultiTexImage1DEXT
#define glCompressedMultiTexSubImage3DEXT g_nngllCompressedMultiTexSubImage3DEXT
#define glCompressedMultiTexSubImage2DEXT g_nngllCompressedMultiTexSubImage2DEXT
#define glCompressedMultiTexSubImage1DEXT g_nngllCompressedMultiTexSubImage1DEXT
#define glGetCompressedMultiTexImageEXT g_nngllGetCompressedMultiTexImageEXT
#define glMatrixLoadTransposefEXT g_nngllMatrixLoadTransposefEXT
#define glMatrixLoadTransposedEXT g_nngllMatrixLoadTransposedEXT
#define glMatrixMultTransposefEXT g_nngllMatrixMultTransposefEXT
#define glMatrixMultTransposedEXT g_nngllMatrixMultTransposedEXT
#define glNamedBufferDataEXT g_nngllNamedBufferDataEXT
#define glNamedBufferSubDataEXT g_nngllNamedBufferSubDataEXT
#define glMapNamedBufferEXT g_nngllMapNamedBufferEXT
#define glUnmapNamedBufferEXT g_nngllUnmapNamedBufferEXT
#define glGetNamedBufferParameterivEXT g_nngllGetNamedBufferParameterivEXT
#define glGetNamedBufferPointervEXT g_nngllGetNamedBufferPointervEXT
#define glGetNamedBufferSubDataEXT g_nngllGetNamedBufferSubDataEXT
#define glProgramUniform1fEXT g_nngllProgramUniform1fEXT
#define glProgramUniform2fEXT g_nngllProgramUniform2fEXT
#define glProgramUniform3fEXT g_nngllProgramUniform3fEXT
#define glProgramUniform4fEXT g_nngllProgramUniform4fEXT
#define glProgramUniform1iEXT g_nngllProgramUniform1iEXT
#define glProgramUniform2iEXT g_nngllProgramUniform2iEXT
#define glProgramUniform3iEXT g_nngllProgramUniform3iEXT
#define glProgramUniform4iEXT g_nngllProgramUniform4iEXT
#define glProgramUniform1fvEXT g_nngllProgramUniform1fvEXT
#define glProgramUniform2fvEXT g_nngllProgramUniform2fvEXT
#define glProgramUniform3fvEXT g_nngllProgramUniform3fvEXT
#define glProgramUniform4fvEXT g_nngllProgramUniform4fvEXT
#define glProgramUniform1ivEXT g_nngllProgramUniform1ivEXT
#define glProgramUniform2ivEXT g_nngllProgramUniform2ivEXT
#define glProgramUniform3ivEXT g_nngllProgramUniform3ivEXT
#define glProgramUniform4ivEXT g_nngllProgramUniform4ivEXT
#define glProgramUniformMatrix2fvEXT g_nngllProgramUniformMatrix2fvEXT
#define glProgramUniformMatrix3fvEXT g_nngllProgramUniformMatrix3fvEXT
#define glProgramUniformMatrix4fvEXT g_nngllProgramUniformMatrix4fvEXT
#define glProgramUniformMatrix2x3fvEXT g_nngllProgramUniformMatrix2x3fvEXT
#define glProgramUniformMatrix3x2fvEXT g_nngllProgramUniformMatrix3x2fvEXT
#define glProgramUniformMatrix2x4fvEXT g_nngllProgramUniformMatrix2x4fvEXT
#define glProgramUniformMatrix4x2fvEXT g_nngllProgramUniformMatrix4x2fvEXT
#define glProgramUniformMatrix3x4fvEXT g_nngllProgramUniformMatrix3x4fvEXT
#define glProgramUniformMatrix4x3fvEXT g_nngllProgramUniformMatrix4x3fvEXT
#define glTextureBufferEXT g_nngllTextureBufferEXT
#define glMultiTexBufferEXT g_nngllMultiTexBufferEXT
#define glTextureParameterIivEXT g_nngllTextureParameterIivEXT
#define glTextureParameterIuivEXT g_nngllTextureParameterIuivEXT
#define glGetTextureParameterIivEXT g_nngllGetTextureParameterIivEXT
#define glGetTextureParameterIuivEXT g_nngllGetTextureParameterIuivEXT
#define glMultiTexParameterIivEXT g_nngllMultiTexParameterIivEXT
#define glMultiTexParameterIuivEXT g_nngllMultiTexParameterIuivEXT
#define glGetMultiTexParameterIivEXT g_nngllGetMultiTexParameterIivEXT
#define glGetMultiTexParameterIuivEXT g_nngllGetMultiTexParameterIuivEXT
#define glProgramUniform1uiEXT g_nngllProgramUniform1uiEXT
#define glProgramUniform2uiEXT g_nngllProgramUniform2uiEXT
#define glProgramUniform3uiEXT g_nngllProgramUniform3uiEXT
#define glProgramUniform4uiEXT g_nngllProgramUniform4uiEXT
#define glProgramUniform1uivEXT g_nngllProgramUniform1uivEXT
#define glProgramUniform2uivEXT g_nngllProgramUniform2uivEXT
#define glProgramUniform3uivEXT g_nngllProgramUniform3uivEXT
#define glProgramUniform4uivEXT g_nngllProgramUniform4uivEXT
#define glNamedProgramLocalParameters4fvEXT g_nngllNamedProgramLocalParameters4fvEXT
#define glNamedProgramLocalParameterI4iEXT g_nngllNamedProgramLocalParameterI4iEXT
#define glNamedProgramLocalParameterI4ivEXT g_nngllNamedProgramLocalParameterI4ivEXT
#define glNamedProgramLocalParametersI4ivEXT g_nngllNamedProgramLocalParametersI4ivEXT
#define glNamedProgramLocalParameterI4uiEXT g_nngllNamedProgramLocalParameterI4uiEXT
#define glNamedProgramLocalParameterI4uivEXT g_nngllNamedProgramLocalParameterI4uivEXT
#define glNamedProgramLocalParametersI4uivEXT g_nngllNamedProgramLocalParametersI4uivEXT
#define glGetNamedProgramLocalParameterIivEXT g_nngllGetNamedProgramLocalParameterIivEXT
#define glGetNamedProgramLocalParameterIuivEXT g_nngllGetNamedProgramLocalParameterIuivEXT
#define glEnableClientStateiEXT g_nngllEnableClientStateiEXT
#define glDisableClientStateiEXT g_nngllDisableClientStateiEXT
#define glGetFloati_vEXT g_nngllGetFloati_vEXT
#define glGetDoublei_vEXT g_nngllGetDoublei_vEXT
#define glGetPointeri_vEXT g_nngllGetPointeri_vEXT
#define glNamedProgramStringEXT g_nngllNamedProgramStringEXT
#define glNamedProgramLocalParameter4dEXT g_nngllNamedProgramLocalParameter4dEXT
#define glNamedProgramLocalParameter4dvEXT g_nngllNamedProgramLocalParameter4dvEXT
#define glNamedProgramLocalParameter4fEXT g_nngllNamedProgramLocalParameter4fEXT
#define glNamedProgramLocalParameter4fvEXT g_nngllNamedProgramLocalParameter4fvEXT
#define glGetNamedProgramLocalParameterdvEXT g_nngllGetNamedProgramLocalParameterdvEXT
#define glGetNamedProgramLocalParameterfvEXT g_nngllGetNamedProgramLocalParameterfvEXT
#define glGetNamedProgramivEXT g_nngllGetNamedProgramivEXT
#define glGetNamedProgramStringEXT g_nngllGetNamedProgramStringEXT
#define glNamedRenderbufferStorageEXT g_nngllNamedRenderbufferStorageEXT
#define glGetNamedRenderbufferParameterivEXT g_nngllGetNamedRenderbufferParameterivEXT
#define glNamedRenderbufferStorageMultisampleEXT g_nngllNamedRenderbufferStorageMultisampleEXT
#define glNamedRenderbufferStorageMultisampleCoverageEXT g_nngllNamedRenderbufferStorageMultisampleCoverageEXT
#define glCheckNamedFramebufferStatusEXT g_nngllCheckNamedFramebufferStatusEXT
#define glNamedFramebufferTexture1DEXT g_nngllNamedFramebufferTexture1DEXT
#define glNamedFramebufferTexture2DEXT g_nngllNamedFramebufferTexture2DEXT
#define glNamedFramebufferTexture3DEXT g_nngllNamedFramebufferTexture3DEXT
#define glNamedFramebufferRenderbufferEXT g_nngllNamedFramebufferRenderbufferEXT
#define glGetNamedFramebufferAttachmentParameterivEXT g_nngllGetNamedFramebufferAttachmentParameterivEXT
#define glGenerateTextureMipmapEXT g_nngllGenerateTextureMipmapEXT
#define glGenerateMultiTexMipmapEXT g_nngllGenerateMultiTexMipmapEXT
#define glFramebufferDrawBufferEXT g_nngllFramebufferDrawBufferEXT
#define glFramebufferDrawBuffersEXT g_nngllFramebufferDrawBuffersEXT
#define glFramebufferReadBufferEXT g_nngllFramebufferReadBufferEXT
#define glGetFramebufferParameterivEXT g_nngllGetFramebufferParameterivEXT
#define glNamedCopyBufferSubDataEXT g_nngllNamedCopyBufferSubDataEXT
#define glNamedFramebufferTextureEXT g_nngllNamedFramebufferTextureEXT
#define glNamedFramebufferTextureLayerEXT g_nngllNamedFramebufferTextureLayerEXT
#define glNamedFramebufferTextureFaceEXT g_nngllNamedFramebufferTextureFaceEXT
#define glTextureRenderbufferEXT g_nngllTextureRenderbufferEXT
#define glMultiTexRenderbufferEXT g_nngllMultiTexRenderbufferEXT
#define glVertexArrayVertexOffsetEXT g_nngllVertexArrayVertexOffsetEXT
#define glVertexArrayColorOffsetEXT g_nngllVertexArrayColorOffsetEXT
#define glVertexArrayEdgeFlagOffsetEXT g_nngllVertexArrayEdgeFlagOffsetEXT
#define glVertexArrayIndexOffsetEXT g_nngllVertexArrayIndexOffsetEXT
#define glVertexArrayNormalOffsetEXT g_nngllVertexArrayNormalOffsetEXT
#define glVertexArrayTexCoordOffsetEXT g_nngllVertexArrayTexCoordOffsetEXT
#define glVertexArrayMultiTexCoordOffsetEXT g_nngllVertexArrayMultiTexCoordOffsetEXT
#define glVertexArrayFogCoordOffsetEXT g_nngllVertexArrayFogCoordOffsetEXT
#define glVertexArraySecondaryColorOffsetEXT g_nngllVertexArraySecondaryColorOffsetEXT
#define glVertexArrayVertexAttribOffsetEXT g_nngllVertexArrayVertexAttribOffsetEXT
#define glVertexArrayVertexAttribIOffsetEXT g_nngllVertexArrayVertexAttribIOffsetEXT
#define glEnableVertexArrayEXT g_nngllEnableVertexArrayEXT
#define glDisableVertexArrayEXT g_nngllDisableVertexArrayEXT
#define glEnableVertexArrayAttribEXT g_nngllEnableVertexArrayAttribEXT
#define glDisableVertexArrayAttribEXT g_nngllDisableVertexArrayAttribEXT
#define glGetVertexArrayIntegervEXT g_nngllGetVertexArrayIntegervEXT
#define glGetVertexArrayPointervEXT g_nngllGetVertexArrayPointervEXT
#define glGetVertexArrayIntegeri_vEXT g_nngllGetVertexArrayIntegeri_vEXT
#define glGetVertexArrayPointeri_vEXT g_nngllGetVertexArrayPointeri_vEXT
#define glMapNamedBufferRangeEXT g_nngllMapNamedBufferRangeEXT
#define glFlushMappedNamedBufferRangeEXT g_nngllFlushMappedNamedBufferRangeEXT
#define glNamedBufferStorageEXT g_nngllNamedBufferStorageEXT
#define glClearNamedBufferDataEXT g_nngllClearNamedBufferDataEXT
#define glClearNamedBufferSubDataEXT g_nngllClearNamedBufferSubDataEXT
#define glNamedFramebufferParameteriEXT g_nngllNamedFramebufferParameteriEXT
#define glGetNamedFramebufferParameterivEXT g_nngllGetNamedFramebufferParameterivEXT
#define glProgramUniform1dEXT g_nngllProgramUniform1dEXT
#define glProgramUniform2dEXT g_nngllProgramUniform2dEXT
#define glProgramUniform3dEXT g_nngllProgramUniform3dEXT
#define glProgramUniform4dEXT g_nngllProgramUniform4dEXT
#define glProgramUniform1dvEXT g_nngllProgramUniform1dvEXT
#define glProgramUniform2dvEXT g_nngllProgramUniform2dvEXT
#define glProgramUniform3dvEXT g_nngllProgramUniform3dvEXT
#define glProgramUniform4dvEXT g_nngllProgramUniform4dvEXT
#define glProgramUniformMatrix2dvEXT g_nngllProgramUniformMatrix2dvEXT
#define glProgramUniformMatrix3dvEXT g_nngllProgramUniformMatrix3dvEXT
#define glProgramUniformMatrix4dvEXT g_nngllProgramUniformMatrix4dvEXT
#define glProgramUniformMatrix2x3dvEXT g_nngllProgramUniformMatrix2x3dvEXT
#define glProgramUniformMatrix2x4dvEXT g_nngllProgramUniformMatrix2x4dvEXT
#define glProgramUniformMatrix3x2dvEXT g_nngllProgramUniformMatrix3x2dvEXT
#define glProgramUniformMatrix3x4dvEXT g_nngllProgramUniformMatrix3x4dvEXT
#define glProgramUniformMatrix4x2dvEXT g_nngllProgramUniformMatrix4x2dvEXT
#define glProgramUniformMatrix4x3dvEXT g_nngllProgramUniformMatrix4x3dvEXT
#define glTextureBufferRangeEXT g_nngllTextureBufferRangeEXT
#define glTextureStorage1DEXT g_nngllTextureStorage1DEXT
#define glTextureStorage2DEXT g_nngllTextureStorage2DEXT
#define glTextureStorage3DEXT g_nngllTextureStorage3DEXT
#define glTextureStorage2DMultisampleEXT g_nngllTextureStorage2DMultisampleEXT
#define glTextureStorage3DMultisampleEXT g_nngllTextureStorage3DMultisampleEXT
#define glVertexArrayBindVertexBufferEXT g_nngllVertexArrayBindVertexBufferEXT
#define glVertexArrayVertexAttribFormatEXT g_nngllVertexArrayVertexAttribFormatEXT
#define glVertexArrayVertexAttribIFormatEXT g_nngllVertexArrayVertexAttribIFormatEXT
#define glVertexArrayVertexAttribLFormatEXT g_nngllVertexArrayVertexAttribLFormatEXT
#define glVertexArrayVertexAttribBindingEXT g_nngllVertexArrayVertexAttribBindingEXT
#define glVertexArrayVertexBindingDivisorEXT g_nngllVertexArrayVertexBindingDivisorEXT
#define glVertexArrayVertexAttribLOffsetEXT g_nngllVertexArrayVertexAttribLOffsetEXT
#define glTexturePageCommitmentEXT g_nngllTexturePageCommitmentEXT
#define glVertexArrayVertexAttribDivisorEXT g_nngllVertexArrayVertexAttribDivisorEXT
NN_GLL_API glMatrixLoadfEXTType g_nngllMatrixLoadfEXT;
NN_GLL_API glMatrixLoaddEXTType g_nngllMatrixLoaddEXT;
NN_GLL_API glMatrixMultfEXTType g_nngllMatrixMultfEXT;
NN_GLL_API glMatrixMultdEXTType g_nngllMatrixMultdEXT;
NN_GLL_API glMatrixLoadIdentityEXTType g_nngllMatrixLoadIdentityEXT;
NN_GLL_API glMatrixRotatefEXTType g_nngllMatrixRotatefEXT;
NN_GLL_API glMatrixRotatedEXTType g_nngllMatrixRotatedEXT;
NN_GLL_API glMatrixScalefEXTType g_nngllMatrixScalefEXT;
NN_GLL_API glMatrixScaledEXTType g_nngllMatrixScaledEXT;
NN_GLL_API glMatrixTranslatefEXTType g_nngllMatrixTranslatefEXT;
NN_GLL_API glMatrixTranslatedEXTType g_nngllMatrixTranslatedEXT;
NN_GLL_API glMatrixFrustumEXTType g_nngllMatrixFrustumEXT;
NN_GLL_API glMatrixOrthoEXTType g_nngllMatrixOrthoEXT;
NN_GLL_API glMatrixPopEXTType g_nngllMatrixPopEXT;
NN_GLL_API glMatrixPushEXTType g_nngllMatrixPushEXT;
NN_GLL_API glClientAttribDefaultEXTType g_nngllClientAttribDefaultEXT;
NN_GLL_API glPushClientAttribDefaultEXTType g_nngllPushClientAttribDefaultEXT;
NN_GLL_API glTextureParameterfEXTType g_nngllTextureParameterfEXT;
NN_GLL_API glTextureParameterfvEXTType g_nngllTextureParameterfvEXT;
NN_GLL_API glTextureParameteriEXTType g_nngllTextureParameteriEXT;
NN_GLL_API glTextureParameterivEXTType g_nngllTextureParameterivEXT;
NN_GLL_API glTextureImage1DEXTType g_nngllTextureImage1DEXT;
NN_GLL_API glTextureImage2DEXTType g_nngllTextureImage2DEXT;
NN_GLL_API glTextureSubImage1DEXTType g_nngllTextureSubImage1DEXT;
NN_GLL_API glTextureSubImage2DEXTType g_nngllTextureSubImage2DEXT;
NN_GLL_API glCopyTextureImage1DEXTType g_nngllCopyTextureImage1DEXT;
NN_GLL_API glCopyTextureImage2DEXTType g_nngllCopyTextureImage2DEXT;
NN_GLL_API glCopyTextureSubImage1DEXTType g_nngllCopyTextureSubImage1DEXT;
NN_GLL_API glCopyTextureSubImage2DEXTType g_nngllCopyTextureSubImage2DEXT;
NN_GLL_API glGetTextureImageEXTType g_nngllGetTextureImageEXT;
NN_GLL_API glGetTextureParameterfvEXTType g_nngllGetTextureParameterfvEXT;
NN_GLL_API glGetTextureParameterivEXTType g_nngllGetTextureParameterivEXT;
NN_GLL_API glGetTextureLevelParameterfvEXTType g_nngllGetTextureLevelParameterfvEXT;
NN_GLL_API glGetTextureLevelParameterivEXTType g_nngllGetTextureLevelParameterivEXT;
NN_GLL_API glTextureImage3DEXTType g_nngllTextureImage3DEXT;
NN_GLL_API glTextureSubImage3DEXTType g_nngllTextureSubImage3DEXT;
NN_GLL_API glCopyTextureSubImage3DEXTType g_nngllCopyTextureSubImage3DEXT;
NN_GLL_API glBindMultiTextureEXTType g_nngllBindMultiTextureEXT;
NN_GLL_API glMultiTexCoordPointerEXTType g_nngllMultiTexCoordPointerEXT;
NN_GLL_API glMultiTexEnvfEXTType g_nngllMultiTexEnvfEXT;
NN_GLL_API glMultiTexEnvfvEXTType g_nngllMultiTexEnvfvEXT;
NN_GLL_API glMultiTexEnviEXTType g_nngllMultiTexEnviEXT;
NN_GLL_API glMultiTexEnvivEXTType g_nngllMultiTexEnvivEXT;
NN_GLL_API glMultiTexGendEXTType g_nngllMultiTexGendEXT;
NN_GLL_API glMultiTexGendvEXTType g_nngllMultiTexGendvEXT;
NN_GLL_API glMultiTexGenfEXTType g_nngllMultiTexGenfEXT;
NN_GLL_API glMultiTexGenfvEXTType g_nngllMultiTexGenfvEXT;
NN_GLL_API glMultiTexGeniEXTType g_nngllMultiTexGeniEXT;
NN_GLL_API glMultiTexGenivEXTType g_nngllMultiTexGenivEXT;
NN_GLL_API glGetMultiTexEnvfvEXTType g_nngllGetMultiTexEnvfvEXT;
NN_GLL_API glGetMultiTexEnvivEXTType g_nngllGetMultiTexEnvivEXT;
NN_GLL_API glGetMultiTexGendvEXTType g_nngllGetMultiTexGendvEXT;
NN_GLL_API glGetMultiTexGenfvEXTType g_nngllGetMultiTexGenfvEXT;
NN_GLL_API glGetMultiTexGenivEXTType g_nngllGetMultiTexGenivEXT;
NN_GLL_API glMultiTexParameteriEXTType g_nngllMultiTexParameteriEXT;
NN_GLL_API glMultiTexParameterivEXTType g_nngllMultiTexParameterivEXT;
NN_GLL_API glMultiTexParameterfEXTType g_nngllMultiTexParameterfEXT;
NN_GLL_API glMultiTexParameterfvEXTType g_nngllMultiTexParameterfvEXT;
NN_GLL_API glMultiTexImage1DEXTType g_nngllMultiTexImage1DEXT;
NN_GLL_API glMultiTexImage2DEXTType g_nngllMultiTexImage2DEXT;
NN_GLL_API glMultiTexSubImage1DEXTType g_nngllMultiTexSubImage1DEXT;
NN_GLL_API glMultiTexSubImage2DEXTType g_nngllMultiTexSubImage2DEXT;
NN_GLL_API glCopyMultiTexImage1DEXTType g_nngllCopyMultiTexImage1DEXT;
NN_GLL_API glCopyMultiTexImage2DEXTType g_nngllCopyMultiTexImage2DEXT;
NN_GLL_API glCopyMultiTexSubImage1DEXTType g_nngllCopyMultiTexSubImage1DEXT;
NN_GLL_API glCopyMultiTexSubImage2DEXTType g_nngllCopyMultiTexSubImage2DEXT;
NN_GLL_API glGetMultiTexImageEXTType g_nngllGetMultiTexImageEXT;
NN_GLL_API glGetMultiTexParameterfvEXTType g_nngllGetMultiTexParameterfvEXT;
NN_GLL_API glGetMultiTexParameterivEXTType g_nngllGetMultiTexParameterivEXT;
NN_GLL_API glGetMultiTexLevelParameterfvEXTType g_nngllGetMultiTexLevelParameterfvEXT;
NN_GLL_API glGetMultiTexLevelParameterivEXTType g_nngllGetMultiTexLevelParameterivEXT;
NN_GLL_API glMultiTexImage3DEXTType g_nngllMultiTexImage3DEXT;
NN_GLL_API glMultiTexSubImage3DEXTType g_nngllMultiTexSubImage3DEXT;
NN_GLL_API glCopyMultiTexSubImage3DEXTType g_nngllCopyMultiTexSubImage3DEXT;
NN_GLL_API glEnableClientStateIndexedEXTType g_nngllEnableClientStateIndexedEXT;
NN_GLL_API glDisableClientStateIndexedEXTType g_nngllDisableClientStateIndexedEXT;
NN_GLL_API glGetFloatIndexedvEXTType g_nngllGetFloatIndexedvEXT;
NN_GLL_API glGetDoubleIndexedvEXTType g_nngllGetDoubleIndexedvEXT;
NN_GLL_API glGetPointerIndexedvEXTType g_nngllGetPointerIndexedvEXT;
NN_GLL_API glEnableIndexedEXTType g_nngllEnableIndexedEXT;
NN_GLL_API glDisableIndexedEXTType g_nngllDisableIndexedEXT;
NN_GLL_API glIsEnabledIndexedEXTType g_nngllIsEnabledIndexedEXT;
NN_GLL_API glGetIntegerIndexedvEXTType g_nngllGetIntegerIndexedvEXT;
NN_GLL_API glGetBooleanIndexedvEXTType g_nngllGetBooleanIndexedvEXT;
NN_GLL_API glCompressedTextureImage3DEXTType g_nngllCompressedTextureImage3DEXT;
NN_GLL_API glCompressedTextureImage2DEXTType g_nngllCompressedTextureImage2DEXT;
NN_GLL_API glCompressedTextureImage1DEXTType g_nngllCompressedTextureImage1DEXT;
NN_GLL_API glCompressedTextureSubImage3DEXTType g_nngllCompressedTextureSubImage3DEXT;
NN_GLL_API glCompressedTextureSubImage2DEXTType g_nngllCompressedTextureSubImage2DEXT;
NN_GLL_API glCompressedTextureSubImage1DEXTType g_nngllCompressedTextureSubImage1DEXT;
NN_GLL_API glGetCompressedTextureImageEXTType g_nngllGetCompressedTextureImageEXT;
NN_GLL_API glCompressedMultiTexImage3DEXTType g_nngllCompressedMultiTexImage3DEXT;
NN_GLL_API glCompressedMultiTexImage2DEXTType g_nngllCompressedMultiTexImage2DEXT;
NN_GLL_API glCompressedMultiTexImage1DEXTType g_nngllCompressedMultiTexImage1DEXT;
NN_GLL_API glCompressedMultiTexSubImage3DEXTType g_nngllCompressedMultiTexSubImage3DEXT;
NN_GLL_API glCompressedMultiTexSubImage2DEXTType g_nngllCompressedMultiTexSubImage2DEXT;
NN_GLL_API glCompressedMultiTexSubImage1DEXTType g_nngllCompressedMultiTexSubImage1DEXT;
NN_GLL_API glGetCompressedMultiTexImageEXTType g_nngllGetCompressedMultiTexImageEXT;
NN_GLL_API glMatrixLoadTransposefEXTType g_nngllMatrixLoadTransposefEXT;
NN_GLL_API glMatrixLoadTransposedEXTType g_nngllMatrixLoadTransposedEXT;
NN_GLL_API glMatrixMultTransposefEXTType g_nngllMatrixMultTransposefEXT;
NN_GLL_API glMatrixMultTransposedEXTType g_nngllMatrixMultTransposedEXT;
NN_GLL_API glNamedBufferDataEXTType g_nngllNamedBufferDataEXT;
NN_GLL_API glNamedBufferSubDataEXTType g_nngllNamedBufferSubDataEXT;
NN_GLL_API glMapNamedBufferEXTType g_nngllMapNamedBufferEXT;
NN_GLL_API glUnmapNamedBufferEXTType g_nngllUnmapNamedBufferEXT;
NN_GLL_API glGetNamedBufferParameterivEXTType g_nngllGetNamedBufferParameterivEXT;
NN_GLL_API glGetNamedBufferPointervEXTType g_nngllGetNamedBufferPointervEXT;
NN_GLL_API glGetNamedBufferSubDataEXTType g_nngllGetNamedBufferSubDataEXT;
NN_GLL_API glProgramUniform1fEXTType g_nngllProgramUniform1fEXT;
NN_GLL_API glProgramUniform2fEXTType g_nngllProgramUniform2fEXT;
NN_GLL_API glProgramUniform3fEXTType g_nngllProgramUniform3fEXT;
NN_GLL_API glProgramUniform4fEXTType g_nngllProgramUniform4fEXT;
NN_GLL_API glProgramUniform1iEXTType g_nngllProgramUniform1iEXT;
NN_GLL_API glProgramUniform2iEXTType g_nngllProgramUniform2iEXT;
NN_GLL_API glProgramUniform3iEXTType g_nngllProgramUniform3iEXT;
NN_GLL_API glProgramUniform4iEXTType g_nngllProgramUniform4iEXT;
NN_GLL_API glProgramUniform1fvEXTType g_nngllProgramUniform1fvEXT;
NN_GLL_API glProgramUniform2fvEXTType g_nngllProgramUniform2fvEXT;
NN_GLL_API glProgramUniform3fvEXTType g_nngllProgramUniform3fvEXT;
NN_GLL_API glProgramUniform4fvEXTType g_nngllProgramUniform4fvEXT;
NN_GLL_API glProgramUniform1ivEXTType g_nngllProgramUniform1ivEXT;
NN_GLL_API glProgramUniform2ivEXTType g_nngllProgramUniform2ivEXT;
NN_GLL_API glProgramUniform3ivEXTType g_nngllProgramUniform3ivEXT;
NN_GLL_API glProgramUniform4ivEXTType g_nngllProgramUniform4ivEXT;
NN_GLL_API glProgramUniformMatrix2fvEXTType g_nngllProgramUniformMatrix2fvEXT;
NN_GLL_API glProgramUniformMatrix3fvEXTType g_nngllProgramUniformMatrix3fvEXT;
NN_GLL_API glProgramUniformMatrix4fvEXTType g_nngllProgramUniformMatrix4fvEXT;
NN_GLL_API glProgramUniformMatrix2x3fvEXTType g_nngllProgramUniformMatrix2x3fvEXT;
NN_GLL_API glProgramUniformMatrix3x2fvEXTType g_nngllProgramUniformMatrix3x2fvEXT;
NN_GLL_API glProgramUniformMatrix2x4fvEXTType g_nngllProgramUniformMatrix2x4fvEXT;
NN_GLL_API glProgramUniformMatrix4x2fvEXTType g_nngllProgramUniformMatrix4x2fvEXT;
NN_GLL_API glProgramUniformMatrix3x4fvEXTType g_nngllProgramUniformMatrix3x4fvEXT;
NN_GLL_API glProgramUniformMatrix4x3fvEXTType g_nngllProgramUniformMatrix4x3fvEXT;
NN_GLL_API glTextureBufferEXTType g_nngllTextureBufferEXT;
NN_GLL_API glMultiTexBufferEXTType g_nngllMultiTexBufferEXT;
NN_GLL_API glTextureParameterIivEXTType g_nngllTextureParameterIivEXT;
NN_GLL_API glTextureParameterIuivEXTType g_nngllTextureParameterIuivEXT;
NN_GLL_API glGetTextureParameterIivEXTType g_nngllGetTextureParameterIivEXT;
NN_GLL_API glGetTextureParameterIuivEXTType g_nngllGetTextureParameterIuivEXT;
NN_GLL_API glMultiTexParameterIivEXTType g_nngllMultiTexParameterIivEXT;
NN_GLL_API glMultiTexParameterIuivEXTType g_nngllMultiTexParameterIuivEXT;
NN_GLL_API glGetMultiTexParameterIivEXTType g_nngllGetMultiTexParameterIivEXT;
NN_GLL_API glGetMultiTexParameterIuivEXTType g_nngllGetMultiTexParameterIuivEXT;
NN_GLL_API glProgramUniform1uiEXTType g_nngllProgramUniform1uiEXT;
NN_GLL_API glProgramUniform2uiEXTType g_nngllProgramUniform2uiEXT;
NN_GLL_API glProgramUniform3uiEXTType g_nngllProgramUniform3uiEXT;
NN_GLL_API glProgramUniform4uiEXTType g_nngllProgramUniform4uiEXT;
NN_GLL_API glProgramUniform1uivEXTType g_nngllProgramUniform1uivEXT;
NN_GLL_API glProgramUniform2uivEXTType g_nngllProgramUniform2uivEXT;
NN_GLL_API glProgramUniform3uivEXTType g_nngllProgramUniform3uivEXT;
NN_GLL_API glProgramUniform4uivEXTType g_nngllProgramUniform4uivEXT;
NN_GLL_API glNamedProgramLocalParameters4fvEXTType g_nngllNamedProgramLocalParameters4fvEXT;
NN_GLL_API glNamedProgramLocalParameterI4iEXTType g_nngllNamedProgramLocalParameterI4iEXT;
NN_GLL_API glNamedProgramLocalParameterI4ivEXTType g_nngllNamedProgramLocalParameterI4ivEXT;
NN_GLL_API glNamedProgramLocalParametersI4ivEXTType g_nngllNamedProgramLocalParametersI4ivEXT;
NN_GLL_API glNamedProgramLocalParameterI4uiEXTType g_nngllNamedProgramLocalParameterI4uiEXT;
NN_GLL_API glNamedProgramLocalParameterI4uivEXTType g_nngllNamedProgramLocalParameterI4uivEXT;
NN_GLL_API glNamedProgramLocalParametersI4uivEXTType g_nngllNamedProgramLocalParametersI4uivEXT;
NN_GLL_API glGetNamedProgramLocalParameterIivEXTType g_nngllGetNamedProgramLocalParameterIivEXT;
NN_GLL_API glGetNamedProgramLocalParameterIuivEXTType g_nngllGetNamedProgramLocalParameterIuivEXT;
NN_GLL_API glEnableClientStateiEXTType g_nngllEnableClientStateiEXT;
NN_GLL_API glDisableClientStateiEXTType g_nngllDisableClientStateiEXT;
NN_GLL_API glGetFloati_vEXTType g_nngllGetFloati_vEXT;
NN_GLL_API glGetDoublei_vEXTType g_nngllGetDoublei_vEXT;
NN_GLL_API glGetPointeri_vEXTType g_nngllGetPointeri_vEXT;
NN_GLL_API glNamedProgramStringEXTType g_nngllNamedProgramStringEXT;
NN_GLL_API glNamedProgramLocalParameter4dEXTType g_nngllNamedProgramLocalParameter4dEXT;
NN_GLL_API glNamedProgramLocalParameter4dvEXTType g_nngllNamedProgramLocalParameter4dvEXT;
NN_GLL_API glNamedProgramLocalParameter4fEXTType g_nngllNamedProgramLocalParameter4fEXT;
NN_GLL_API glNamedProgramLocalParameter4fvEXTType g_nngllNamedProgramLocalParameter4fvEXT;
NN_GLL_API glGetNamedProgramLocalParameterdvEXTType g_nngllGetNamedProgramLocalParameterdvEXT;
NN_GLL_API glGetNamedProgramLocalParameterfvEXTType g_nngllGetNamedProgramLocalParameterfvEXT;
NN_GLL_API glGetNamedProgramivEXTType g_nngllGetNamedProgramivEXT;
NN_GLL_API glGetNamedProgramStringEXTType g_nngllGetNamedProgramStringEXT;
NN_GLL_API glNamedRenderbufferStorageEXTType g_nngllNamedRenderbufferStorageEXT;
NN_GLL_API glGetNamedRenderbufferParameterivEXTType g_nngllGetNamedRenderbufferParameterivEXT;
NN_GLL_API glNamedRenderbufferStorageMultisampleEXTType g_nngllNamedRenderbufferStorageMultisampleEXT;
NN_GLL_API glNamedRenderbufferStorageMultisampleCoverageEXTType g_nngllNamedRenderbufferStorageMultisampleCoverageEXT;
NN_GLL_API glCheckNamedFramebufferStatusEXTType g_nngllCheckNamedFramebufferStatusEXT;
NN_GLL_API glNamedFramebufferTexture1DEXTType g_nngllNamedFramebufferTexture1DEXT;
NN_GLL_API glNamedFramebufferTexture2DEXTType g_nngllNamedFramebufferTexture2DEXT;
NN_GLL_API glNamedFramebufferTexture3DEXTType g_nngllNamedFramebufferTexture3DEXT;
NN_GLL_API glNamedFramebufferRenderbufferEXTType g_nngllNamedFramebufferRenderbufferEXT;
NN_GLL_API glGetNamedFramebufferAttachmentParameterivEXTType g_nngllGetNamedFramebufferAttachmentParameterivEXT;
NN_GLL_API glGenerateTextureMipmapEXTType g_nngllGenerateTextureMipmapEXT;
NN_GLL_API glGenerateMultiTexMipmapEXTType g_nngllGenerateMultiTexMipmapEXT;
NN_GLL_API glFramebufferDrawBufferEXTType g_nngllFramebufferDrawBufferEXT;
NN_GLL_API glFramebufferDrawBuffersEXTType g_nngllFramebufferDrawBuffersEXT;
NN_GLL_API glFramebufferReadBufferEXTType g_nngllFramebufferReadBufferEXT;
NN_GLL_API glGetFramebufferParameterivEXTType g_nngllGetFramebufferParameterivEXT;
NN_GLL_API glNamedCopyBufferSubDataEXTType g_nngllNamedCopyBufferSubDataEXT;
NN_GLL_API glNamedFramebufferTextureEXTType g_nngllNamedFramebufferTextureEXT;
NN_GLL_API glNamedFramebufferTextureLayerEXTType g_nngllNamedFramebufferTextureLayerEXT;
NN_GLL_API glNamedFramebufferTextureFaceEXTType g_nngllNamedFramebufferTextureFaceEXT;
NN_GLL_API glTextureRenderbufferEXTType g_nngllTextureRenderbufferEXT;
NN_GLL_API glMultiTexRenderbufferEXTType g_nngllMultiTexRenderbufferEXT;
NN_GLL_API glVertexArrayVertexOffsetEXTType g_nngllVertexArrayVertexOffsetEXT;
NN_GLL_API glVertexArrayColorOffsetEXTType g_nngllVertexArrayColorOffsetEXT;
NN_GLL_API glVertexArrayEdgeFlagOffsetEXTType g_nngllVertexArrayEdgeFlagOffsetEXT;
NN_GLL_API glVertexArrayIndexOffsetEXTType g_nngllVertexArrayIndexOffsetEXT;
NN_GLL_API glVertexArrayNormalOffsetEXTType g_nngllVertexArrayNormalOffsetEXT;
NN_GLL_API glVertexArrayTexCoordOffsetEXTType g_nngllVertexArrayTexCoordOffsetEXT;
NN_GLL_API glVertexArrayMultiTexCoordOffsetEXTType g_nngllVertexArrayMultiTexCoordOffsetEXT;
NN_GLL_API glVertexArrayFogCoordOffsetEXTType g_nngllVertexArrayFogCoordOffsetEXT;
NN_GLL_API glVertexArraySecondaryColorOffsetEXTType g_nngllVertexArraySecondaryColorOffsetEXT;
NN_GLL_API glVertexArrayVertexAttribOffsetEXTType g_nngllVertexArrayVertexAttribOffsetEXT;
NN_GLL_API glVertexArrayVertexAttribIOffsetEXTType g_nngllVertexArrayVertexAttribIOffsetEXT;
NN_GLL_API glEnableVertexArrayEXTType g_nngllEnableVertexArrayEXT;
NN_GLL_API glDisableVertexArrayEXTType g_nngllDisableVertexArrayEXT;
NN_GLL_API glEnableVertexArrayAttribEXTType g_nngllEnableVertexArrayAttribEXT;
NN_GLL_API glDisableVertexArrayAttribEXTType g_nngllDisableVertexArrayAttribEXT;
NN_GLL_API glGetVertexArrayIntegervEXTType g_nngllGetVertexArrayIntegervEXT;
NN_GLL_API glGetVertexArrayPointervEXTType g_nngllGetVertexArrayPointervEXT;
NN_GLL_API glGetVertexArrayIntegeri_vEXTType g_nngllGetVertexArrayIntegeri_vEXT;
NN_GLL_API glGetVertexArrayPointeri_vEXTType g_nngllGetVertexArrayPointeri_vEXT;
NN_GLL_API glMapNamedBufferRangeEXTType g_nngllMapNamedBufferRangeEXT;
NN_GLL_API glFlushMappedNamedBufferRangeEXTType g_nngllFlushMappedNamedBufferRangeEXT;
NN_GLL_API glNamedBufferStorageEXTType g_nngllNamedBufferStorageEXT;
NN_GLL_API glClearNamedBufferDataEXTType g_nngllClearNamedBufferDataEXT;
NN_GLL_API glClearNamedBufferSubDataEXTType g_nngllClearNamedBufferSubDataEXT;
NN_GLL_API glNamedFramebufferParameteriEXTType g_nngllNamedFramebufferParameteriEXT;
NN_GLL_API glGetNamedFramebufferParameterivEXTType g_nngllGetNamedFramebufferParameterivEXT;
NN_GLL_API glProgramUniform1dEXTType g_nngllProgramUniform1dEXT;
NN_GLL_API glProgramUniform2dEXTType g_nngllProgramUniform2dEXT;
NN_GLL_API glProgramUniform3dEXTType g_nngllProgramUniform3dEXT;
NN_GLL_API glProgramUniform4dEXTType g_nngllProgramUniform4dEXT;
NN_GLL_API glProgramUniform1dvEXTType g_nngllProgramUniform1dvEXT;
NN_GLL_API glProgramUniform2dvEXTType g_nngllProgramUniform2dvEXT;
NN_GLL_API glProgramUniform3dvEXTType g_nngllProgramUniform3dvEXT;
NN_GLL_API glProgramUniform4dvEXTType g_nngllProgramUniform4dvEXT;
NN_GLL_API glProgramUniformMatrix2dvEXTType g_nngllProgramUniformMatrix2dvEXT;
NN_GLL_API glProgramUniformMatrix3dvEXTType g_nngllProgramUniformMatrix3dvEXT;
NN_GLL_API glProgramUniformMatrix4dvEXTType g_nngllProgramUniformMatrix4dvEXT;
NN_GLL_API glProgramUniformMatrix2x3dvEXTType g_nngllProgramUniformMatrix2x3dvEXT;
NN_GLL_API glProgramUniformMatrix2x4dvEXTType g_nngllProgramUniformMatrix2x4dvEXT;
NN_GLL_API glProgramUniformMatrix3x2dvEXTType g_nngllProgramUniformMatrix3x2dvEXT;
NN_GLL_API glProgramUniformMatrix3x4dvEXTType g_nngllProgramUniformMatrix3x4dvEXT;
NN_GLL_API glProgramUniformMatrix4x2dvEXTType g_nngllProgramUniformMatrix4x2dvEXT;
NN_GLL_API glProgramUniformMatrix4x3dvEXTType g_nngllProgramUniformMatrix4x3dvEXT;
NN_GLL_API glTextureBufferRangeEXTType g_nngllTextureBufferRangeEXT;
NN_GLL_API glTextureStorage1DEXTType g_nngllTextureStorage1DEXT;
NN_GLL_API glTextureStorage2DEXTType g_nngllTextureStorage2DEXT;
NN_GLL_API glTextureStorage3DEXTType g_nngllTextureStorage3DEXT;
NN_GLL_API glTextureStorage2DMultisampleEXTType g_nngllTextureStorage2DMultisampleEXT;
NN_GLL_API glTextureStorage3DMultisampleEXTType g_nngllTextureStorage3DMultisampleEXT;
NN_GLL_API glVertexArrayBindVertexBufferEXTType g_nngllVertexArrayBindVertexBufferEXT;
NN_GLL_API glVertexArrayVertexAttribFormatEXTType g_nngllVertexArrayVertexAttribFormatEXT;
NN_GLL_API glVertexArrayVertexAttribIFormatEXTType g_nngllVertexArrayVertexAttribIFormatEXT;
NN_GLL_API glVertexArrayVertexAttribLFormatEXTType g_nngllVertexArrayVertexAttribLFormatEXT;
NN_GLL_API glVertexArrayVertexAttribBindingEXTType g_nngllVertexArrayVertexAttribBindingEXT;
NN_GLL_API glVertexArrayVertexBindingDivisorEXTType g_nngllVertexArrayVertexBindingDivisorEXT;
NN_GLL_API glVertexArrayVertexAttribLOffsetEXTType g_nngllVertexArrayVertexAttribLOffsetEXT;
NN_GLL_API glTexturePageCommitmentEXTType g_nngllTexturePageCommitmentEXT;
NN_GLL_API glVertexArrayVertexAttribDivisorEXTType g_nngllVertexArrayVertexAttribDivisorEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_direct_state_access();
#endif // GL_EXT_direct_state_access

#if !defined(GL_EXT_draw_buffers2)
#define GL_EXT_draw_buffers2

typedef void ( NN_GLL_GL_APIENTRY *glColorMaskIndexedEXTType )( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a );
#define glColorMaskIndexedEXT g_nngllColorMaskIndexedEXT
NN_GLL_API glColorMaskIndexedEXTType g_nngllColorMaskIndexedEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_draw_buffers2();
#endif // GL_EXT_draw_buffers2

#if !defined(GL_EXT_draw_instanced)
#define GL_EXT_draw_instanced

// primcount should be renamed to instanceCount for OpenGL ES
typedef void ( NN_GLL_GL_APIENTRY *glDrawArraysInstancedEXTType )( GLenum mode, GLint start, GLsizei count, GLsizei primcount );
// primcount should be renamed to instanceCount for OpenGL ES
typedef void ( NN_GLL_GL_APIENTRY *glDrawElementsInstancedEXTType )( GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount );
#define glDrawArraysInstancedEXT g_nngllDrawArraysInstancedEXT
#define glDrawElementsInstancedEXT g_nngllDrawElementsInstancedEXT
NN_GLL_API glDrawArraysInstancedEXTType g_nngllDrawArraysInstancedEXT;
NN_GLL_API glDrawElementsInstancedEXTType g_nngllDrawElementsInstancedEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_draw_instanced();
#endif // GL_EXT_draw_instanced

#if !defined(GL_EXT_draw_range_elements)
#define GL_EXT_draw_range_elements

#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8 // NOLINT
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDrawRangeElementsEXTType )( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices );
#define glDrawRangeElementsEXT g_nngllDrawRangeElementsEXT
NN_GLL_API glDrawRangeElementsEXTType g_nngllDrawRangeElementsEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_draw_range_elements();
#endif // GL_EXT_draw_range_elements

#if !defined(GL_EXT_external_buffer)
#define GL_EXT_external_buffer

typedef void *GLeglClientBufferEXT;
typedef void ( NN_GLL_GL_APIENTRY *glBufferStorageExternalEXTType )( GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags );
typedef void ( NN_GLL_GL_APIENTRY *glNamedBufferStorageExternalEXTType )( GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags );
#define glBufferStorageExternalEXT g_nngllBufferStorageExternalEXT
#define glNamedBufferStorageExternalEXT g_nngllNamedBufferStorageExternalEXT
NN_GLL_API glBufferStorageExternalEXTType g_nngllBufferStorageExternalEXT;
NN_GLL_API glNamedBufferStorageExternalEXTType g_nngllNamedBufferStorageExternalEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_external_buffer();
#endif // GL_EXT_external_buffer

#if !defined(GL_EXT_fog_coord)
#define GL_EXT_fog_coord

#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450 // NOLINT
#define GL_FOG_COORDINATE_EXT 0x8451 // NOLINT
#define GL_FRAGMENT_DEPTH_EXT 0x8452 // NOLINT
#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453 // NOLINT
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454 // NOLINT
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455 // NOLINT
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456 // NOLINT
#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFogCoordfEXTType )( GLfloat coord );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoordfvEXTType )( const GLfloat *coord );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoorddEXTType )( GLdouble coord );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoorddvEXTType )( const GLdouble *coord );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoordPointerEXTType )( GLenum type, GLsizei stride, const void *pointer );
#define glFogCoordfEXT g_nngllFogCoordfEXT
#define glFogCoordfvEXT g_nngllFogCoordfvEXT
#define glFogCoorddEXT g_nngllFogCoorddEXT
#define glFogCoorddvEXT g_nngllFogCoorddvEXT
#define glFogCoordPointerEXT g_nngllFogCoordPointerEXT
NN_GLL_API glFogCoordfEXTType g_nngllFogCoordfEXT;
NN_GLL_API glFogCoordfvEXTType g_nngllFogCoordfvEXT;
NN_GLL_API glFogCoorddEXTType g_nngllFogCoorddEXT;
NN_GLL_API glFogCoorddvEXTType g_nngllFogCoorddvEXT;
NN_GLL_API glFogCoordPointerEXTType g_nngllFogCoordPointerEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_fog_coord();
#endif // GL_EXT_fog_coord

#if !defined(GL_EXT_framebuffer_blit)
#define GL_EXT_framebuffer_blit

#define GL_READ_FRAMEBUFFER_EXT 0x8CA8 // NOLINT
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9 // NOLINT
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6 // NOLINT
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBlitFramebufferEXTType )( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
#define glBlitFramebufferEXT g_nngllBlitFramebufferEXT
NN_GLL_API glBlitFramebufferEXTType g_nngllBlitFramebufferEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_framebuffer_blit();
#endif // GL_EXT_framebuffer_blit

#if !defined(GL_EXT_framebuffer_multisample)
#define GL_EXT_framebuffer_multisample

#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56 // NOLINT
#define GL_MAX_SAMPLES_EXT 0x8D57 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glRenderbufferStorageMultisampleEXTType )( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height );
#define glRenderbufferStorageMultisampleEXT g_nngllRenderbufferStorageMultisampleEXT
NN_GLL_API glRenderbufferStorageMultisampleEXTType g_nngllRenderbufferStorageMultisampleEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_framebuffer_multisample();
#endif // GL_EXT_framebuffer_multisample

#if !defined(GL_EXT_framebuffer_multisample_blit_scaled)
#define GL_EXT_framebuffer_multisample_blit_scaled

#define GL_SCALED_RESOLVE_FASTEST_EXT 0x90BA // NOLINT
#define GL_SCALED_RESOLVE_NICEST_EXT 0x90BB // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_framebuffer_multisample_blit_scaled();
#endif // GL_EXT_framebuffer_multisample_blit_scaled

#if !defined(GL_EXT_framebuffer_object)
#define GL_EXT_framebuffer_object

#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506 // NOLINT
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8 // NOLINT
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6 // NOLINT
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4 // NOLINT
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC // NOLINT
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD // NOLINT
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF // NOLINT
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0 // NOLINT
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1 // NOLINT
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2 // NOLINT
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3 // NOLINT
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4 // NOLINT
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5 // NOLINT
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6 // NOLINT
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7 // NOLINT
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8 // NOLINT
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9 // NOLINT
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA // NOLINT
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB // NOLINT
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC // NOLINT
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED // NOLINT
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE // NOLINT
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF // NOLINT
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00 // NOLINT
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20 // NOLINT
#define GL_FRAMEBUFFER_EXT 0x8D40 // NOLINT
#define GL_RENDERBUFFER_EXT 0x8D41 // NOLINT
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42 // NOLINT
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43 // NOLINT
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44 // NOLINT
#define GL_STENCIL_INDEX1_EXT 0x8D46 // NOLINT
#define GL_STENCIL_INDEX4_EXT 0x8D47 // NOLINT
#define GL_STENCIL_INDEX8_EXT 0x8D48 // NOLINT
#define GL_STENCIL_INDEX16_EXT 0x8D49 // NOLINT
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50 // NOLINT
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51 // NOLINT
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52 // NOLINT
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53 // NOLINT
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54 // NOLINT
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55 // NOLINT
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsRenderbufferEXTType )( GLuint renderbuffer );
typedef void ( NN_GLL_GL_APIENTRY *glBindRenderbufferEXTType )( GLenum target, GLuint renderbuffer );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteRenderbuffersEXTType )( GLsizei n, const GLuint *renderbuffers );
typedef void ( NN_GLL_GL_APIENTRY *glGenRenderbuffersEXTType )( GLsizei n, GLuint *renderbuffers );
typedef void ( NN_GLL_GL_APIENTRY *glRenderbufferStorageEXTType )( GLenum target, GLenum internalformat, GLsizei width, GLsizei height );
typedef void ( NN_GLL_GL_APIENTRY *glGetRenderbufferParameterivEXTType )( GLenum target, GLenum pname, GLint *params );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsFramebufferEXTType )( GLuint framebuffer );
typedef void ( NN_GLL_GL_APIENTRY *glBindFramebufferEXTType )( GLenum target, GLuint framebuffer );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteFramebuffersEXTType )( GLsizei n, const GLuint *framebuffers );
typedef void ( NN_GLL_GL_APIENTRY *glGenFramebuffersEXTType )( GLsizei n, GLuint *framebuffers );
typedef GLenum ( NN_GLL_GL_APIENTRY *glCheckFramebufferStatusEXTType )( GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTexture1DEXTType )( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTexture2DEXTType )( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTexture3DEXTType )( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferRenderbufferEXTType )( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer );
typedef void ( NN_GLL_GL_APIENTRY *glGetFramebufferAttachmentParameterivEXTType )( GLenum target, GLenum attachment, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGenerateMipmapEXTType )( GLenum target );
#define glIsRenderbufferEXT g_nngllIsRenderbufferEXT
#define glBindRenderbufferEXT g_nngllBindRenderbufferEXT
#define glDeleteRenderbuffersEXT g_nngllDeleteRenderbuffersEXT
#define glGenRenderbuffersEXT g_nngllGenRenderbuffersEXT
#define glRenderbufferStorageEXT g_nngllRenderbufferStorageEXT
#define glGetRenderbufferParameterivEXT g_nngllGetRenderbufferParameterivEXT
#define glIsFramebufferEXT g_nngllIsFramebufferEXT
#define glBindFramebufferEXT g_nngllBindFramebufferEXT
#define glDeleteFramebuffersEXT g_nngllDeleteFramebuffersEXT
#define glGenFramebuffersEXT g_nngllGenFramebuffersEXT
#define glCheckFramebufferStatusEXT g_nngllCheckFramebufferStatusEXT
#define glFramebufferTexture1DEXT g_nngllFramebufferTexture1DEXT
#define glFramebufferTexture2DEXT g_nngllFramebufferTexture2DEXT
#define glFramebufferTexture3DEXT g_nngllFramebufferTexture3DEXT
#define glFramebufferRenderbufferEXT g_nngllFramebufferRenderbufferEXT
#define glGetFramebufferAttachmentParameterivEXT g_nngllGetFramebufferAttachmentParameterivEXT
#define glGenerateMipmapEXT g_nngllGenerateMipmapEXT
NN_GLL_API glIsRenderbufferEXTType g_nngllIsRenderbufferEXT;
NN_GLL_API glBindRenderbufferEXTType g_nngllBindRenderbufferEXT;
NN_GLL_API glDeleteRenderbuffersEXTType g_nngllDeleteRenderbuffersEXT;
NN_GLL_API glGenRenderbuffersEXTType g_nngllGenRenderbuffersEXT;
NN_GLL_API glRenderbufferStorageEXTType g_nngllRenderbufferStorageEXT;
NN_GLL_API glGetRenderbufferParameterivEXTType g_nngllGetRenderbufferParameterivEXT;
NN_GLL_API glIsFramebufferEXTType g_nngllIsFramebufferEXT;
NN_GLL_API glBindFramebufferEXTType g_nngllBindFramebufferEXT;
NN_GLL_API glDeleteFramebuffersEXTType g_nngllDeleteFramebuffersEXT;
NN_GLL_API glGenFramebuffersEXTType g_nngllGenFramebuffersEXT;
NN_GLL_API glCheckFramebufferStatusEXTType g_nngllCheckFramebufferStatusEXT;
NN_GLL_API glFramebufferTexture1DEXTType g_nngllFramebufferTexture1DEXT;
NN_GLL_API glFramebufferTexture2DEXTType g_nngllFramebufferTexture2DEXT;
NN_GLL_API glFramebufferTexture3DEXTType g_nngllFramebufferTexture3DEXT;
NN_GLL_API glFramebufferRenderbufferEXTType g_nngllFramebufferRenderbufferEXT;
NN_GLL_API glGetFramebufferAttachmentParameterivEXTType g_nngllGetFramebufferAttachmentParameterivEXT;
NN_GLL_API glGenerateMipmapEXTType g_nngllGenerateMipmapEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_framebuffer_object();
#endif // GL_EXT_framebuffer_object

#if !defined(GL_EXT_framebuffer_sRGB)
#define GL_EXT_framebuffer_sRGB

#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9 // NOLINT
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_framebuffer_sRGB();
#endif // GL_EXT_framebuffer_sRGB

#if !defined(GL_EXT_geometry_shader4)
#define GL_EXT_geometry_shader4

#define GL_GEOMETRY_SHADER_EXT 0x8DD9 // NOLINT
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA // NOLINT
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB // NOLINT
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC // NOLINT
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29 // NOLINT
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD // NOLINT
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE // NOLINT
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B // NOLINT
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF // NOLINT
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0 // NOLINT
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1 // NOLINT
#define GL_LINES_ADJACENCY_EXT 0x000A // NOLINT
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B // NOLINT
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C // NOLINT
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4 // NOLINT
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glProgramParameteriEXTType )( GLuint program, GLenum pname, GLint value );
#define glProgramParameteriEXT g_nngllProgramParameteriEXT
NN_GLL_API glProgramParameteriEXTType g_nngllProgramParameteriEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_geometry_shader4();
#endif // GL_EXT_geometry_shader4

#if !defined(GL_EXT_gpu_program_parameters)
#define GL_EXT_gpu_program_parameters

typedef void ( NN_GLL_GL_APIENTRY *glProgramEnvParameters4fvEXTType )( GLenum target, GLuint index, GLsizei count, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramLocalParameters4fvEXTType )( GLenum target, GLuint index, GLsizei count, const GLfloat *params );
#define glProgramEnvParameters4fvEXT g_nngllProgramEnvParameters4fvEXT
#define glProgramLocalParameters4fvEXT g_nngllProgramLocalParameters4fvEXT
NN_GLL_API glProgramEnvParameters4fvEXTType g_nngllProgramEnvParameters4fvEXT;
NN_GLL_API glProgramLocalParameters4fvEXTType g_nngllProgramLocalParameters4fvEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_gpu_program_parameters();
#endif // GL_EXT_gpu_program_parameters

#if !defined(GL_EXT_gpu_shader4)
#define GL_EXT_gpu_shader4

#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD // NOLINT
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0 // NOLINT
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1 // NOLINT
#define GL_SAMPLER_BUFFER_EXT 0x8DC2 // NOLINT
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3 // NOLINT
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4 // NOLINT
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5 // NOLINT
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6 // NOLINT
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7 // NOLINT
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8 // NOLINT
#define GL_INT_SAMPLER_1D_EXT 0x8DC9 // NOLINT
#define GL_INT_SAMPLER_2D_EXT 0x8DCA // NOLINT
#define GL_INT_SAMPLER_3D_EXT 0x8DCB // NOLINT
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC // NOLINT
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD // NOLINT
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE // NOLINT
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF // NOLINT
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8 // NOLINT
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904 // NOLINT
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGetUniformuivEXTType )( GLuint program, GLint location, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glBindFragDataLocationEXTType )( GLuint program, GLuint color, const GLchar *name );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetFragDataLocationEXTType )( GLuint program, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1uiEXTType )( GLint location, GLuint v0 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2uiEXTType )( GLint location, GLuint v0, GLuint v1 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3uiEXTType )( GLint location, GLuint v0, GLuint v1, GLuint v2 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4uiEXTType )( GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 );
typedef void ( NN_GLL_GL_APIENTRY *glUniform1uivEXTType )( GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform2uivEXTType )( GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform3uivEXTType )( GLint location, GLsizei count, const GLuint *value );
typedef void ( NN_GLL_GL_APIENTRY *glUniform4uivEXTType )( GLint location, GLsizei count, const GLuint *value );
#define glGetUniformuivEXT g_nngllGetUniformuivEXT
#define glBindFragDataLocationEXT g_nngllBindFragDataLocationEXT
#define glGetFragDataLocationEXT g_nngllGetFragDataLocationEXT
#define glUniform1uiEXT g_nngllUniform1uiEXT
#define glUniform2uiEXT g_nngllUniform2uiEXT
#define glUniform3uiEXT g_nngllUniform3uiEXT
#define glUniform4uiEXT g_nngllUniform4uiEXT
#define glUniform1uivEXT g_nngllUniform1uivEXT
#define glUniform2uivEXT g_nngllUniform2uivEXT
#define glUniform3uivEXT g_nngllUniform3uivEXT
#define glUniform4uivEXT g_nngllUniform4uivEXT
NN_GLL_API glGetUniformuivEXTType g_nngllGetUniformuivEXT;
NN_GLL_API glBindFragDataLocationEXTType g_nngllBindFragDataLocationEXT;
NN_GLL_API glGetFragDataLocationEXTType g_nngllGetFragDataLocationEXT;
NN_GLL_API glUniform1uiEXTType g_nngllUniform1uiEXT;
NN_GLL_API glUniform2uiEXTType g_nngllUniform2uiEXT;
NN_GLL_API glUniform3uiEXTType g_nngllUniform3uiEXT;
NN_GLL_API glUniform4uiEXTType g_nngllUniform4uiEXT;
NN_GLL_API glUniform1uivEXTType g_nngllUniform1uivEXT;
NN_GLL_API glUniform2uivEXTType g_nngllUniform2uivEXT;
NN_GLL_API glUniform3uivEXTType g_nngllUniform3uivEXT;
NN_GLL_API glUniform4uivEXTType g_nngllUniform4uivEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_gpu_shader4();
#endif // GL_EXT_gpu_shader4

#if !defined(GL_EXT_histogram)
#define GL_EXT_histogram

#define GL_HISTOGRAM_EXT 0x8024 // NOLINT
#define GL_PROXY_HISTOGRAM_EXT 0x8025 // NOLINT
#define GL_HISTOGRAM_WIDTH_EXT 0x8026 // NOLINT
#define GL_HISTOGRAM_FORMAT_EXT 0x8027 // NOLINT
#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028 // NOLINT
#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029 // NOLINT
#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A // NOLINT
#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B // NOLINT
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C // NOLINT
#define GL_HISTOGRAM_SINK_EXT 0x802D // NOLINT
#define GL_MINMAX_EXT 0x802E // NOLINT
#define GL_MINMAX_FORMAT_EXT 0x802F // NOLINT
#define GL_MINMAX_SINK_EXT 0x8030 // NOLINT
#define GL_TABLE_TOO_LARGE_EXT 0x8031 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGetHistogramEXTType )( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetHistogramParameterfvEXTType )( GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetHistogramParameterivEXTType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMinmaxEXTType )( GLenum target, GLboolean reset, GLenum format, GLenum type, void *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetMinmaxParameterfvEXTType )( GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMinmaxParameterivEXTType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glHistogramEXTType )( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
typedef void ( NN_GLL_GL_APIENTRY *glMinmaxEXTType )( GLenum target, GLenum internalformat, GLboolean sink );
typedef void ( NN_GLL_GL_APIENTRY *glResetHistogramEXTType )( GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glResetMinmaxEXTType )( GLenum target );
#define glGetHistogramEXT g_nngllGetHistogramEXT
#define glGetHistogramParameterfvEXT g_nngllGetHistogramParameterfvEXT
#define glGetHistogramParameterivEXT g_nngllGetHistogramParameterivEXT
#define glGetMinmaxEXT g_nngllGetMinmaxEXT
#define glGetMinmaxParameterfvEXT g_nngllGetMinmaxParameterfvEXT
#define glGetMinmaxParameterivEXT g_nngllGetMinmaxParameterivEXT
#define glHistogramEXT g_nngllHistogramEXT
#define glMinmaxEXT g_nngllMinmaxEXT
#define glResetHistogramEXT g_nngllResetHistogramEXT
#define glResetMinmaxEXT g_nngllResetMinmaxEXT
NN_GLL_API glGetHistogramEXTType g_nngllGetHistogramEXT;
NN_GLL_API glGetHistogramParameterfvEXTType g_nngllGetHistogramParameterfvEXT;
NN_GLL_API glGetHistogramParameterivEXTType g_nngllGetHistogramParameterivEXT;
NN_GLL_API glGetMinmaxEXTType g_nngllGetMinmaxEXT;
NN_GLL_API glGetMinmaxParameterfvEXTType g_nngllGetMinmaxParameterfvEXT;
NN_GLL_API glGetMinmaxParameterivEXTType g_nngllGetMinmaxParameterivEXT;
NN_GLL_API glHistogramEXTType g_nngllHistogramEXT;
NN_GLL_API glMinmaxEXTType g_nngllMinmaxEXT;
NN_GLL_API glResetHistogramEXTType g_nngllResetHistogramEXT;
NN_GLL_API glResetMinmaxEXTType g_nngllResetMinmaxEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_histogram();
#endif // GL_EXT_histogram

#if !defined(GL_EXT_index_array_formats)
#define GL_EXT_index_array_formats

#define GL_IUI_V2F_EXT 0x81AD // NOLINT
#define GL_IUI_V3F_EXT 0x81AE // NOLINT
#define GL_IUI_N3F_V2F_EXT 0x81AF // NOLINT
#define GL_IUI_N3F_V3F_EXT 0x81B0 // NOLINT
#define GL_T2F_IUI_V2F_EXT 0x81B1 // NOLINT
#define GL_T2F_IUI_V3F_EXT 0x81B2 // NOLINT
#define GL_T2F_IUI_N3F_V2F_EXT 0x81B3 // NOLINT
#define GL_T2F_IUI_N3F_V3F_EXT 0x81B4 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_index_array_formats();
#endif // GL_EXT_index_array_formats

#if !defined(GL_EXT_index_func)
#define GL_EXT_index_func

#define GL_INDEX_TEST_EXT 0x81B5 // NOLINT
#define GL_INDEX_TEST_FUNC_EXT 0x81B6 // NOLINT
#define GL_INDEX_TEST_REF_EXT 0x81B7 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glIndexFuncEXTType )( GLenum func, GLclampf ref );
#define glIndexFuncEXT g_nngllIndexFuncEXT
NN_GLL_API glIndexFuncEXTType g_nngllIndexFuncEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_index_func();
#endif // GL_EXT_index_func

#if !defined(GL_EXT_index_material)
#define GL_EXT_index_material

#define GL_INDEX_MATERIAL_EXT 0x81B8 // NOLINT
#define GL_INDEX_MATERIAL_PARAMETER_EXT 0x81B9 // NOLINT
#define GL_INDEX_MATERIAL_FACE_EXT 0x81BA // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glIndexMaterialEXTType )( GLenum face, GLenum mode );
#define glIndexMaterialEXT g_nngllIndexMaterialEXT
NN_GLL_API glIndexMaterialEXTType g_nngllIndexMaterialEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_index_material();
#endif // GL_EXT_index_material

#if !defined(GL_EXT_index_texture)
#define GL_EXT_index_texture

NN_GLL_API GLboolean nngllIsSupported_GL_EXT_index_texture();
#endif // GL_EXT_index_texture

#if !defined(GL_EXT_light_texture)
#define GL_EXT_light_texture

#define GL_FRAGMENT_MATERIAL_EXT 0x8349 // NOLINT
#define GL_FRAGMENT_NORMAL_EXT 0x834A // NOLINT
#define GL_FRAGMENT_COLOR_EXT 0x834C // NOLINT
#define GL_ATTENUATION_EXT 0x834D // NOLINT
#define GL_SHADOW_ATTENUATION_EXT 0x834E // NOLINT
#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F // NOLINT
#define GL_TEXTURE_LIGHT_EXT 0x8350 // NOLINT
#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351 // NOLINT
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glApplyTextureEXTType )( GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glTextureLightEXTType )( GLenum pname );
typedef void ( NN_GLL_GL_APIENTRY *glTextureMaterialEXTType )( GLenum face, GLenum mode );
#define glApplyTextureEXT g_nngllApplyTextureEXT
#define glTextureLightEXT g_nngllTextureLightEXT
#define glTextureMaterialEXT g_nngllTextureMaterialEXT
NN_GLL_API glApplyTextureEXTType g_nngllApplyTextureEXT;
NN_GLL_API glTextureLightEXTType g_nngllTextureLightEXT;
NN_GLL_API glTextureMaterialEXTType g_nngllTextureMaterialEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_light_texture();
#endif // GL_EXT_light_texture

#if !defined(GL_EXT_memory_object)
#define GL_EXT_memory_object

#define GL_TEXTURE_TILING_EXT 0x9580 // NOLINT
#define GL_DEDICATED_MEMORY_OBJECT_EXT 0x9581 // NOLINT
#define GL_PROTECTED_MEMORY_OBJECT_EXT 0x959B // NOLINT
#define GL_NUM_TILING_TYPES_EXT 0x9582 // NOLINT
#define GL_TILING_TYPES_EXT 0x9583 // NOLINT
#define GL_OPTIMAL_TILING_EXT 0x9584 // NOLINT
#define GL_LINEAR_TILING_EXT 0x9585 // NOLINT
#define GL_NUM_DEVICE_UUIDS_EXT 0x9596 // NOLINT
#define GL_DEVICE_UUID_EXT 0x9597 // NOLINT
#define GL_DRIVER_UUID_EXT 0x9598 // NOLINT
#define GL_UUID_SIZE_EXT 16 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGetUnsignedBytevEXTType )( GLenum pname, GLubyte *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetUnsignedBytei_vEXTType )( GLenum target, GLuint index, GLubyte *data );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteMemoryObjectsEXTType )( GLsizei n, const GLuint *memoryObjects );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsMemoryObjectEXTType )( GLuint memoryObject );
typedef void ( NN_GLL_GL_APIENTRY *glCreateMemoryObjectsEXTType )( GLsizei n, GLuint *memoryObjects );
typedef void ( NN_GLL_GL_APIENTRY *glMemoryObjectParameterivEXTType )( GLuint memoryObject, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMemoryObjectParameterivEXTType )( GLuint memoryObject, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glTexStorageMem2DEXTType )( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset );
typedef void ( NN_GLL_GL_APIENTRY *glTexStorageMem2DMultisampleEXTType )( GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
typedef void ( NN_GLL_GL_APIENTRY *glTexStorageMem3DEXTType )( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset );
typedef void ( NN_GLL_GL_APIENTRY *glTexStorageMem3DMultisampleEXTType )( GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
typedef void ( NN_GLL_GL_APIENTRY *glBufferStorageMemEXTType )( GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorageMem2DEXTType )( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorageMem2DMultisampleEXTType )( GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorageMem3DEXTType )( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorageMem3DMultisampleEXTType )( GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset );
typedef void ( NN_GLL_GL_APIENTRY *glNamedBufferStorageMemEXTType )( GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset );
typedef void ( NN_GLL_GL_APIENTRY *glTexStorageMem1DEXTType )( GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset );
typedef void ( NN_GLL_GL_APIENTRY *glTextureStorageMem1DEXTType )( GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset );
#define glGetUnsignedBytevEXT g_nngllGetUnsignedBytevEXT
#define glGetUnsignedBytei_vEXT g_nngllGetUnsignedBytei_vEXT
#define glDeleteMemoryObjectsEXT g_nngllDeleteMemoryObjectsEXT
#define glIsMemoryObjectEXT g_nngllIsMemoryObjectEXT
#define glCreateMemoryObjectsEXT g_nngllCreateMemoryObjectsEXT
#define glMemoryObjectParameterivEXT g_nngllMemoryObjectParameterivEXT
#define glGetMemoryObjectParameterivEXT g_nngllGetMemoryObjectParameterivEXT
#define glTexStorageMem2DEXT g_nngllTexStorageMem2DEXT
#define glTexStorageMem2DMultisampleEXT g_nngllTexStorageMem2DMultisampleEXT
#define glTexStorageMem3DEXT g_nngllTexStorageMem3DEXT
#define glTexStorageMem3DMultisampleEXT g_nngllTexStorageMem3DMultisampleEXT
#define glBufferStorageMemEXT g_nngllBufferStorageMemEXT
#define glTextureStorageMem2DEXT g_nngllTextureStorageMem2DEXT
#define glTextureStorageMem2DMultisampleEXT g_nngllTextureStorageMem2DMultisampleEXT
#define glTextureStorageMem3DEXT g_nngllTextureStorageMem3DEXT
#define glTextureStorageMem3DMultisampleEXT g_nngllTextureStorageMem3DMultisampleEXT
#define glNamedBufferStorageMemEXT g_nngllNamedBufferStorageMemEXT
#define glTexStorageMem1DEXT g_nngllTexStorageMem1DEXT
#define glTextureStorageMem1DEXT g_nngllTextureStorageMem1DEXT
NN_GLL_API glGetUnsignedBytevEXTType g_nngllGetUnsignedBytevEXT;
NN_GLL_API glGetUnsignedBytei_vEXTType g_nngllGetUnsignedBytei_vEXT;
NN_GLL_API glDeleteMemoryObjectsEXTType g_nngllDeleteMemoryObjectsEXT;
NN_GLL_API glIsMemoryObjectEXTType g_nngllIsMemoryObjectEXT;
NN_GLL_API glCreateMemoryObjectsEXTType g_nngllCreateMemoryObjectsEXT;
NN_GLL_API glMemoryObjectParameterivEXTType g_nngllMemoryObjectParameterivEXT;
NN_GLL_API glGetMemoryObjectParameterivEXTType g_nngllGetMemoryObjectParameterivEXT;
NN_GLL_API glTexStorageMem2DEXTType g_nngllTexStorageMem2DEXT;
NN_GLL_API glTexStorageMem2DMultisampleEXTType g_nngllTexStorageMem2DMultisampleEXT;
NN_GLL_API glTexStorageMem3DEXTType g_nngllTexStorageMem3DEXT;
NN_GLL_API glTexStorageMem3DMultisampleEXTType g_nngllTexStorageMem3DMultisampleEXT;
NN_GLL_API glBufferStorageMemEXTType g_nngllBufferStorageMemEXT;
NN_GLL_API glTextureStorageMem2DEXTType g_nngllTextureStorageMem2DEXT;
NN_GLL_API glTextureStorageMem2DMultisampleEXTType g_nngllTextureStorageMem2DMultisampleEXT;
NN_GLL_API glTextureStorageMem3DEXTType g_nngllTextureStorageMem3DEXT;
NN_GLL_API glTextureStorageMem3DMultisampleEXTType g_nngllTextureStorageMem3DMultisampleEXT;
NN_GLL_API glNamedBufferStorageMemEXTType g_nngllNamedBufferStorageMemEXT;
NN_GLL_API glTexStorageMem1DEXTType g_nngllTexStorageMem1DEXT;
NN_GLL_API glTextureStorageMem1DEXTType g_nngllTextureStorageMem1DEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_memory_object();
#endif // GL_EXT_memory_object

#if !defined(GL_EXT_memory_object_fd)
#define GL_EXT_memory_object_fd

#define GL_HANDLE_TYPE_OPAQUE_FD_EXT 0x9586 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glImportMemoryFdEXTType )( GLuint memory, GLuint64 size, GLenum handleType, GLint fd );
#define glImportMemoryFdEXT g_nngllImportMemoryFdEXT
NN_GLL_API glImportMemoryFdEXTType g_nngllImportMemoryFdEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_memory_object_fd();
#endif // GL_EXT_memory_object_fd

#if !defined(GL_EXT_memory_object_win32)
#define GL_EXT_memory_object_win32

#define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT 0x9587 // NOLINT
#define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588 // NOLINT
#define GL_DEVICE_LUID_EXT 0x9599 // NOLINT
#define GL_DEVICE_NODE_MASK_EXT 0x959A // NOLINT
#define GL_LUID_SIZE_EXT 8 // NOLINT
#define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0x9589 // NOLINT
#define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0x958A // NOLINT
#define GL_HANDLE_TYPE_D3D11_IMAGE_EXT 0x958B // NOLINT
#define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0x958C // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glImportMemoryWin32HandleEXTType )( GLuint memory, GLuint64 size, GLenum handleType, void *handle );
typedef void ( NN_GLL_GL_APIENTRY *glImportMemoryWin32NameEXTType )( GLuint memory, GLuint64 size, GLenum handleType, const void *name );
#define glImportMemoryWin32HandleEXT g_nngllImportMemoryWin32HandleEXT
#define glImportMemoryWin32NameEXT g_nngllImportMemoryWin32NameEXT
NN_GLL_API glImportMemoryWin32HandleEXTType g_nngllImportMemoryWin32HandleEXT;
NN_GLL_API glImportMemoryWin32NameEXTType g_nngllImportMemoryWin32NameEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_memory_object_win32();
#endif // GL_EXT_memory_object_win32

#if !defined(GL_EXT_misc_attribute)
#define GL_EXT_misc_attribute

NN_GLL_API GLboolean nngllIsSupported_GL_EXT_misc_attribute();
#endif // GL_EXT_misc_attribute

#if !defined(GL_EXT_multi_draw_arrays)
#define GL_EXT_multi_draw_arrays

typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawArraysEXTType )( GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawElementsEXTType )( GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount );
#define glMultiDrawArraysEXT g_nngllMultiDrawArraysEXT
#define glMultiDrawElementsEXT g_nngllMultiDrawElementsEXT
NN_GLL_API glMultiDrawArraysEXTType g_nngllMultiDrawArraysEXT;
NN_GLL_API glMultiDrawElementsEXTType g_nngllMultiDrawElementsEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_multi_draw_arrays();
#endif // GL_EXT_multi_draw_arrays

#if !defined(GL_EXT_multisample)
#define GL_EXT_multisample

#define GL_MULTISAMPLE_EXT 0x809D // NOLINT
#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E // NOLINT
#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F // NOLINT
#define GL_SAMPLE_MASK_EXT 0x80A0 // NOLINT
#define GL_1PASS_EXT 0x80A1 // NOLINT
#define GL_2PASS_0_EXT 0x80A2 // NOLINT
#define GL_2PASS_1_EXT 0x80A3 // NOLINT
#define GL_4PASS_0_EXT 0x80A4 // NOLINT
#define GL_4PASS_1_EXT 0x80A5 // NOLINT
#define GL_4PASS_2_EXT 0x80A6 // NOLINT
#define GL_4PASS_3_EXT 0x80A7 // NOLINT
#define GL_SAMPLE_BUFFERS_EXT 0x80A8 // NOLINT
#define GL_SAMPLES_EXT 0x80A9 // NOLINT
#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA // NOLINT
#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB // NOLINT
#define GL_SAMPLE_PATTERN_EXT 0x80AC // NOLINT
#define GL_MULTISAMPLE_BIT_EXT 0x20000000 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glSampleMaskEXTType )( GLclampf value, GLboolean invert );
typedef void ( NN_GLL_GL_APIENTRY *glSamplePatternEXTType )( GLenum pattern );
#define glSampleMaskEXT g_nngllSampleMaskEXT
#define glSamplePatternEXT g_nngllSamplePatternEXT
NN_GLL_API glSampleMaskEXTType g_nngllSampleMaskEXT;
NN_GLL_API glSamplePatternEXTType g_nngllSamplePatternEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_multisample();
#endif // GL_EXT_multisample

#if !defined(GL_EXT_packed_depth_stencil)
#define GL_EXT_packed_depth_stencil

#define GL_DEPTH_STENCIL_EXT 0x84F9 // NOLINT
#define GL_UNSIGNED_INT_24_8_EXT 0x84FA // NOLINT
#define GL_DEPTH24_STENCIL8_EXT 0x88F0 // NOLINT
#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_packed_depth_stencil();
#endif // GL_EXT_packed_depth_stencil

#if !defined(GL_EXT_packed_float)
#define GL_EXT_packed_float

#define GL_R11F_G11F_B10F_EXT 0x8C3A // NOLINT
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B // NOLINT
#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_packed_float();
#endif // GL_EXT_packed_float

#if !defined(GL_EXT_packed_pixels)
#define GL_EXT_packed_pixels

#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032 // NOLINT
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033 // NOLINT
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034 // NOLINT
#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035 // NOLINT
#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_packed_pixels();
#endif // GL_EXT_packed_pixels

#if !defined(GL_EXT_paletted_texture)
#define GL_EXT_paletted_texture

#define GL_COLOR_INDEX1_EXT 0x80E2 // NOLINT
#define GL_COLOR_INDEX2_EXT 0x80E3 // NOLINT
#define GL_COLOR_INDEX4_EXT 0x80E4 // NOLINT
#define GL_COLOR_INDEX8_EXT 0x80E5 // NOLINT
#define GL_COLOR_INDEX12_EXT 0x80E6 // NOLINT
#define GL_COLOR_INDEX16_EXT 0x80E7 // NOLINT
#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glColorTableEXTType )( GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table );
typedef void ( NN_GLL_GL_APIENTRY *glGetColorTableEXTType )( GLenum target, GLenum format, GLenum type, void *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetColorTableParameterivEXTType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetColorTableParameterfvEXTType )( GLenum target, GLenum pname, GLfloat *params );
#define glColorTableEXT g_nngllColorTableEXT
#define glGetColorTableEXT g_nngllGetColorTableEXT
#define glGetColorTableParameterivEXT g_nngllGetColorTableParameterivEXT
#define glGetColorTableParameterfvEXT g_nngllGetColorTableParameterfvEXT
NN_GLL_API glColorTableEXTType g_nngllColorTableEXT;
NN_GLL_API glGetColorTableEXTType g_nngllGetColorTableEXT;
NN_GLL_API glGetColorTableParameterivEXTType g_nngllGetColorTableParameterivEXT;
NN_GLL_API glGetColorTableParameterfvEXTType g_nngllGetColorTableParameterfvEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_paletted_texture();
#endif // GL_EXT_paletted_texture

#if !defined(GL_EXT_pixel_buffer_object)
#define GL_EXT_pixel_buffer_object

#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB // NOLINT
#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC // NOLINT
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED // NOLINT
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_pixel_buffer_object();
#endif // GL_EXT_pixel_buffer_object

#if !defined(GL_EXT_pixel_transform)
#define GL_EXT_pixel_transform

#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330 // NOLINT
#define GL_PIXEL_MAG_FILTER_EXT 0x8331 // NOLINT
#define GL_PIXEL_MIN_FILTER_EXT 0x8332 // NOLINT
#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333 // NOLINT
#define GL_CUBIC_EXT 0x8334 // NOLINT
#define GL_AVERAGE_EXT 0x8335 // NOLINT
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336 // NOLINT
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337 // NOLINT
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPixelTransformParameteriEXTType )( GLenum target, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glPixelTransformParameterfEXTType )( GLenum target, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glPixelTransformParameterivEXTType )( GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glPixelTransformParameterfvEXTType )( GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetPixelTransformParameterivEXTType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetPixelTransformParameterfvEXTType )( GLenum target, GLenum pname, GLfloat *params );
#define glPixelTransformParameteriEXT g_nngllPixelTransformParameteriEXT
#define glPixelTransformParameterfEXT g_nngllPixelTransformParameterfEXT
#define glPixelTransformParameterivEXT g_nngllPixelTransformParameterivEXT
#define glPixelTransformParameterfvEXT g_nngllPixelTransformParameterfvEXT
#define glGetPixelTransformParameterivEXT g_nngllGetPixelTransformParameterivEXT
#define glGetPixelTransformParameterfvEXT g_nngllGetPixelTransformParameterfvEXT
NN_GLL_API glPixelTransformParameteriEXTType g_nngllPixelTransformParameteriEXT;
NN_GLL_API glPixelTransformParameterfEXTType g_nngllPixelTransformParameterfEXT;
NN_GLL_API glPixelTransformParameterivEXTType g_nngllPixelTransformParameterivEXT;
NN_GLL_API glPixelTransformParameterfvEXTType g_nngllPixelTransformParameterfvEXT;
NN_GLL_API glGetPixelTransformParameterivEXTType g_nngllGetPixelTransformParameterivEXT;
NN_GLL_API glGetPixelTransformParameterfvEXTType g_nngllGetPixelTransformParameterfvEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_pixel_transform();
#endif // GL_EXT_pixel_transform

#if !defined(GL_EXT_pixel_transform_color_table)
#define GL_EXT_pixel_transform_color_table

NN_GLL_API GLboolean nngllIsSupported_GL_EXT_pixel_transform_color_table();
#endif // GL_EXT_pixel_transform_color_table

#if !defined(GL_EXT_point_parameters)
#define GL_EXT_point_parameters

#define GL_POINT_SIZE_MIN_EXT 0x8126 // NOLINT
#define GL_POINT_SIZE_MAX_EXT 0x8127 // NOLINT
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128 // NOLINT
#define GL_DISTANCE_ATTENUATION_EXT 0x8129 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterfEXTType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterfvEXTType )( GLenum pname, const GLfloat *params );
#define glPointParameterfEXT g_nngllPointParameterfEXT
#define glPointParameterfvEXT g_nngllPointParameterfvEXT
NN_GLL_API glPointParameterfEXTType g_nngllPointParameterfEXT;
NN_GLL_API glPointParameterfvEXTType g_nngllPointParameterfvEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_point_parameters();
#endif // GL_EXT_point_parameters

#if !defined(GL_EXT_polygon_offset)
#define GL_EXT_polygon_offset

#define GL_POLYGON_OFFSET_EXT 0x8037 // NOLINT
#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038 // NOLINT
#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPolygonOffsetEXTType )( GLfloat factor, GLfloat bias );
#define glPolygonOffsetEXT g_nngllPolygonOffsetEXT
NN_GLL_API glPolygonOffsetEXTType g_nngllPolygonOffsetEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_polygon_offset();
#endif // GL_EXT_polygon_offset

#if !defined(GL_EXT_polygon_offset_clamp)
#define GL_EXT_polygon_offset_clamp

#define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPolygonOffsetClampEXTType )( GLfloat factor, GLfloat units, GLfloat clamp );
#define glPolygonOffsetClampEXT g_nngllPolygonOffsetClampEXT
NN_GLL_API glPolygonOffsetClampEXTType g_nngllPolygonOffsetClampEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_polygon_offset_clamp();
#endif // GL_EXT_polygon_offset_clamp

#if !defined(GL_EXT_post_depth_coverage)
#define GL_EXT_post_depth_coverage

NN_GLL_API GLboolean nngllIsSupported_GL_EXT_post_depth_coverage();
#endif // GL_EXT_post_depth_coverage

#if !defined(GL_EXT_provoking_vertex)
#define GL_EXT_provoking_vertex

#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C // NOLINT
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D // NOLINT
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E // NOLINT
#define GL_PROVOKING_VERTEX_EXT 0x8E4F // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glProvokingVertexEXTType )( GLenum mode );
#define glProvokingVertexEXT g_nngllProvokingVertexEXT
NN_GLL_API glProvokingVertexEXTType g_nngllProvokingVertexEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_provoking_vertex();
#endif // GL_EXT_provoking_vertex

#if !defined(GL_EXT_raster_multisample)
#define GL_EXT_raster_multisample

#define GL_RASTER_MULTISAMPLE_EXT 0x9327 // NOLINT
#define GL_RASTER_SAMPLES_EXT 0x9328 // NOLINT
#define GL_MAX_RASTER_SAMPLES_EXT 0x9329 // NOLINT
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A // NOLINT
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B // NOLINT
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0x932C // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glRasterSamplesEXTType )( GLuint samples, GLboolean fixedsamplelocations );
#define glRasterSamplesEXT g_nngllRasterSamplesEXT
NN_GLL_API glRasterSamplesEXTType g_nngllRasterSamplesEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_raster_multisample();
#endif // GL_EXT_raster_multisample

#if !defined(GL_EXT_rescale_normal)
#define GL_EXT_rescale_normal

#define GL_RESCALE_NORMAL_EXT 0x803A // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_rescale_normal();
#endif // GL_EXT_rescale_normal

#if !defined(GL_EXT_semaphore)
#define GL_EXT_semaphore

#define GL_LAYOUT_GENERAL_EXT 0x958D // NOLINT
#define GL_LAYOUT_COLOR_ATTACHMENT_EXT 0x958E // NOLINT
#define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0x958F // NOLINT
#define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0x9590 // NOLINT
#define GL_LAYOUT_SHADER_READ_ONLY_EXT 0x9591 // NOLINT
#define GL_LAYOUT_TRANSFER_SRC_EXT 0x9592 // NOLINT
#define GL_LAYOUT_TRANSFER_DST_EXT 0x9593 // NOLINT
#define GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT 0x9530 // NOLINT
#define GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT 0x9531 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGenSemaphoresEXTType )( GLsizei n, GLuint *semaphores );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteSemaphoresEXTType )( GLsizei n, const GLuint *semaphores );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsSemaphoreEXTType )( GLuint semaphore );
typedef void ( NN_GLL_GL_APIENTRY *glSemaphoreParameterui64vEXTType )( GLuint semaphore, GLenum pname, const GLuint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetSemaphoreParameterui64vEXTType )( GLuint semaphore, GLenum pname, GLuint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glWaitSemaphoreEXTType )( GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts );
typedef void ( NN_GLL_GL_APIENTRY *glSignalSemaphoreEXTType )( GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts );
#define glGenSemaphoresEXT g_nngllGenSemaphoresEXT
#define glDeleteSemaphoresEXT g_nngllDeleteSemaphoresEXT
#define glIsSemaphoreEXT g_nngllIsSemaphoreEXT
#define glSemaphoreParameterui64vEXT g_nngllSemaphoreParameterui64vEXT
#define glGetSemaphoreParameterui64vEXT g_nngllGetSemaphoreParameterui64vEXT
#define glWaitSemaphoreEXT g_nngllWaitSemaphoreEXT
#define glSignalSemaphoreEXT g_nngllSignalSemaphoreEXT
NN_GLL_API glGenSemaphoresEXTType g_nngllGenSemaphoresEXT;
NN_GLL_API glDeleteSemaphoresEXTType g_nngllDeleteSemaphoresEXT;
NN_GLL_API glIsSemaphoreEXTType g_nngllIsSemaphoreEXT;
NN_GLL_API glSemaphoreParameterui64vEXTType g_nngllSemaphoreParameterui64vEXT;
NN_GLL_API glGetSemaphoreParameterui64vEXTType g_nngllGetSemaphoreParameterui64vEXT;
NN_GLL_API glWaitSemaphoreEXTType g_nngllWaitSemaphoreEXT;
NN_GLL_API glSignalSemaphoreEXTType g_nngllSignalSemaphoreEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_semaphore();
#endif // GL_EXT_semaphore

#if !defined(GL_EXT_semaphore_fd)
#define GL_EXT_semaphore_fd

typedef void ( NN_GLL_GL_APIENTRY *glImportSemaphoreFdEXTType )( GLuint semaphore, GLenum handleType, GLint fd );
#define glImportSemaphoreFdEXT g_nngllImportSemaphoreFdEXT
NN_GLL_API glImportSemaphoreFdEXTType g_nngllImportSemaphoreFdEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_semaphore_fd();
#endif // GL_EXT_semaphore_fd

#if !defined(GL_EXT_semaphore_win32)
#define GL_EXT_semaphore_win32

#define GL_HANDLE_TYPE_D3D12_FENCE_EXT 0x9594 // NOLINT
#define GL_D3D12_FENCE_VALUE_EXT 0x9595 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glImportSemaphoreWin32HandleEXTType )( GLuint semaphore, GLenum handleType, void *handle );
typedef void ( NN_GLL_GL_APIENTRY *glImportSemaphoreWin32NameEXTType )( GLuint semaphore, GLenum handleType, const void *name );
#define glImportSemaphoreWin32HandleEXT g_nngllImportSemaphoreWin32HandleEXT
#define glImportSemaphoreWin32NameEXT g_nngllImportSemaphoreWin32NameEXT
NN_GLL_API glImportSemaphoreWin32HandleEXTType g_nngllImportSemaphoreWin32HandleEXT;
NN_GLL_API glImportSemaphoreWin32NameEXTType g_nngllImportSemaphoreWin32NameEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_semaphore_win32();
#endif // GL_EXT_semaphore_win32

#if !defined(GL_EXT_secondary_color)
#define GL_EXT_secondary_color

#define GL_COLOR_SUM_EXT 0x8458 // NOLINT
#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459 // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3bEXTType )( GLbyte red, GLbyte green, GLbyte blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3bvEXTType )( const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3dEXTType )( GLdouble red, GLdouble green, GLdouble blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3dvEXTType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3fEXTType )( GLfloat red, GLfloat green, GLfloat blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3fvEXTType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3iEXTType )( GLint red, GLint green, GLint blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3ivEXTType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3sEXTType )( GLshort red, GLshort green, GLshort blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3svEXTType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3ubEXTType )( GLubyte red, GLubyte green, GLubyte blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3ubvEXTType )( const GLubyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3uiEXTType )( GLuint red, GLuint green, GLuint blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3uivEXTType )( const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3usEXTType )( GLushort red, GLushort green, GLushort blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3usvEXTType )( const GLushort *v );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColorPointerEXTType )( GLint size, GLenum type, GLsizei stride, const void *pointer );
#define glSecondaryColor3bEXT g_nngllSecondaryColor3bEXT
#define glSecondaryColor3bvEXT g_nngllSecondaryColor3bvEXT
#define glSecondaryColor3dEXT g_nngllSecondaryColor3dEXT
#define glSecondaryColor3dvEXT g_nngllSecondaryColor3dvEXT
#define glSecondaryColor3fEXT g_nngllSecondaryColor3fEXT
#define glSecondaryColor3fvEXT g_nngllSecondaryColor3fvEXT
#define glSecondaryColor3iEXT g_nngllSecondaryColor3iEXT
#define glSecondaryColor3ivEXT g_nngllSecondaryColor3ivEXT
#define glSecondaryColor3sEXT g_nngllSecondaryColor3sEXT
#define glSecondaryColor3svEXT g_nngllSecondaryColor3svEXT
#define glSecondaryColor3ubEXT g_nngllSecondaryColor3ubEXT
#define glSecondaryColor3ubvEXT g_nngllSecondaryColor3ubvEXT
#define glSecondaryColor3uiEXT g_nngllSecondaryColor3uiEXT
#define glSecondaryColor3uivEXT g_nngllSecondaryColor3uivEXT
#define glSecondaryColor3usEXT g_nngllSecondaryColor3usEXT
#define glSecondaryColor3usvEXT g_nngllSecondaryColor3usvEXT
#define glSecondaryColorPointerEXT g_nngllSecondaryColorPointerEXT
NN_GLL_API glSecondaryColor3bEXTType g_nngllSecondaryColor3bEXT;
NN_GLL_API glSecondaryColor3bvEXTType g_nngllSecondaryColor3bvEXT;
NN_GLL_API glSecondaryColor3dEXTType g_nngllSecondaryColor3dEXT;
NN_GLL_API glSecondaryColor3dvEXTType g_nngllSecondaryColor3dvEXT;
NN_GLL_API glSecondaryColor3fEXTType g_nngllSecondaryColor3fEXT;
NN_GLL_API glSecondaryColor3fvEXTType g_nngllSecondaryColor3fvEXT;
NN_GLL_API glSecondaryColor3iEXTType g_nngllSecondaryColor3iEXT;
NN_GLL_API glSecondaryColor3ivEXTType g_nngllSecondaryColor3ivEXT;
NN_GLL_API glSecondaryColor3sEXTType g_nngllSecondaryColor3sEXT;
NN_GLL_API glSecondaryColor3svEXTType g_nngllSecondaryColor3svEXT;
NN_GLL_API glSecondaryColor3ubEXTType g_nngllSecondaryColor3ubEXT;
NN_GLL_API glSecondaryColor3ubvEXTType g_nngllSecondaryColor3ubvEXT;
NN_GLL_API glSecondaryColor3uiEXTType g_nngllSecondaryColor3uiEXT;
NN_GLL_API glSecondaryColor3uivEXTType g_nngllSecondaryColor3uivEXT;
NN_GLL_API glSecondaryColor3usEXTType g_nngllSecondaryColor3usEXT;
NN_GLL_API glSecondaryColor3usvEXTType g_nngllSecondaryColor3usvEXT;
NN_GLL_API glSecondaryColorPointerEXTType g_nngllSecondaryColorPointerEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_secondary_color();
#endif // GL_EXT_secondary_color

#if !defined(GL_EXT_separate_shader_objects)
#define GL_EXT_separate_shader_objects

// For the OpenGL version of EXT_separate_shader_objects
#define GL_ACTIVE_PROGRAM_EXT 0x8B8D // NOLINT
#define GL_VERTEX_SHADER_BIT_EXT 0x00000001 // NOLINT
#define GL_FRAGMENT_SHADER_BIT_EXT 0x00000002 // NOLINT
#define GL_ALL_SHADER_BITS_EXT 0xFFFFFFFF // NOLINT
#define GL_PROGRAM_SEPARABLE_EXT 0x8258 // NOLINT
#define GL_PROGRAM_PIPELINE_BINDING_EXT 0x825A // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glUseShaderProgramEXTType )( GLenum type, GLuint program );
typedef void ( NN_GLL_GL_APIENTRY *glActiveProgramEXTType )( GLuint program );
typedef GLuint ( NN_GLL_GL_APIENTRY *glCreateShaderProgramEXTType )( GLenum type, const GLchar *string );
typedef void ( NN_GLL_GL_APIENTRY *glActiveShaderProgramEXTType )( GLuint pipeline, GLuint program );
typedef void ( NN_GLL_GL_APIENTRY *glBindProgramPipelineEXTType )( GLuint pipeline );
typedef GLuint ( NN_GLL_GL_APIENTRY *glCreateShaderProgramvEXTType )( GLenum type, GLsizei count, const GLchar **strings );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteProgramPipelinesEXTType )( GLsizei n, const GLuint *pipelines );
typedef void ( NN_GLL_GL_APIENTRY *glGenProgramPipelinesEXTType )( GLsizei n, GLuint *pipelines );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramPipelineInfoLogEXTType )( GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramPipelineivEXTType )( GLuint pipeline, GLenum pname, GLint *params );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsProgramPipelineEXTType )( GLuint pipeline );
typedef void ( NN_GLL_GL_APIENTRY *glUseProgramStagesEXTType )( GLuint pipeline, GLbitfield stages, GLuint program );
typedef void ( NN_GLL_GL_APIENTRY *glValidateProgramPipelineEXTType )( GLuint pipeline );
#define glUseShaderProgramEXT g_nngllUseShaderProgramEXT
#define glActiveProgramEXT g_nngllActiveProgramEXT
#define glCreateShaderProgramEXT g_nngllCreateShaderProgramEXT
#define glActiveShaderProgramEXT g_nngllActiveShaderProgramEXT
#define glBindProgramPipelineEXT g_nngllBindProgramPipelineEXT
#define glCreateShaderProgramvEXT g_nngllCreateShaderProgramvEXT
#define glDeleteProgramPipelinesEXT g_nngllDeleteProgramPipelinesEXT
#define glGenProgramPipelinesEXT g_nngllGenProgramPipelinesEXT
#define glGetProgramPipelineInfoLogEXT g_nngllGetProgramPipelineInfoLogEXT
#define glGetProgramPipelineivEXT g_nngllGetProgramPipelineivEXT
#define glIsProgramPipelineEXT g_nngllIsProgramPipelineEXT
#define glUseProgramStagesEXT g_nngllUseProgramStagesEXT
#define glValidateProgramPipelineEXT g_nngllValidateProgramPipelineEXT
NN_GLL_API glUseShaderProgramEXTType g_nngllUseShaderProgramEXT;
NN_GLL_API glActiveProgramEXTType g_nngllActiveProgramEXT;
NN_GLL_API glCreateShaderProgramEXTType g_nngllCreateShaderProgramEXT;
NN_GLL_API glActiveShaderProgramEXTType g_nngllActiveShaderProgramEXT;
NN_GLL_API glBindProgramPipelineEXTType g_nngllBindProgramPipelineEXT;
NN_GLL_API glCreateShaderProgramvEXTType g_nngllCreateShaderProgramvEXT;
NN_GLL_API glDeleteProgramPipelinesEXTType g_nngllDeleteProgramPipelinesEXT;
NN_GLL_API glGenProgramPipelinesEXTType g_nngllGenProgramPipelinesEXT;
NN_GLL_API glGetProgramPipelineInfoLogEXTType g_nngllGetProgramPipelineInfoLogEXT;
NN_GLL_API glGetProgramPipelineivEXTType g_nngllGetProgramPipelineivEXT;
NN_GLL_API glIsProgramPipelineEXTType g_nngllIsProgramPipelineEXT;
NN_GLL_API glUseProgramStagesEXTType g_nngllUseProgramStagesEXT;
NN_GLL_API glValidateProgramPipelineEXTType g_nngllValidateProgramPipelineEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_separate_shader_objects();
#endif // GL_EXT_separate_shader_objects

#if !defined(GL_EXT_separate_specular_color)
#define GL_EXT_separate_specular_color

#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8 // NOLINT
#define GL_SINGLE_COLOR_EXT 0x81F9 // NOLINT
#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_separate_specular_color();
#endif // GL_EXT_separate_specular_color

#if !defined(GL_EXT_shader_framebuffer_fetch)
#define GL_EXT_shader_framebuffer_fetch

#define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_shader_framebuffer_fetch();
#endif // GL_EXT_shader_framebuffer_fetch

#if !defined(GL_EXT_shader_framebuffer_fetch_non_coherent)
#define GL_EXT_shader_framebuffer_fetch_non_coherent

typedef void ( NN_GLL_GL_APIENTRY *glFramebufferFetchBarrierEXTType )(  );
#define glFramebufferFetchBarrierEXT g_nngllFramebufferFetchBarrierEXT
NN_GLL_API glFramebufferFetchBarrierEXTType g_nngllFramebufferFetchBarrierEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_shader_framebuffer_fetch_non_coherent();
#endif // GL_EXT_shader_framebuffer_fetch_non_coherent

#if !defined(GL_EXT_shader_image_load_formatted)
#define GL_EXT_shader_image_load_formatted

NN_GLL_API GLboolean nngllIsSupported_GL_EXT_shader_image_load_formatted();
#endif // GL_EXT_shader_image_load_formatted

#if !defined(GL_EXT_shader_image_load_store)
#define GL_EXT_shader_image_load_store

#define GL_MAX_IMAGE_UNITS_EXT 0x8F38 // NOLINT
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39 // NOLINT
#define GL_IMAGE_BINDING_NAME_EXT 0x8F3A // NOLINT
#define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B // NOLINT
#define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C // NOLINT
#define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D // NOLINT
#define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E // NOLINT
#define GL_IMAGE_1D_EXT 0x904C // NOLINT
#define GL_IMAGE_2D_EXT 0x904D // NOLINT
#define GL_IMAGE_3D_EXT 0x904E // NOLINT
#define GL_IMAGE_2D_RECT_EXT 0x904F // NOLINT
#define GL_IMAGE_CUBE_EXT 0x9050 // NOLINT
#define GL_IMAGE_BUFFER_EXT 0x9051 // NOLINT
#define GL_IMAGE_1D_ARRAY_EXT 0x9052 // NOLINT
#define GL_IMAGE_2D_ARRAY_EXT 0x9053 // NOLINT
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054 // NOLINT
#define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055 // NOLINT
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056 // NOLINT
#define GL_INT_IMAGE_1D_EXT 0x9057 // NOLINT
#define GL_INT_IMAGE_2D_EXT 0x9058 // NOLINT
#define GL_INT_IMAGE_3D_EXT 0x9059 // NOLINT
#define GL_INT_IMAGE_2D_RECT_EXT 0x905A // NOLINT
#define GL_INT_IMAGE_CUBE_EXT 0x905B // NOLINT
#define GL_INT_IMAGE_BUFFER_EXT 0x905C // NOLINT
#define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D // NOLINT
#define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E // NOLINT
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F // NOLINT
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060 // NOLINT
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069 // NOLINT
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A // NOLINT
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B // NOLINT
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C // NOLINT
#define GL_MAX_IMAGE_SAMPLES_EXT 0x906D // NOLINT
#define GL_IMAGE_BINDING_FORMAT_EXT 0x906E // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001 // NOLINT
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002 // NOLINT
#define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004 // NOLINT
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008 // NOLINT
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020 // NOLINT
#define GL_COMMAND_BARRIER_BIT_EXT 0x00000040 // NOLINT
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080 // NOLINT
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100 // NOLINT
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200 // NOLINT
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800 // NOLINT
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000 // NOLINT
#define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBindImageTextureEXTType )( GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format );
typedef void ( NN_GLL_GL_APIENTRY *glMemoryBarrierEXTType )( GLbitfield barriers );
#define glBindImageTextureEXT g_nngllBindImageTextureEXT
#define glMemoryBarrierEXT g_nngllMemoryBarrierEXT
NN_GLL_API glBindImageTextureEXTType g_nngllBindImageTextureEXT;
NN_GLL_API glMemoryBarrierEXTType g_nngllMemoryBarrierEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_shader_image_load_store();
#endif // GL_EXT_shader_image_load_store

#if !defined(GL_EXT_shader_integer_mix)
#define GL_EXT_shader_integer_mix

NN_GLL_API GLboolean nngllIsSupported_GL_EXT_shader_integer_mix();
#endif // GL_EXT_shader_integer_mix

#if !defined(GL_EXT_shadow_funcs)
#define GL_EXT_shadow_funcs

NN_GLL_API GLboolean nngllIsSupported_GL_EXT_shadow_funcs();
#endif // GL_EXT_shadow_funcs

#if !defined(GL_EXT_shared_texture_palette)
#define GL_EXT_shared_texture_palette

#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_shared_texture_palette();
#endif // GL_EXT_shared_texture_palette

#if !defined(GL_EXT_sparse_texture2)
#define GL_EXT_sparse_texture2

NN_GLL_API GLboolean nngllIsSupported_GL_EXT_sparse_texture2();
#endif // GL_EXT_sparse_texture2

#if !defined(GL_EXT_stencil_clear_tag)
#define GL_EXT_stencil_clear_tag

#define GL_STENCIL_TAG_BITS_EXT 0x88F2 // NOLINT
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glStencilClearTagEXTType )( GLsizei stencilTagBits, GLuint stencilClearTag );
#define glStencilClearTagEXT g_nngllStencilClearTagEXT
NN_GLL_API glStencilClearTagEXTType g_nngllStencilClearTagEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_stencil_clear_tag();
#endif // GL_EXT_stencil_clear_tag

#if !defined(GL_EXT_stencil_two_side)
#define GL_EXT_stencil_two_side

#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910 // NOLINT
#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glActiveStencilFaceEXTType )( GLenum face );
#define glActiveStencilFaceEXT g_nngllActiveStencilFaceEXT
NN_GLL_API glActiveStencilFaceEXTType g_nngllActiveStencilFaceEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_stencil_two_side();
#endif // GL_EXT_stencil_two_side

#if !defined(GL_EXT_stencil_wrap)
#define GL_EXT_stencil_wrap

#define GL_INCR_WRAP_EXT 0x8507 // NOLINT
#define GL_DECR_WRAP_EXT 0x8508 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_stencil_wrap();
#endif // GL_EXT_stencil_wrap

#if !defined(GL_EXT_subtexture)
#define GL_EXT_subtexture

typedef void ( NN_GLL_GL_APIENTRY *glTexSubImage1DEXTType )( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTexSubImage2DEXTType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels );
#define glTexSubImage1DEXT g_nngllTexSubImage1DEXT
#define glTexSubImage2DEXT g_nngllTexSubImage2DEXT
NN_GLL_API glTexSubImage1DEXTType g_nngllTexSubImage1DEXT;
NN_GLL_API glTexSubImage2DEXTType g_nngllTexSubImage2DEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_subtexture();
#endif // GL_EXT_subtexture

#if !defined(GL_EXT_texture)
#define GL_EXT_texture

#define GL_ALPHA4_EXT 0x803B // NOLINT
#define GL_ALPHA8_EXT 0x803C // NOLINT
#define GL_ALPHA12_EXT 0x803D // NOLINT
#define GL_ALPHA16_EXT 0x803E // NOLINT
#define GL_LUMINANCE4_EXT 0x803F // NOLINT
#define GL_LUMINANCE8_EXT 0x8040 // NOLINT
#define GL_LUMINANCE12_EXT 0x8041 // NOLINT
#define GL_LUMINANCE16_EXT 0x8042 // NOLINT
#define GL_LUMINANCE4_ALPHA4_EXT 0x8043 // NOLINT
#define GL_LUMINANCE6_ALPHA2_EXT 0x8044 // NOLINT
#define GL_LUMINANCE8_ALPHA8_EXT 0x8045 // NOLINT
#define GL_LUMINANCE12_ALPHA4_EXT 0x8046 // NOLINT
#define GL_LUMINANCE12_ALPHA12_EXT 0x8047 // NOLINT
#define GL_LUMINANCE16_ALPHA16_EXT 0x8048 // NOLINT
#define GL_INTENSITY_EXT 0x8049 // NOLINT
#define GL_INTENSITY4_EXT 0x804A // NOLINT
#define GL_INTENSITY8_EXT 0x804B // NOLINT
#define GL_INTENSITY12_EXT 0x804C // NOLINT
#define GL_INTENSITY16_EXT 0x804D // NOLINT
#define GL_RGB2_EXT 0x804E // NOLINT
#define GL_RGB4_EXT 0x804F // NOLINT
#define GL_RGB5_EXT 0x8050 // NOLINT
#define GL_RGB8_EXT 0x8051 // NOLINT
#define GL_RGB10_EXT 0x8052 // NOLINT
#define GL_RGB12_EXT 0x8053 // NOLINT
#define GL_RGB16_EXT 0x8054 // NOLINT
#define GL_RGBA2_EXT 0x8055 // NOLINT
#define GL_RGBA4_EXT 0x8056 // NOLINT
#define GL_RGB5_A1_EXT 0x8057 // NOLINT
#define GL_RGBA8_EXT 0x8058 // NOLINT
#define GL_RGB10_A2_EXT 0x8059 // NOLINT
#define GL_RGBA12_EXT 0x805A // NOLINT
#define GL_RGBA16_EXT 0x805B // NOLINT
#define GL_TEXTURE_RED_SIZE_EXT 0x805C // NOLINT
#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D // NOLINT
#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E // NOLINT
#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F // NOLINT
#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060 // NOLINT
#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061 // NOLINT
#define GL_REPLACE_EXT 0x8062 // NOLINT
#define GL_PROXY_TEXTURE_1D_EXT 0x8063 // NOLINT
#define GL_PROXY_TEXTURE_2D_EXT 0x8064 // NOLINT
#define GL_TEXTURE_TOO_LARGE_EXT 0x8065 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture();
#endif // GL_EXT_texture

#if !defined(GL_EXT_texture3D)
#define GL_EXT_texture3D

#define GL_PACK_SKIP_IMAGES_EXT 0x806B // NOLINT
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C // NOLINT
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D // NOLINT
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E // NOLINT
#define GL_TEXTURE_3D_EXT 0x806F // NOLINT
#define GL_PROXY_TEXTURE_3D_EXT 0x8070 // NOLINT
#define GL_TEXTURE_DEPTH_EXT 0x8071 // NOLINT
#define GL_TEXTURE_WRAP_R_EXT 0x8072 // NOLINT
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTexImage3DEXTType )( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTexSubImage3DEXTType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels );
#define glTexImage3DEXT g_nngllTexImage3DEXT
#define glTexSubImage3DEXT g_nngllTexSubImage3DEXT
NN_GLL_API glTexImage3DEXTType g_nngllTexImage3DEXT;
NN_GLL_API glTexSubImage3DEXTType g_nngllTexSubImage3DEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture3D();
#endif // GL_EXT_texture3D

#if !defined(GL_EXT_texture_array)
#define GL_EXT_texture_array

#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18 // NOLINT
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19 // NOLINT
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A // NOLINT
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B // NOLINT
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C // NOLINT
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D // NOLINT
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF // NOLINT
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTextureLayerEXTType )( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer );
#define glFramebufferTextureLayerEXT g_nngllFramebufferTextureLayerEXT
NN_GLL_API glFramebufferTextureLayerEXTType g_nngllFramebufferTextureLayerEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_array();
#endif // GL_EXT_texture_array

#if !defined(GL_EXT_texture_buffer_object)
#define GL_EXT_texture_buffer_object

#define GL_TEXTURE_BUFFER_EXT 0x8C2A // NOLINT
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B // NOLINT
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C // NOLINT
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D // NOLINT
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTexBufferEXTType )( GLenum target, GLenum internalformat, GLuint buffer );
#define glTexBufferEXT g_nngllTexBufferEXT
NN_GLL_API glTexBufferEXTType g_nngllTexBufferEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_buffer_object();
#endif // GL_EXT_texture_buffer_object

#if !defined(GL_EXT_texture_compression_latc)
#define GL_EXT_texture_compression_latc

#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70 // NOLINT
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71 // NOLINT
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72 // NOLINT
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_compression_latc();
#endif // GL_EXT_texture_compression_latc

#if !defined(GL_EXT_texture_compression_rgtc)
#define GL_EXT_texture_compression_rgtc

#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB // NOLINT
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC // NOLINT
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD // NOLINT
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_compression_rgtc();
#endif // GL_EXT_texture_compression_rgtc

#if !defined(GL_EXT_texture_compression_s3tc)
#define GL_EXT_texture_compression_s3tc

#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0 // NOLINT
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1 // NOLINT
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2 // NOLINT
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_compression_s3tc();
#endif // GL_EXT_texture_compression_s3tc
// Replaced by ARB_texture_cube_map, but was apparently shipped anyway?

#if !defined(GL_EXT_texture_cube_map)
#define GL_EXT_texture_cube_map

#define GL_NORMAL_MAP_EXT 0x8511 // NOLINT
#define GL_REFLECTION_MAP_EXT 0x8512 // NOLINT
#define GL_TEXTURE_CUBE_MAP_EXT 0x8513 // NOLINT
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514 // NOLINT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515 // NOLINT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516 // NOLINT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517 // NOLINT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518 // NOLINT
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519 // NOLINT
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A // NOLINT
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B // NOLINT
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_cube_map();
#endif // GL_EXT_texture_cube_map

#if !defined(GL_EXT_texture_env_add)
#define GL_EXT_texture_env_add

NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_env_add();
#endif // GL_EXT_texture_env_add

#if !defined(GL_EXT_texture_env_combine)
#define GL_EXT_texture_env_combine

#define GL_COMBINE_EXT 0x8570 // NOLINT
#define GL_COMBINE_RGB_EXT 0x8571 // NOLINT
#define GL_COMBINE_ALPHA_EXT 0x8572 // NOLINT
#define GL_RGB_SCALE_EXT 0x8573 // NOLINT
#define GL_ADD_SIGNED_EXT 0x8574 // NOLINT
#define GL_INTERPOLATE_EXT 0x8575 // NOLINT
#define GL_CONSTANT_EXT 0x8576 // NOLINT
#define GL_PRIMARY_COLOR_EXT 0x8577 // NOLINT
#define GL_PREVIOUS_EXT 0x8578 // NOLINT
#define GL_SOURCE0_RGB_EXT 0x8580 // NOLINT
#define GL_SOURCE1_RGB_EXT 0x8581 // NOLINT
#define GL_SOURCE2_RGB_EXT 0x8582 // NOLINT
#define GL_SOURCE0_ALPHA_EXT 0x8588 // NOLINT
#define GL_SOURCE1_ALPHA_EXT 0x8589 // NOLINT
#define GL_SOURCE2_ALPHA_EXT 0x858A // NOLINT
#define GL_OPERAND0_RGB_EXT 0x8590 // NOLINT
#define GL_OPERAND1_RGB_EXT 0x8591 // NOLINT
#define GL_OPERAND2_RGB_EXT 0x8592 // NOLINT
#define GL_OPERAND0_ALPHA_EXT 0x8598 // NOLINT
#define GL_OPERAND1_ALPHA_EXT 0x8599 // NOLINT
#define GL_OPERAND2_ALPHA_EXT 0x859A // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_env_combine();
#endif // GL_EXT_texture_env_combine

#if !defined(GL_EXT_texture_env_dot3)
#define GL_EXT_texture_env_dot3

#define GL_DOT3_RGB_EXT 0x8740 // NOLINT
#define GL_DOT3_RGBA_EXT 0x8741 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_env_dot3();
#endif // GL_EXT_texture_env_dot3

#if !defined(GL_EXT_texture_filter_anisotropic)
#define GL_EXT_texture_filter_anisotropic

#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE // NOLINT
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_filter_anisotropic();
#endif // GL_EXT_texture_filter_anisotropic

#if !defined(GL_EXT_texture_filter_minmax)
#define GL_EXT_texture_filter_minmax

#define GL_TEXTURE_REDUCTION_MODE_EXT 0x9366 // NOLINT
#define GL_WEIGHTED_AVERAGE_EXT 0x9367 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_filter_minmax();
#endif // GL_EXT_texture_filter_minmax

#if !defined(GL_EXT_texture_integer)
#define GL_EXT_texture_integer

#define GL_RGBA32UI_EXT 0x8D70 // NOLINT
#define GL_RGB32UI_EXT 0x8D71 // NOLINT
#define GL_ALPHA32UI_EXT 0x8D72 // NOLINT
#define GL_INTENSITY32UI_EXT 0x8D73 // NOLINT
#define GL_LUMINANCE32UI_EXT 0x8D74 // NOLINT
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75 // NOLINT
#define GL_RGBA16UI_EXT 0x8D76 // NOLINT
#define GL_RGB16UI_EXT 0x8D77 // NOLINT
#define GL_ALPHA16UI_EXT 0x8D78 // NOLINT
#define GL_INTENSITY16UI_EXT 0x8D79 // NOLINT
#define GL_LUMINANCE16UI_EXT 0x8D7A // NOLINT
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B // NOLINT
#define GL_RGBA8UI_EXT 0x8D7C // NOLINT
#define GL_RGB8UI_EXT 0x8D7D // NOLINT
#define GL_ALPHA8UI_EXT 0x8D7E // NOLINT
#define GL_INTENSITY8UI_EXT 0x8D7F // NOLINT
#define GL_LUMINANCE8UI_EXT 0x8D80 // NOLINT
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81 // NOLINT
#define GL_RGBA32I_EXT 0x8D82 // NOLINT
#define GL_RGB32I_EXT 0x8D83 // NOLINT
#define GL_ALPHA32I_EXT 0x8D84 // NOLINT
#define GL_INTENSITY32I_EXT 0x8D85 // NOLINT
#define GL_LUMINANCE32I_EXT 0x8D86 // NOLINT
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87 // NOLINT
#define GL_RGBA16I_EXT 0x8D88 // NOLINT
#define GL_RGB16I_EXT 0x8D89 // NOLINT
#define GL_ALPHA16I_EXT 0x8D8A // NOLINT
#define GL_INTENSITY16I_EXT 0x8D8B // NOLINT
#define GL_LUMINANCE16I_EXT 0x8D8C // NOLINT
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D // NOLINT
#define GL_RGBA8I_EXT 0x8D8E // NOLINT
#define GL_RGB8I_EXT 0x8D8F // NOLINT
#define GL_ALPHA8I_EXT 0x8D90 // NOLINT
#define GL_INTENSITY8I_EXT 0x8D91 // NOLINT
#define GL_LUMINANCE8I_EXT 0x8D92 // NOLINT
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93 // NOLINT
#define GL_RED_INTEGER_EXT 0x8D94 // NOLINT
#define GL_GREEN_INTEGER_EXT 0x8D95 // NOLINT
#define GL_BLUE_INTEGER_EXT 0x8D96 // NOLINT
#define GL_ALPHA_INTEGER_EXT 0x8D97 // NOLINT
#define GL_RGB_INTEGER_EXT 0x8D98 // NOLINT
#define GL_RGBA_INTEGER_EXT 0x8D99 // NOLINT
#define GL_BGR_INTEGER_EXT 0x8D9A // NOLINT
#define GL_BGRA_INTEGER_EXT 0x8D9B // NOLINT
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C // NOLINT
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D // NOLINT
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTexParameterIivEXTType )( GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glTexParameterIuivEXTType )( GLenum target, GLenum pname, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexParameterIivEXTType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexParameterIuivEXTType )( GLenum target, GLenum pname, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glClearColorIiEXTType )( GLint red, GLint green, GLint blue, GLint alpha );
typedef void ( NN_GLL_GL_APIENTRY *glClearColorIuiEXTType )( GLuint red, GLuint green, GLuint blue, GLuint alpha );
#define glTexParameterIivEXT g_nngllTexParameterIivEXT
#define glTexParameterIuivEXT g_nngllTexParameterIuivEXT
#define glGetTexParameterIivEXT g_nngllGetTexParameterIivEXT
#define glGetTexParameterIuivEXT g_nngllGetTexParameterIuivEXT
#define glClearColorIiEXT g_nngllClearColorIiEXT
#define glClearColorIuiEXT g_nngllClearColorIuiEXT
NN_GLL_API glTexParameterIivEXTType g_nngllTexParameterIivEXT;
NN_GLL_API glTexParameterIuivEXTType g_nngllTexParameterIuivEXT;
NN_GLL_API glGetTexParameterIivEXTType g_nngllGetTexParameterIivEXT;
NN_GLL_API glGetTexParameterIuivEXTType g_nngllGetTexParameterIuivEXT;
NN_GLL_API glClearColorIiEXTType g_nngllClearColorIiEXT;
NN_GLL_API glClearColorIuiEXTType g_nngllClearColorIuiEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_integer();
#endif // GL_EXT_texture_integer

#if !defined(GL_EXT_texture_lod_bias)
#define GL_EXT_texture_lod_bias

#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD // NOLINT
#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500 // NOLINT
#define GL_TEXTURE_LOD_BIAS_EXT 0x8501 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_lod_bias();
#endif // GL_EXT_texture_lod_bias

#if !defined(GL_EXT_texture_mirror_clamp)
#define GL_EXT_texture_mirror_clamp

#define GL_MIRROR_CLAMP_EXT 0x8742 // NOLINT
#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743 // NOLINT
#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_mirror_clamp();
#endif // GL_EXT_texture_mirror_clamp

#if !defined(GL_EXT_texture_object)
#define GL_EXT_texture_object

#define GL_TEXTURE_PRIORITY_EXT 0x8066 // NOLINT
#define GL_TEXTURE_RESIDENT_EXT 0x8067 // NOLINT
#define GL_TEXTURE_1D_BINDING_EXT 0x8068 // NOLINT
#define GL_TEXTURE_2D_BINDING_EXT 0x8069 // NOLINT
#define GL_TEXTURE_3D_BINDING_EXT 0x806A // NOLINT
typedef GLboolean ( NN_GLL_GL_APIENTRY *glAreTexturesResidentEXTType )( GLsizei n, const GLuint *textures, GLboolean *residences );
typedef void ( NN_GLL_GL_APIENTRY *glBindTextureEXTType )( GLenum target, GLuint texture );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteTexturesEXTType )( GLsizei n, const GLuint *textures );
typedef void ( NN_GLL_GL_APIENTRY *glGenTexturesEXTType )( GLsizei n, GLuint *textures );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsTextureEXTType )( GLuint texture );
typedef void ( NN_GLL_GL_APIENTRY *glPrioritizeTexturesEXTType )( GLsizei n, const GLuint *textures, const GLclampf *priorities );
#define glAreTexturesResidentEXT g_nngllAreTexturesResidentEXT
#define glBindTextureEXT g_nngllBindTextureEXT
#define glDeleteTexturesEXT g_nngllDeleteTexturesEXT
#define glGenTexturesEXT g_nngllGenTexturesEXT
#define glIsTextureEXT g_nngllIsTextureEXT
#define glPrioritizeTexturesEXT g_nngllPrioritizeTexturesEXT
NN_GLL_API glAreTexturesResidentEXTType g_nngllAreTexturesResidentEXT;
NN_GLL_API glBindTextureEXTType g_nngllBindTextureEXT;
NN_GLL_API glDeleteTexturesEXTType g_nngllDeleteTexturesEXT;
NN_GLL_API glGenTexturesEXTType g_nngllGenTexturesEXT;
NN_GLL_API glIsTextureEXTType g_nngllIsTextureEXT;
NN_GLL_API glPrioritizeTexturesEXTType g_nngllPrioritizeTexturesEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_object();
#endif // GL_EXT_texture_object

#if !defined(GL_EXT_texture_perturb_normal)
#define GL_EXT_texture_perturb_normal

#define GL_PERTURB_EXT 0x85AE // NOLINT
#define GL_TEXTURE_NORMAL_EXT 0x85AF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTextureNormalEXTType )( GLenum mode );
#define glTextureNormalEXT g_nngllTextureNormalEXT
NN_GLL_API glTextureNormalEXTType g_nngllTextureNormalEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_perturb_normal();
#endif // GL_EXT_texture_perturb_normal

#if !defined(GL_EXT_texture_sRGB)
#define GL_EXT_texture_sRGB

#define GL_SRGB_EXT 0x8C40 // NOLINT
#define GL_SRGB8_EXT 0x8C41 // NOLINT
#define GL_SRGB_ALPHA_EXT 0x8C42 // NOLINT
#define GL_SRGB8_ALPHA8_EXT 0x8C43 // NOLINT
#define GL_SLUMINANCE_ALPHA_EXT 0x8C44 // NOLINT
#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45 // NOLINT
#define GL_SLUMINANCE_EXT 0x8C46 // NOLINT
#define GL_SLUMINANCE8_EXT 0x8C47 // NOLINT
#define GL_COMPRESSED_SRGB_EXT 0x8C48 // NOLINT
#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49 // NOLINT
#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A // NOLINT
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B // NOLINT
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C // NOLINT
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D // NOLINT
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E // NOLINT
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_sRGB();
#endif // GL_EXT_texture_sRGB

#if !defined(GL_EXT_texture_sRGB_decode)
#define GL_EXT_texture_sRGB_decode

#define GL_TEXTURE_SRGB_DECODE_EXT 0x8A48 // NOLINT
#define GL_DECODE_EXT 0x8A49 // NOLINT
#define GL_SKIP_DECODE_EXT 0x8A4A // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_sRGB_decode();
#endif // GL_EXT_texture_sRGB_decode

#if !defined(GL_EXT_texture_shared_exponent)
#define GL_EXT_texture_shared_exponent

#define GL_RGB9_E5_EXT 0x8C3D // NOLINT
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E // NOLINT
#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_shared_exponent();
#endif // GL_EXT_texture_shared_exponent

#if !defined(GL_EXT_texture_snorm)
#define GL_EXT_texture_snorm

#define GL_ALPHA_SNORM 0x9010 // NOLINT
#define GL_LUMINANCE_SNORM 0x9011 // NOLINT
#define GL_LUMINANCE_ALPHA_SNORM 0x9012 // NOLINT
#define GL_INTENSITY_SNORM 0x9013 // NOLINT
#define GL_ALPHA8_SNORM 0x9014 // NOLINT
#define GL_LUMINANCE8_SNORM 0x9015 // NOLINT
#define GL_LUMINANCE8_ALPHA8_SNORM 0x9016 // NOLINT
#define GL_INTENSITY8_SNORM 0x9017 // NOLINT
#define GL_ALPHA16_SNORM 0x9018 // NOLINT
#define GL_LUMINANCE16_SNORM 0x9019 // NOLINT
#define GL_LUMINANCE16_ALPHA16_SNORM 0x901A // NOLINT
#define GL_INTENSITY16_SNORM 0x901B // NOLINT
#define GL_RED_SNORM 0x8F90 // NOLINT
#define GL_RG_SNORM 0x8F91 // NOLINT
#define GL_RGB_SNORM 0x8F92 // NOLINT
#define GL_RGBA_SNORM 0x8F93 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_snorm();
#endif // GL_EXT_texture_snorm

#if !defined(GL_EXT_texture_swizzle)
#define GL_EXT_texture_swizzle

#define GL_TEXTURE_SWIZZLE_R_EXT 0x8E42 // NOLINT
#define GL_TEXTURE_SWIZZLE_G_EXT 0x8E43 // NOLINT
#define GL_TEXTURE_SWIZZLE_B_EXT 0x8E44 // NOLINT
#define GL_TEXTURE_SWIZZLE_A_EXT 0x8E45 // NOLINT
#define GL_TEXTURE_SWIZZLE_RGBA_EXT 0x8E46 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_texture_swizzle();
#endif // GL_EXT_texture_swizzle

#if !defined(GL_EXT_timer_query)
#define GL_EXT_timer_query

#define GL_TIME_ELAPSED_EXT 0x88BF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryObjecti64vEXTType )( GLuint id, GLenum pname, GLint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetQueryObjectui64vEXTType )( GLuint id, GLenum pname, GLuint64 *params );
#define glGetQueryObjecti64vEXT g_nngllGetQueryObjecti64vEXT
#define glGetQueryObjectui64vEXT g_nngllGetQueryObjectui64vEXT
NN_GLL_API glGetQueryObjecti64vEXTType g_nngllGetQueryObjecti64vEXT;
NN_GLL_API glGetQueryObjectui64vEXTType g_nngllGetQueryObjectui64vEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_timer_query();
#endif // GL_EXT_timer_query

#if !defined(GL_EXT_transform_feedback)
#define GL_EXT_transform_feedback

#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F // NOLINT
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C // NOLINT
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D // NOLINT
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87 // NOLINT
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88 // NOLINT
#define GL_RASTERIZER_DISCARD_EXT 0x8C89 // NOLINT
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A // NOLINT
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B // NOLINT
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80 // NOLINT
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F // NOLINT
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBeginTransformFeedbackEXTType )( GLenum primitiveMode );
typedef void ( NN_GLL_GL_APIENTRY *glEndTransformFeedbackEXTType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glBindBufferRangeEXTType )( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
typedef void ( NN_GLL_GL_APIENTRY *glBindBufferOffsetEXTType )( GLenum target, GLuint index, GLuint buffer, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glBindBufferBaseEXTType )( GLenum target, GLuint index, GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glTransformFeedbackVaryingsEXTType )( GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode );
typedef void ( NN_GLL_GL_APIENTRY *glGetTransformFeedbackVaryingEXTType )( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
#define glBeginTransformFeedbackEXT g_nngllBeginTransformFeedbackEXT
#define glEndTransformFeedbackEXT g_nngllEndTransformFeedbackEXT
#define glBindBufferRangeEXT g_nngllBindBufferRangeEXT
#define glBindBufferOffsetEXT g_nngllBindBufferOffsetEXT
#define glBindBufferBaseEXT g_nngllBindBufferBaseEXT
#define glTransformFeedbackVaryingsEXT g_nngllTransformFeedbackVaryingsEXT
#define glGetTransformFeedbackVaryingEXT g_nngllGetTransformFeedbackVaryingEXT
NN_GLL_API glBeginTransformFeedbackEXTType g_nngllBeginTransformFeedbackEXT;
NN_GLL_API glEndTransformFeedbackEXTType g_nngllEndTransformFeedbackEXT;
NN_GLL_API glBindBufferRangeEXTType g_nngllBindBufferRangeEXT;
NN_GLL_API glBindBufferOffsetEXTType g_nngllBindBufferOffsetEXT;
NN_GLL_API glBindBufferBaseEXTType g_nngllBindBufferBaseEXT;
NN_GLL_API glTransformFeedbackVaryingsEXTType g_nngllTransformFeedbackVaryingsEXT;
NN_GLL_API glGetTransformFeedbackVaryingEXTType g_nngllGetTransformFeedbackVaryingEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_transform_feedback();
#endif // GL_EXT_transform_feedback

#if !defined(GL_EXT_vertex_array)
#define GL_EXT_vertex_array

#define GL_VERTEX_ARRAY_EXT 0x8074 // NOLINT
#define GL_NORMAL_ARRAY_EXT 0x8075 // NOLINT
#define GL_COLOR_ARRAY_EXT 0x8076 // NOLINT
#define GL_INDEX_ARRAY_EXT 0x8077 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078 // NOLINT
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079 // NOLINT
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A // NOLINT
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B // NOLINT
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C // NOLINT
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D // NOLINT
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E // NOLINT
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F // NOLINT
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080 // NOLINT
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081 // NOLINT
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082 // NOLINT
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083 // NOLINT
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084 // NOLINT
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085 // NOLINT
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086 // NOLINT
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A // NOLINT
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B // NOLINT
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C // NOLINT
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D // NOLINT
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E // NOLINT
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F // NOLINT
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090 // NOLINT
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092 // NOLINT
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glArrayElementEXTType )( GLint i );
typedef void ( NN_GLL_GL_APIENTRY *glColorPointerEXTType )( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glDrawArraysEXTType )( GLenum mode, GLint first, GLsizei count );
typedef void ( NN_GLL_GL_APIENTRY *glEdgeFlagPointerEXTType )( GLsizei stride, GLsizei count, const GLboolean *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glGetPointervEXTType )( GLenum pname, void **params );
typedef void ( NN_GLL_GL_APIENTRY *glIndexPointerEXTType )( GLenum type, GLsizei stride, GLsizei count, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glNormalPointerEXTType )( GLenum type, GLsizei stride, GLsizei count, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordPointerEXTType )( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glVertexPointerEXTType )( GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer );
#define glArrayElementEXT g_nngllArrayElementEXT
#define glColorPointerEXT g_nngllColorPointerEXT
#define glDrawArraysEXT g_nngllDrawArraysEXT
#define glEdgeFlagPointerEXT g_nngllEdgeFlagPointerEXT
#define glGetPointervEXT g_nngllGetPointervEXT
#define glIndexPointerEXT g_nngllIndexPointerEXT
#define glNormalPointerEXT g_nngllNormalPointerEXT
#define glTexCoordPointerEXT g_nngllTexCoordPointerEXT
#define glVertexPointerEXT g_nngllVertexPointerEXT
NN_GLL_API glArrayElementEXTType g_nngllArrayElementEXT;
NN_GLL_API glColorPointerEXTType g_nngllColorPointerEXT;
NN_GLL_API glDrawArraysEXTType g_nngllDrawArraysEXT;
NN_GLL_API glEdgeFlagPointerEXTType g_nngllEdgeFlagPointerEXT;
NN_GLL_API glGetPointervEXTType g_nngllGetPointervEXT;
NN_GLL_API glIndexPointerEXTType g_nngllIndexPointerEXT;
NN_GLL_API glNormalPointerEXTType g_nngllNormalPointerEXT;
NN_GLL_API glTexCoordPointerEXTType g_nngllTexCoordPointerEXT;
NN_GLL_API glVertexPointerEXTType g_nngllVertexPointerEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_vertex_array();
#endif // GL_EXT_vertex_array

#if !defined(GL_EXT_vertex_array_bgra)
#define GL_EXT_vertex_array_bgra

NN_GLL_API GLboolean nngllIsSupported_GL_EXT_vertex_array_bgra();
#endif // GL_EXT_vertex_array_bgra

#if !defined(GL_EXT_vertex_attrib_64bit)
#define GL_EXT_vertex_attrib_64bit

#define GL_DOUBLE_VEC2_EXT 0x8FFC // NOLINT
#define GL_DOUBLE_VEC3_EXT 0x8FFD // NOLINT
#define GL_DOUBLE_VEC4_EXT 0x8FFE // NOLINT
#define GL_DOUBLE_MAT2_EXT 0x8F46 // NOLINT
#define GL_DOUBLE_MAT3_EXT 0x8F47 // NOLINT
#define GL_DOUBLE_MAT4_EXT 0x8F48 // NOLINT
#define GL_DOUBLE_MAT2x3_EXT 0x8F49 // NOLINT
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A // NOLINT
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B // NOLINT
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C // NOLINT
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D // NOLINT
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL1dEXTType )( GLuint index, GLdouble x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL2dEXTType )( GLuint index, GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL3dEXTType )( GLuint index, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL4dEXTType )( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL1dvEXTType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL2dvEXTType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL3dvEXTType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL4dvEXTType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribLPointerEXTType )( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribLdvEXTType )( GLuint index, GLenum pname, GLdouble *params );
#define glVertexAttribL1dEXT g_nngllVertexAttribL1dEXT
#define glVertexAttribL2dEXT g_nngllVertexAttribL2dEXT
#define glVertexAttribL3dEXT g_nngllVertexAttribL3dEXT
#define glVertexAttribL4dEXT g_nngllVertexAttribL4dEXT
#define glVertexAttribL1dvEXT g_nngllVertexAttribL1dvEXT
#define glVertexAttribL2dvEXT g_nngllVertexAttribL2dvEXT
#define glVertexAttribL3dvEXT g_nngllVertexAttribL3dvEXT
#define glVertexAttribL4dvEXT g_nngllVertexAttribL4dvEXT
#define glVertexAttribLPointerEXT g_nngllVertexAttribLPointerEXT
#define glGetVertexAttribLdvEXT g_nngllGetVertexAttribLdvEXT
NN_GLL_API glVertexAttribL1dEXTType g_nngllVertexAttribL1dEXT;
NN_GLL_API glVertexAttribL2dEXTType g_nngllVertexAttribL2dEXT;
NN_GLL_API glVertexAttribL3dEXTType g_nngllVertexAttribL3dEXT;
NN_GLL_API glVertexAttribL4dEXTType g_nngllVertexAttribL4dEXT;
NN_GLL_API glVertexAttribL1dvEXTType g_nngllVertexAttribL1dvEXT;
NN_GLL_API glVertexAttribL2dvEXTType g_nngllVertexAttribL2dvEXT;
NN_GLL_API glVertexAttribL3dvEXTType g_nngllVertexAttribL3dvEXT;
NN_GLL_API glVertexAttribL4dvEXTType g_nngllVertexAttribL4dvEXT;
NN_GLL_API glVertexAttribLPointerEXTType g_nngllVertexAttribLPointerEXT;
NN_GLL_API glGetVertexAttribLdvEXTType g_nngllGetVertexAttribLdvEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_vertex_attrib_64bit();
#endif // GL_EXT_vertex_attrib_64bit

#if !defined(GL_EXT_vertex_shader)
#define GL_EXT_vertex_shader

#define GL_VERTEX_SHADER_EXT 0x8780 // NOLINT
#define GL_VERTEX_SHADER_BINDING_EXT 0x8781 // NOLINT
#define GL_OP_INDEX_EXT 0x8782 // NOLINT
#define GL_OP_NEGATE_EXT 0x8783 // NOLINT
#define GL_OP_DOT3_EXT 0x8784 // NOLINT
#define GL_OP_DOT4_EXT 0x8785 // NOLINT
#define GL_OP_MUL_EXT 0x8786 // NOLINT
#define GL_OP_ADD_EXT 0x8787 // NOLINT
#define GL_OP_MADD_EXT 0x8788 // NOLINT
#define GL_OP_FRAC_EXT 0x8789 // NOLINT
#define GL_OP_MAX_EXT 0x878A // NOLINT
#define GL_OP_MIN_EXT 0x878B // NOLINT
#define GL_OP_SET_GE_EXT 0x878C // NOLINT
#define GL_OP_SET_LT_EXT 0x878D // NOLINT
#define GL_OP_CLAMP_EXT 0x878E // NOLINT
#define GL_OP_FLOOR_EXT 0x878F // NOLINT
#define GL_OP_ROUND_EXT 0x8790 // NOLINT
#define GL_OP_EXP_BASE_2_EXT 0x8791 // NOLINT
#define GL_OP_LOG_BASE_2_EXT 0x8792 // NOLINT
#define GL_OP_POWER_EXT 0x8793 // NOLINT
#define GL_OP_RECIP_EXT 0x8794 // NOLINT
#define GL_OP_RECIP_SQRT_EXT 0x8795 // NOLINT
#define GL_OP_SUB_EXT 0x8796 // NOLINT
#define GL_OP_CROSS_PRODUCT_EXT 0x8797 // NOLINT
#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798 // NOLINT
#define GL_OP_MOV_EXT 0x8799 // NOLINT
#define GL_OUTPUT_VERTEX_EXT 0x879A // NOLINT
#define GL_OUTPUT_COLOR0_EXT 0x879B // NOLINT
#define GL_OUTPUT_COLOR1_EXT 0x879C // NOLINT
#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D // NOLINT
#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E // NOLINT
#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F // NOLINT
#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA // NOLINT
#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB // NOLINT
#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC // NOLINT
#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD // NOLINT
#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE // NOLINT
#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF // NOLINT
#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9 // NOLINT
#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA // NOLINT
#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB // NOLINT
#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC // NOLINT
#define GL_OUTPUT_FOG_EXT 0x87BD // NOLINT
#define GL_SCALAR_EXT 0x87BE // NOLINT
#define GL_VECTOR_EXT 0x87BF // NOLINT
#define GL_MATRIX_EXT 0x87C0 // NOLINT
#define GL_VARIANT_EXT 0x87C1 // NOLINT
#define GL_INVARIANT_EXT 0x87C2 // NOLINT
#define GL_LOCAL_CONSTANT_EXT 0x87C3 // NOLINT
#define GL_LOCAL_EXT 0x87C4 // NOLINT
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5 // NOLINT
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6 // NOLINT
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7 // NOLINT
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8 // NOLINT
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9 // NOLINT
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA // NOLINT
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB // NOLINT
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC // NOLINT
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD // NOLINT
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE // NOLINT
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF // NOLINT
#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0 // NOLINT
#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1 // NOLINT
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2 // NOLINT
#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3 // NOLINT
#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4 // NOLINT
#define GL_X_EXT 0x87D5 // NOLINT
#define GL_Y_EXT 0x87D6 // NOLINT
#define GL_Z_EXT 0x87D7 // NOLINT
#define GL_W_EXT 0x87D8 // NOLINT
#define GL_NEGATIVE_X_EXT 0x87D9 // NOLINT
#define GL_NEGATIVE_Y_EXT 0x87DA // NOLINT
#define GL_NEGATIVE_Z_EXT 0x87DB // NOLINT
#define GL_NEGATIVE_W_EXT 0x87DC // NOLINT
#define GL_ZERO_EXT 0x87DD // NOLINT
#define GL_ONE_EXT 0x87DE // NOLINT
#define GL_NEGATIVE_ONE_EXT 0x87DF // NOLINT
#define GL_NORMALIZED_RANGE_EXT 0x87E0 // NOLINT
#define GL_FULL_RANGE_EXT 0x87E1 // NOLINT
#define GL_CURRENT_VERTEX_EXT 0x87E2 // NOLINT
#define GL_MVP_MATRIX_EXT 0x87E3 // NOLINT
#define GL_VARIANT_VALUE_EXT 0x87E4 // NOLINT
#define GL_VARIANT_DATATYPE_EXT 0x87E5 // NOLINT
#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6 // NOLINT
#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7 // NOLINT
#define GL_VARIANT_ARRAY_EXT 0x87E8 // NOLINT
#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9 // NOLINT
#define GL_INVARIANT_VALUE_EXT 0x87EA // NOLINT
#define GL_INVARIANT_DATATYPE_EXT 0x87EB // NOLINT
#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC // NOLINT
#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBeginVertexShaderEXTType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glEndVertexShaderEXTType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glBindVertexShaderEXTType )( GLuint id );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGenVertexShadersEXTType )( GLuint range );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteVertexShaderEXTType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glShaderOp1EXTType )( GLenum op, GLuint res, GLuint arg1 );
typedef void ( NN_GLL_GL_APIENTRY *glShaderOp2EXTType )( GLenum op, GLuint res, GLuint arg1, GLuint arg2 );
typedef void ( NN_GLL_GL_APIENTRY *glShaderOp3EXTType )( GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3 );
typedef void ( NN_GLL_GL_APIENTRY *glSwizzleEXTType )( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW );
typedef void ( NN_GLL_GL_APIENTRY *glWriteMaskEXTType )( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW );
typedef void ( NN_GLL_GL_APIENTRY *glInsertComponentEXTType )( GLuint res, GLuint src, GLuint num );
typedef void ( NN_GLL_GL_APIENTRY *glExtractComponentEXTType )( GLuint res, GLuint src, GLuint num );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGenSymbolsEXTType )( GLenum datatype, GLenum storagetype, GLenum range, GLuint components );
typedef void ( NN_GLL_GL_APIENTRY *glSetInvariantEXTType )( GLuint id, GLenum type, const void *addr );
typedef void ( NN_GLL_GL_APIENTRY *glSetLocalConstantEXTType )( GLuint id, GLenum type, const void *addr );
typedef void ( NN_GLL_GL_APIENTRY *glVariantbvEXTType )( GLuint id, const GLbyte *addr );
typedef void ( NN_GLL_GL_APIENTRY *glVariantsvEXTType )( GLuint id, const GLshort *addr );
typedef void ( NN_GLL_GL_APIENTRY *glVariantivEXTType )( GLuint id, const GLint *addr );
typedef void ( NN_GLL_GL_APIENTRY *glVariantfvEXTType )( GLuint id, const GLfloat *addr );
typedef void ( NN_GLL_GL_APIENTRY *glVariantdvEXTType )( GLuint id, const GLdouble *addr );
typedef void ( NN_GLL_GL_APIENTRY *glVariantubvEXTType )( GLuint id, const GLubyte *addr );
typedef void ( NN_GLL_GL_APIENTRY *glVariantusvEXTType )( GLuint id, const GLushort *addr );
typedef void ( NN_GLL_GL_APIENTRY *glVariantuivEXTType )( GLuint id, const GLuint *addr );
typedef void ( NN_GLL_GL_APIENTRY *glVariantPointerEXTType )( GLuint id, GLenum type, GLuint stride, const void *addr );
typedef void ( NN_GLL_GL_APIENTRY *glEnableVariantClientStateEXTType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glDisableVariantClientStateEXTType )( GLuint id );
typedef GLuint ( NN_GLL_GL_APIENTRY *glBindLightParameterEXTType )( GLenum light, GLenum value );
typedef GLuint ( NN_GLL_GL_APIENTRY *glBindMaterialParameterEXTType )( GLenum face, GLenum value );
typedef GLuint ( NN_GLL_GL_APIENTRY *glBindTexGenParameterEXTType )( GLenum unit, GLenum coord, GLenum value );
typedef GLuint ( NN_GLL_GL_APIENTRY *glBindTextureUnitParameterEXTType )( GLenum unit, GLenum value );
typedef GLuint ( NN_GLL_GL_APIENTRY *glBindParameterEXTType )( GLenum value );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsVariantEnabledEXTType )( GLuint id, GLenum cap );
typedef void ( NN_GLL_GL_APIENTRY *glGetVariantBooleanvEXTType )( GLuint id, GLenum value, GLboolean *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetVariantIntegervEXTType )( GLuint id, GLenum value, GLint *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetVariantFloatvEXTType )( GLuint id, GLenum value, GLfloat *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetVariantPointervEXTType )( GLuint id, GLenum value, void **data );
typedef void ( NN_GLL_GL_APIENTRY *glGetInvariantBooleanvEXTType )( GLuint id, GLenum value, GLboolean *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetInvariantIntegervEXTType )( GLuint id, GLenum value, GLint *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetInvariantFloatvEXTType )( GLuint id, GLenum value, GLfloat *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetLocalConstantBooleanvEXTType )( GLuint id, GLenum value, GLboolean *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetLocalConstantIntegervEXTType )( GLuint id, GLenum value, GLint *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetLocalConstantFloatvEXTType )( GLuint id, GLenum value, GLfloat *data );
#define glBeginVertexShaderEXT g_nngllBeginVertexShaderEXT
#define glEndVertexShaderEXT g_nngllEndVertexShaderEXT
#define glBindVertexShaderEXT g_nngllBindVertexShaderEXT
#define glGenVertexShadersEXT g_nngllGenVertexShadersEXT
#define glDeleteVertexShaderEXT g_nngllDeleteVertexShaderEXT
#define glShaderOp1EXT g_nngllShaderOp1EXT
#define glShaderOp2EXT g_nngllShaderOp2EXT
#define glShaderOp3EXT g_nngllShaderOp3EXT
#define glSwizzleEXT g_nngllSwizzleEXT
#define glWriteMaskEXT g_nngllWriteMaskEXT
#define glInsertComponentEXT g_nngllInsertComponentEXT
#define glExtractComponentEXT g_nngllExtractComponentEXT
#define glGenSymbolsEXT g_nngllGenSymbolsEXT
#define glSetInvariantEXT g_nngllSetInvariantEXT
#define glSetLocalConstantEXT g_nngllSetLocalConstantEXT
#define glVariantbvEXT g_nngllVariantbvEXT
#define glVariantsvEXT g_nngllVariantsvEXT
#define glVariantivEXT g_nngllVariantivEXT
#define glVariantfvEXT g_nngllVariantfvEXT
#define glVariantdvEXT g_nngllVariantdvEXT
#define glVariantubvEXT g_nngllVariantubvEXT
#define glVariantusvEXT g_nngllVariantusvEXT
#define glVariantuivEXT g_nngllVariantuivEXT
#define glVariantPointerEXT g_nngllVariantPointerEXT
#define glEnableVariantClientStateEXT g_nngllEnableVariantClientStateEXT
#define glDisableVariantClientStateEXT g_nngllDisableVariantClientStateEXT
#define glBindLightParameterEXT g_nngllBindLightParameterEXT
#define glBindMaterialParameterEXT g_nngllBindMaterialParameterEXT
#define glBindTexGenParameterEXT g_nngllBindTexGenParameterEXT
#define glBindTextureUnitParameterEXT g_nngllBindTextureUnitParameterEXT
#define glBindParameterEXT g_nngllBindParameterEXT
#define glIsVariantEnabledEXT g_nngllIsVariantEnabledEXT
#define glGetVariantBooleanvEXT g_nngllGetVariantBooleanvEXT
#define glGetVariantIntegervEXT g_nngllGetVariantIntegervEXT
#define glGetVariantFloatvEXT g_nngllGetVariantFloatvEXT
#define glGetVariantPointervEXT g_nngllGetVariantPointervEXT
#define glGetInvariantBooleanvEXT g_nngllGetInvariantBooleanvEXT
#define glGetInvariantIntegervEXT g_nngllGetInvariantIntegervEXT
#define glGetInvariantFloatvEXT g_nngllGetInvariantFloatvEXT
#define glGetLocalConstantBooleanvEXT g_nngllGetLocalConstantBooleanvEXT
#define glGetLocalConstantIntegervEXT g_nngllGetLocalConstantIntegervEXT
#define glGetLocalConstantFloatvEXT g_nngllGetLocalConstantFloatvEXT
NN_GLL_API glBeginVertexShaderEXTType g_nngllBeginVertexShaderEXT;
NN_GLL_API glEndVertexShaderEXTType g_nngllEndVertexShaderEXT;
NN_GLL_API glBindVertexShaderEXTType g_nngllBindVertexShaderEXT;
NN_GLL_API glGenVertexShadersEXTType g_nngllGenVertexShadersEXT;
NN_GLL_API glDeleteVertexShaderEXTType g_nngllDeleteVertexShaderEXT;
NN_GLL_API glShaderOp1EXTType g_nngllShaderOp1EXT;
NN_GLL_API glShaderOp2EXTType g_nngllShaderOp2EXT;
NN_GLL_API glShaderOp3EXTType g_nngllShaderOp3EXT;
NN_GLL_API glSwizzleEXTType g_nngllSwizzleEXT;
NN_GLL_API glWriteMaskEXTType g_nngllWriteMaskEXT;
NN_GLL_API glInsertComponentEXTType g_nngllInsertComponentEXT;
NN_GLL_API glExtractComponentEXTType g_nngllExtractComponentEXT;
NN_GLL_API glGenSymbolsEXTType g_nngllGenSymbolsEXT;
NN_GLL_API glSetInvariantEXTType g_nngllSetInvariantEXT;
NN_GLL_API glSetLocalConstantEXTType g_nngllSetLocalConstantEXT;
NN_GLL_API glVariantbvEXTType g_nngllVariantbvEXT;
NN_GLL_API glVariantsvEXTType g_nngllVariantsvEXT;
NN_GLL_API glVariantivEXTType g_nngllVariantivEXT;
NN_GLL_API glVariantfvEXTType g_nngllVariantfvEXT;
NN_GLL_API glVariantdvEXTType g_nngllVariantdvEXT;
NN_GLL_API glVariantubvEXTType g_nngllVariantubvEXT;
NN_GLL_API glVariantusvEXTType g_nngllVariantusvEXT;
NN_GLL_API glVariantuivEXTType g_nngllVariantuivEXT;
NN_GLL_API glVariantPointerEXTType g_nngllVariantPointerEXT;
NN_GLL_API glEnableVariantClientStateEXTType g_nngllEnableVariantClientStateEXT;
NN_GLL_API glDisableVariantClientStateEXTType g_nngllDisableVariantClientStateEXT;
NN_GLL_API glBindLightParameterEXTType g_nngllBindLightParameterEXT;
NN_GLL_API glBindMaterialParameterEXTType g_nngllBindMaterialParameterEXT;
NN_GLL_API glBindTexGenParameterEXTType g_nngllBindTexGenParameterEXT;
NN_GLL_API glBindTextureUnitParameterEXTType g_nngllBindTextureUnitParameterEXT;
NN_GLL_API glBindParameterEXTType g_nngllBindParameterEXT;
NN_GLL_API glIsVariantEnabledEXTType g_nngllIsVariantEnabledEXT;
NN_GLL_API glGetVariantBooleanvEXTType g_nngllGetVariantBooleanvEXT;
NN_GLL_API glGetVariantIntegervEXTType g_nngllGetVariantIntegervEXT;
NN_GLL_API glGetVariantFloatvEXTType g_nngllGetVariantFloatvEXT;
NN_GLL_API glGetVariantPointervEXTType g_nngllGetVariantPointervEXT;
NN_GLL_API glGetInvariantBooleanvEXTType g_nngllGetInvariantBooleanvEXT;
NN_GLL_API glGetInvariantIntegervEXTType g_nngllGetInvariantIntegervEXT;
NN_GLL_API glGetInvariantFloatvEXTType g_nngllGetInvariantFloatvEXT;
NN_GLL_API glGetLocalConstantBooleanvEXTType g_nngllGetLocalConstantBooleanvEXT;
NN_GLL_API glGetLocalConstantIntegervEXTType g_nngllGetLocalConstantIntegervEXT;
NN_GLL_API glGetLocalConstantFloatvEXTType g_nngllGetLocalConstantFloatvEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_vertex_shader();
#endif // GL_EXT_vertex_shader

#if !defined(GL_EXT_vertex_weighting)
#define GL_EXT_vertex_weighting

#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3 // NOLINT
#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502 // NOLINT
#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6 // NOLINT
#define GL_MODELVIEW1_MATRIX_EXT 0x8506 // NOLINT
#define GL_VERTEX_WEIGHTING_EXT 0x8509 // NOLINT
#define GL_MODELVIEW0_EXT 0x1700 // NOLINT
#define GL_MODELVIEW1_EXT 0x850A // NOLINT
#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B // NOLINT
#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C // NOLINT
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D // NOLINT
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E // NOLINT
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F // NOLINT
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glVertexWeightfEXTType )( GLfloat weight );
typedef void ( NN_GLL_GL_APIENTRY *glVertexWeightfvEXTType )( const GLfloat *weight );
typedef void ( NN_GLL_GL_APIENTRY *glVertexWeightPointerEXTType )( GLint size, GLenum type, GLsizei stride, const void *pointer );
#define glVertexWeightfEXT g_nngllVertexWeightfEXT
#define glVertexWeightfvEXT g_nngllVertexWeightfvEXT
#define glVertexWeightPointerEXT g_nngllVertexWeightPointerEXT
NN_GLL_API glVertexWeightfEXTType g_nngllVertexWeightfEXT;
NN_GLL_API glVertexWeightfvEXTType g_nngllVertexWeightfvEXT;
NN_GLL_API glVertexWeightPointerEXTType g_nngllVertexWeightPointerEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_vertex_weighting();
#endif // GL_EXT_vertex_weighting

#if !defined(GL_EXT_win32_keyed_mutex)
#define GL_EXT_win32_keyed_mutex

typedef GLboolean ( NN_GLL_GL_APIENTRY *glAcquireKeyedMutexWin32EXTType )( GLuint memory, GLuint64 key, GLuint timeout );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glReleaseKeyedMutexWin32EXTType )( GLuint memory, GLuint64 key );
#define glAcquireKeyedMutexWin32EXT g_nngllAcquireKeyedMutexWin32EXT
#define glReleaseKeyedMutexWin32EXT g_nngllReleaseKeyedMutexWin32EXT
NN_GLL_API glAcquireKeyedMutexWin32EXTType g_nngllAcquireKeyedMutexWin32EXT;
NN_GLL_API glReleaseKeyedMutexWin32EXTType g_nngllReleaseKeyedMutexWin32EXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_win32_keyed_mutex();
#endif // GL_EXT_win32_keyed_mutex

#if !defined(GL_EXT_window_rectangles)
#define GL_EXT_window_rectangles

#define GL_INCLUSIVE_EXT 0x8F10 // NOLINT
#define GL_EXCLUSIVE_EXT 0x8F11 // NOLINT
#define GL_WINDOW_RECTANGLE_EXT 0x8F12 // NOLINT
#define GL_WINDOW_RECTANGLE_MODE_EXT 0x8F13 // NOLINT
#define GL_MAX_WINDOW_RECTANGLES_EXT 0x8F14 // NOLINT
#define GL_NUM_WINDOW_RECTANGLES_EXT 0x8F15 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glWindowRectanglesEXTType )( GLenum mode, GLsizei count, const GLint *box );
#define glWindowRectanglesEXT g_nngllWindowRectanglesEXT
NN_GLL_API glWindowRectanglesEXTType g_nngllWindowRectanglesEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_window_rectangles();
#endif // GL_EXT_window_rectangles

#if !defined(GL_EXT_x11_sync_object)
#define GL_EXT_x11_sync_object

#define GL_SYNC_X11_FENCE_EXT 0x90E1 // NOLINT
typedef GLsync ( NN_GLL_GL_APIENTRY *glImportSyncEXTType )( GLenum external_sync_type, GLintptr external_sync, GLbitfield flags );
#define glImportSyncEXT g_nngllImportSyncEXT
NN_GLL_API glImportSyncEXTType g_nngllImportSyncEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_EXT_x11_sync_object();
#endif // GL_EXT_x11_sync_object

#if !defined(GL_GREMEDY_frame_terminator)
#define GL_GREMEDY_frame_terminator

typedef void ( NN_GLL_GL_APIENTRY *glFrameTerminatorGREMEDYType )(  );
#define glFrameTerminatorGREMEDY g_nngllFrameTerminatorGREMEDY
NN_GLL_API glFrameTerminatorGREMEDYType g_nngllFrameTerminatorGREMEDY;
NN_GLL_API GLboolean nngllIsSupported_GL_GREMEDY_frame_terminator();
#endif // GL_GREMEDY_frame_terminator

#if !defined(GL_GREMEDY_string_marker)
#define GL_GREMEDY_string_marker

typedef void ( NN_GLL_GL_APIENTRY *glStringMarkerGREMEDYType )( GLsizei len, const void *string );
#define glStringMarkerGREMEDY g_nngllStringMarkerGREMEDY
NN_GLL_API glStringMarkerGREMEDYType g_nngllStringMarkerGREMEDY;
NN_GLL_API GLboolean nngllIsSupported_GL_GREMEDY_string_marker();
#endif // GL_GREMEDY_string_marker

#if !defined(GL_HP_convolution_border_modes)
#define GL_HP_convolution_border_modes

#define GL_IGNORE_BORDER_HP 0x8150 // NOLINT
#define GL_CONSTANT_BORDER_HP 0x8151 // NOLINT
#define GL_REPLICATE_BORDER_HP 0x8153 // NOLINT
#define GL_CONVOLUTION_BORDER_COLOR_HP 0x8154 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_HP_convolution_border_modes();
#endif // GL_HP_convolution_border_modes

#if !defined(GL_HP_image_transform)
#define GL_HP_image_transform

#define GL_IMAGE_SCALE_X_HP 0x8155 // NOLINT
#define GL_IMAGE_SCALE_Y_HP 0x8156 // NOLINT
#define GL_IMAGE_TRANSLATE_X_HP 0x8157 // NOLINT
#define GL_IMAGE_TRANSLATE_Y_HP 0x8158 // NOLINT
#define GL_IMAGE_ROTATE_ANGLE_HP 0x8159 // NOLINT
#define GL_IMAGE_ROTATE_ORIGIN_X_HP 0x815A // NOLINT
#define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0x815B // NOLINT
#define GL_IMAGE_MAG_FILTER_HP 0x815C // NOLINT
#define GL_IMAGE_MIN_FILTER_HP 0x815D // NOLINT
#define GL_IMAGE_CUBIC_WEIGHT_HP 0x815E // NOLINT
#define GL_CUBIC_HP 0x815F // NOLINT
#define GL_AVERAGE_HP 0x8160 // NOLINT
#define GL_IMAGE_TRANSFORM_2D_HP 0x8161 // NOLINT
#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162 // NOLINT
#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glImageTransformParameteriHPType )( GLenum target, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glImageTransformParameterfHPType )( GLenum target, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glImageTransformParameterivHPType )( GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glImageTransformParameterfvHPType )( GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetImageTransformParameterivHPType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetImageTransformParameterfvHPType )( GLenum target, GLenum pname, GLfloat *params );
#define glImageTransformParameteriHP g_nngllImageTransformParameteriHP
#define glImageTransformParameterfHP g_nngllImageTransformParameterfHP
#define glImageTransformParameterivHP g_nngllImageTransformParameterivHP
#define glImageTransformParameterfvHP g_nngllImageTransformParameterfvHP
#define glGetImageTransformParameterivHP g_nngllGetImageTransformParameterivHP
#define glGetImageTransformParameterfvHP g_nngllGetImageTransformParameterfvHP
NN_GLL_API glImageTransformParameteriHPType g_nngllImageTransformParameteriHP;
NN_GLL_API glImageTransformParameterfHPType g_nngllImageTransformParameterfHP;
NN_GLL_API glImageTransformParameterivHPType g_nngllImageTransformParameterivHP;
NN_GLL_API glImageTransformParameterfvHPType g_nngllImageTransformParameterfvHP;
NN_GLL_API glGetImageTransformParameterivHPType g_nngllGetImageTransformParameterivHP;
NN_GLL_API glGetImageTransformParameterfvHPType g_nngllGetImageTransformParameterfvHP;
NN_GLL_API GLboolean nngllIsSupported_GL_HP_image_transform();
#endif // GL_HP_image_transform

#if !defined(GL_HP_occlusion_test)
#define GL_HP_occlusion_test

#define GL_OCCLUSION_TEST_HP 0x8165 // NOLINT
#define GL_OCCLUSION_TEST_RESULT_HP 0x8166 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_HP_occlusion_test();
#endif // GL_HP_occlusion_test

#if !defined(GL_HP_texture_lighting)
#define GL_HP_texture_lighting

#define GL_TEXTURE_LIGHTING_MODE_HP 0x8167 // NOLINT
#define GL_TEXTURE_POST_SPECULAR_HP 0x8168 // NOLINT
#define GL_TEXTURE_PRE_SPECULAR_HP 0x8169 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_HP_texture_lighting();
#endif // GL_HP_texture_lighting

#if !defined(GL_IBM_cull_vertex)
#define GL_IBM_cull_vertex

#define GL_CULL_VERTEX_IBM 103050 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_IBM_cull_vertex();
#endif // GL_IBM_cull_vertex

#if !defined(GL_IBM_multimode_draw_arrays)
#define GL_IBM_multimode_draw_arrays

typedef void ( NN_GLL_GL_APIENTRY *glMultiModeDrawArraysIBMType )( const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride );
typedef void ( NN_GLL_GL_APIENTRY *glMultiModeDrawElementsIBMType )( const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride );
#define glMultiModeDrawArraysIBM g_nngllMultiModeDrawArraysIBM
#define glMultiModeDrawElementsIBM g_nngllMultiModeDrawElementsIBM
NN_GLL_API glMultiModeDrawArraysIBMType g_nngllMultiModeDrawArraysIBM;
NN_GLL_API glMultiModeDrawElementsIBMType g_nngllMultiModeDrawElementsIBM;
NN_GLL_API GLboolean nngllIsSupported_GL_IBM_multimode_draw_arrays();
#endif // GL_IBM_multimode_draw_arrays

#if !defined(GL_IBM_rasterpos_clip)
#define GL_IBM_rasterpos_clip

#define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_IBM_rasterpos_clip();
#endif // GL_IBM_rasterpos_clip

#if !defined(GL_IBM_static_data)
#define GL_IBM_static_data

#define GL_ALL_STATIC_DATA_IBM 103060 // NOLINT
#define GL_STATIC_VERTEX_ARRAY_IBM 103061 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFlushStaticDataIBMType )( GLenum target );
#define glFlushStaticDataIBM g_nngllFlushStaticDataIBM
NN_GLL_API glFlushStaticDataIBMType g_nngllFlushStaticDataIBM;
NN_GLL_API GLboolean nngllIsSupported_GL_IBM_static_data();
#endif // GL_IBM_static_data

#if !defined(GL_IBM_texture_mirrored_repeat)
#define GL_IBM_texture_mirrored_repeat

#define GL_MIRRORED_REPEAT_IBM 0x8370 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_IBM_texture_mirrored_repeat();
#endif // GL_IBM_texture_mirrored_repeat

#if !defined(GL_IBM_vertex_array_lists)
#define GL_IBM_vertex_array_lists

#define GL_VERTEX_ARRAY_LIST_IBM 103070 // NOLINT
#define GL_NORMAL_ARRAY_LIST_IBM 103071 // NOLINT
#define GL_COLOR_ARRAY_LIST_IBM 103072 // NOLINT
#define GL_INDEX_ARRAY_LIST_IBM 103073 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074 // NOLINT
#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075 // NOLINT
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076 // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077 // NOLINT
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080 // NOLINT
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081 // NOLINT
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082 // NOLINT
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084 // NOLINT
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085 // NOLINT
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086 // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glColorPointerListIBMType )( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColorPointerListIBMType )( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
typedef void ( NN_GLL_GL_APIENTRY *glEdgeFlagPointerListIBMType )( GLint stride, const GLboolean **pointer, GLint ptrstride );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoordPointerListIBMType )( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
typedef void ( NN_GLL_GL_APIENTRY *glIndexPointerListIBMType )( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
typedef void ( NN_GLL_GL_APIENTRY *glNormalPointerListIBMType )( GLenum type, GLint stride, const void **pointer, GLint ptrstride );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordPointerListIBMType )( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
typedef void ( NN_GLL_GL_APIENTRY *glVertexPointerListIBMType )( GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride );
#define glColorPointerListIBM g_nngllColorPointerListIBM
#define glSecondaryColorPointerListIBM g_nngllSecondaryColorPointerListIBM
#define glEdgeFlagPointerListIBM g_nngllEdgeFlagPointerListIBM
#define glFogCoordPointerListIBM g_nngllFogCoordPointerListIBM
#define glIndexPointerListIBM g_nngllIndexPointerListIBM
#define glNormalPointerListIBM g_nngllNormalPointerListIBM
#define glTexCoordPointerListIBM g_nngllTexCoordPointerListIBM
#define glVertexPointerListIBM g_nngllVertexPointerListIBM
NN_GLL_API glColorPointerListIBMType g_nngllColorPointerListIBM;
NN_GLL_API glSecondaryColorPointerListIBMType g_nngllSecondaryColorPointerListIBM;
NN_GLL_API glEdgeFlagPointerListIBMType g_nngllEdgeFlagPointerListIBM;
NN_GLL_API glFogCoordPointerListIBMType g_nngllFogCoordPointerListIBM;
NN_GLL_API glIndexPointerListIBMType g_nngllIndexPointerListIBM;
NN_GLL_API glNormalPointerListIBMType g_nngllNormalPointerListIBM;
NN_GLL_API glTexCoordPointerListIBMType g_nngllTexCoordPointerListIBM;
NN_GLL_API glVertexPointerListIBMType g_nngllVertexPointerListIBM;
NN_GLL_API GLboolean nngllIsSupported_GL_IBM_vertex_array_lists();
#endif // GL_IBM_vertex_array_lists

#if !defined(GL_INGR_blend_func_separate)
#define GL_INGR_blend_func_separate

typedef void ( NN_GLL_GL_APIENTRY *glBlendFuncSeparateINGRType )( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha );
#define glBlendFuncSeparateINGR g_nngllBlendFuncSeparateINGR
NN_GLL_API glBlendFuncSeparateINGRType g_nngllBlendFuncSeparateINGR;
NN_GLL_API GLboolean nngllIsSupported_GL_INGR_blend_func_separate();
#endif // GL_INGR_blend_func_separate

#if !defined(GL_INGR_color_clamp)
#define GL_INGR_color_clamp

#define GL_RED_MIN_CLAMP_INGR 0x8560 // NOLINT
#define GL_GREEN_MIN_CLAMP_INGR 0x8561 // NOLINT
#define GL_BLUE_MIN_CLAMP_INGR 0x8562 // NOLINT
#define GL_ALPHA_MIN_CLAMP_INGR 0x8563 // NOLINT
#define GL_RED_MAX_CLAMP_INGR 0x8564 // NOLINT
#define GL_GREEN_MAX_CLAMP_INGR 0x8565 // NOLINT
#define GL_BLUE_MAX_CLAMP_INGR 0x8566 // NOLINT
#define GL_ALPHA_MAX_CLAMP_INGR 0x8567 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_INGR_color_clamp();
#endif // GL_INGR_color_clamp

#if !defined(GL_INGR_interlace_read)
#define GL_INGR_interlace_read

#define GL_INTERLACE_READ_INGR 0x8568 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_INGR_interlace_read();
#endif // GL_INGR_interlace_read

#if !defined(GL_INTEL_conservative_rasterization)
#define GL_INTEL_conservative_rasterization

#define GL_CONSERVATIVE_RASTERIZATION_INTEL 0x83FE // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_INTEL_conservative_rasterization();
#endif // GL_INTEL_conservative_rasterization

#if !defined(GL_INTEL_fragment_shader_ordering)
#define GL_INTEL_fragment_shader_ordering

NN_GLL_API GLboolean nngllIsSupported_GL_INTEL_fragment_shader_ordering();
#endif // GL_INTEL_fragment_shader_ordering

#if !defined(GL_INTEL_framebuffer_CMAA)
#define GL_INTEL_framebuffer_CMAA

typedef void ( NN_GLL_GL_APIENTRY *glApplyFramebufferAttachmentCMAAINTELType )(  );
#define glApplyFramebufferAttachmentCMAAINTEL g_nngllApplyFramebufferAttachmentCMAAINTEL
NN_GLL_API glApplyFramebufferAttachmentCMAAINTELType g_nngllApplyFramebufferAttachmentCMAAINTEL;
NN_GLL_API GLboolean nngllIsSupported_GL_INTEL_framebuffer_CMAA();
#endif // GL_INTEL_framebuffer_CMAA

#if !defined(GL_INTEL_map_texture)
#define GL_INTEL_map_texture

#define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0x83FF // NOLINT
#define GL_LAYOUT_DEFAULT_INTEL 0 // NOLINT
#define GL_LAYOUT_LINEAR_INTEL 1 // NOLINT
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glSyncTextureINTELType )( GLuint texture );
typedef void ( NN_GLL_GL_APIENTRY *glUnmapTexture2DINTELType )( GLuint texture, GLint level );
typedef void *( NN_GLL_GL_APIENTRY *glMapTexture2DINTELType )( GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout );
#define glSyncTextureINTEL g_nngllSyncTextureINTEL
#define glUnmapTexture2DINTEL g_nngllUnmapTexture2DINTEL
#define glMapTexture2DINTEL g_nngllMapTexture2DINTEL
NN_GLL_API glSyncTextureINTELType g_nngllSyncTextureINTEL;
NN_GLL_API glUnmapTexture2DINTELType g_nngllUnmapTexture2DINTEL;
NN_GLL_API glMapTexture2DINTELType g_nngllMapTexture2DINTEL;
NN_GLL_API GLboolean nngllIsSupported_GL_INTEL_map_texture();
#endif // GL_INTEL_map_texture

#if !defined(GL_INTEL_blackhole_render)
#define GL_INTEL_blackhole_render

#define GL_BLACKHOLE_RENDER_INTEL 0x83FC // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_INTEL_blackhole_render();
#endif // GL_INTEL_blackhole_render

#if !defined(GL_INTEL_parallel_arrays)
#define GL_INTEL_parallel_arrays

#define GL_PARALLEL_ARRAYS_INTEL 0x83F4 // NOLINT
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5 // NOLINT
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6 // NOLINT
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glVertexPointervINTELType )( GLint size, GLenum type, const void **pointer );
typedef void ( NN_GLL_GL_APIENTRY *glNormalPointervINTELType )( GLenum type, const void **pointer );
typedef void ( NN_GLL_GL_APIENTRY *glColorPointervINTELType )( GLint size, GLenum type, const void **pointer );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordPointervINTELType )( GLint size, GLenum type, const void **pointer );
#define glVertexPointervINTEL g_nngllVertexPointervINTEL
#define glNormalPointervINTEL g_nngllNormalPointervINTEL
#define glColorPointervINTEL g_nngllColorPointervINTEL
#define glTexCoordPointervINTEL g_nngllTexCoordPointervINTEL
NN_GLL_API glVertexPointervINTELType g_nngllVertexPointervINTEL;
NN_GLL_API glNormalPointervINTELType g_nngllNormalPointervINTEL;
NN_GLL_API glColorPointervINTELType g_nngllColorPointervINTEL;
NN_GLL_API glTexCoordPointervINTELType g_nngllTexCoordPointervINTEL;
NN_GLL_API GLboolean nngllIsSupported_GL_INTEL_parallel_arrays();
#endif // GL_INTEL_parallel_arrays

#if !defined(GL_INTEL_performance_query)
#define GL_INTEL_performance_query

#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000 // NOLINT
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001 // NOLINT
#define GL_PERFQUERY_WAIT_INTEL 0x83FB // NOLINT
#define GL_PERFQUERY_FLUSH_INTEL 0x83FA // NOLINT
#define GL_PERFQUERY_DONOT_FLUSH_INTEL 0x83F9 // NOLINT
#define GL_PERFQUERY_COUNTER_EVENT_INTEL 0x94F0 // NOLINT
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1 // NOLINT
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2 // NOLINT
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3 // NOLINT
#define GL_PERFQUERY_COUNTER_RAW_INTEL 0x94F4 // NOLINT
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5 // NOLINT
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8 // NOLINT
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9 // NOLINT
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA // NOLINT
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB // NOLINT
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC // NOLINT
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD // NOLINT
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE // NOLINT
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF // NOLINT
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBeginPerfQueryINTELType )( GLuint queryHandle );
typedef void ( NN_GLL_GL_APIENTRY *glCreatePerfQueryINTELType )( GLuint queryId, GLuint *queryHandle );
typedef void ( NN_GLL_GL_APIENTRY *glDeletePerfQueryINTELType )( GLuint queryHandle );
typedef void ( NN_GLL_GL_APIENTRY *glEndPerfQueryINTELType )( GLuint queryHandle );
typedef void ( NN_GLL_GL_APIENTRY *glGetFirstPerfQueryIdINTELType )( GLuint *queryId );
typedef void ( NN_GLL_GL_APIENTRY *glGetNextPerfQueryIdINTELType )( GLuint queryId, GLuint *nextQueryId );
typedef void ( NN_GLL_GL_APIENTRY *glGetPerfCounterInfoINTELType )( GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue );
typedef void ( NN_GLL_GL_APIENTRY *glGetPerfQueryDataINTELType )( GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten );
typedef void ( NN_GLL_GL_APIENTRY *glGetPerfQueryIdByNameINTELType )( GLchar *queryName, GLuint *queryId );
typedef void ( NN_GLL_GL_APIENTRY *glGetPerfQueryInfoINTELType )( GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask );
#define glBeginPerfQueryINTEL g_nngllBeginPerfQueryINTEL
#define glCreatePerfQueryINTEL g_nngllCreatePerfQueryINTEL
#define glDeletePerfQueryINTEL g_nngllDeletePerfQueryINTEL
#define glEndPerfQueryINTEL g_nngllEndPerfQueryINTEL
#define glGetFirstPerfQueryIdINTEL g_nngllGetFirstPerfQueryIdINTEL
#define glGetNextPerfQueryIdINTEL g_nngllGetNextPerfQueryIdINTEL
#define glGetPerfCounterInfoINTEL g_nngllGetPerfCounterInfoINTEL
#define glGetPerfQueryDataINTEL g_nngllGetPerfQueryDataINTEL
#define glGetPerfQueryIdByNameINTEL g_nngllGetPerfQueryIdByNameINTEL
#define glGetPerfQueryInfoINTEL g_nngllGetPerfQueryInfoINTEL
NN_GLL_API glBeginPerfQueryINTELType g_nngllBeginPerfQueryINTEL;
NN_GLL_API glCreatePerfQueryINTELType g_nngllCreatePerfQueryINTEL;
NN_GLL_API glDeletePerfQueryINTELType g_nngllDeletePerfQueryINTEL;
NN_GLL_API glEndPerfQueryINTELType g_nngllEndPerfQueryINTEL;
NN_GLL_API glGetFirstPerfQueryIdINTELType g_nngllGetFirstPerfQueryIdINTEL;
NN_GLL_API glGetNextPerfQueryIdINTELType g_nngllGetNextPerfQueryIdINTEL;
NN_GLL_API glGetPerfCounterInfoINTELType g_nngllGetPerfCounterInfoINTEL;
NN_GLL_API glGetPerfQueryDataINTELType g_nngllGetPerfQueryDataINTEL;
NN_GLL_API glGetPerfQueryIdByNameINTELType g_nngllGetPerfQueryIdByNameINTEL;
NN_GLL_API glGetPerfQueryInfoINTELType g_nngllGetPerfQueryInfoINTEL;
NN_GLL_API GLboolean nngllIsSupported_GL_INTEL_performance_query();
#endif // GL_INTEL_performance_query

#if !defined(GL_KHR_blend_equation_advanced)
#define GL_KHR_blend_equation_advanced

#define GL_MULTIPLY_KHR 0x9294 // NOLINT
#define GL_SCREEN_KHR 0x9295 // NOLINT
#define GL_OVERLAY_KHR 0x9296 // NOLINT
#define GL_DARKEN_KHR 0x9297 // NOLINT
#define GL_LIGHTEN_KHR 0x9298 // NOLINT
#define GL_COLORDODGE_KHR 0x9299 // NOLINT
#define GL_COLORBURN_KHR 0x929A // NOLINT
#define GL_HARDLIGHT_KHR 0x929B // NOLINT
#define GL_SOFTLIGHT_KHR 0x929C // NOLINT
#define GL_DIFFERENCE_KHR 0x929E // NOLINT
#define GL_EXCLUSION_KHR 0x92A0 // NOLINT
#define GL_HSL_HUE_KHR 0x92AD // NOLINT
#define GL_HSL_SATURATION_KHR 0x92AE // NOLINT
#define GL_HSL_COLOR_KHR 0x92AF // NOLINT
#define GL_HSL_LUMINOSITY_KHR 0x92B0 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBlendBarrierKHRType )(  );
#define glBlendBarrierKHR g_nngllBlendBarrierKHR
NN_GLL_API glBlendBarrierKHRType g_nngllBlendBarrierKHR;
NN_GLL_API GLboolean nngllIsSupported_GL_KHR_blend_equation_advanced();
#endif // GL_KHR_blend_equation_advanced

#if !defined(GL_KHR_blend_equation_advanced_coherent)
#define GL_KHR_blend_equation_advanced_coherent

#define GL_BLEND_ADVANCED_COHERENT_KHR 0x9285 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_KHR_blend_equation_advanced_coherent();
#endif // GL_KHR_blend_equation_advanced_coherent

#if !defined(GL_KHR_context_flush_control)
#define GL_KHR_context_flush_control

#define GL_CONTEXT_RELEASE_BEHAVIOR_KHR 0x82FB // NOLINT
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x82FC // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_KHR_context_flush_control();
#endif // GL_KHR_context_flush_control

#if !defined(GL_KHR_debug)
#define GL_KHR_debug

typedef void ( *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0x8242 // NOLINT
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243 // NOLINT
#define GL_DEBUG_CALLBACK_FUNCTION_KHR 0x8244 // NOLINT
#define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0x8245 // NOLINT
#define GL_DEBUG_SOURCE_API_KHR 0x8246 // NOLINT
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247 // NOLINT
#define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248 // NOLINT
#define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0x8249 // NOLINT
#define GL_DEBUG_SOURCE_APPLICATION_KHR 0x824A // NOLINT
#define GL_DEBUG_SOURCE_OTHER_KHR 0x824B // NOLINT
#define GL_DEBUG_TYPE_ERROR_KHR 0x824C // NOLINT
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D // NOLINT
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E // NOLINT
#define GL_DEBUG_TYPE_PORTABILITY_KHR 0x824F // NOLINT
#define GL_DEBUG_TYPE_PERFORMANCE_KHR 0x8250 // NOLINT
#define GL_DEBUG_TYPE_OTHER_KHR 0x8251 // NOLINT
#define GL_DEBUG_TYPE_MARKER_KHR 0x8268 // NOLINT
#define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0x8269 // NOLINT
#define GL_DEBUG_TYPE_POP_GROUP_KHR 0x826A // NOLINT
#define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B // NOLINT
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C // NOLINT
#define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0x826D // NOLINT
#define GL_BUFFER_KHR 0x82E0 // NOLINT
#define GL_SHADER_KHR 0x82E1 // NOLINT
#define GL_PROGRAM_KHR 0x82E2 // NOLINT
#define GL_VERTEX_ARRAY_KHR 0x8074 // NOLINT
#define GL_QUERY_KHR 0x82E3 // NOLINT
#define GL_PROGRAM_PIPELINE_KHR 0x82E4 // NOLINT
#define GL_SAMPLER_KHR 0x82E6 // NOLINT
#define GL_MAX_LABEL_LENGTH_KHR 0x82E8 // NOLINT
#define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0x9143 // NOLINT
#define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0x9144 // NOLINT
#define GL_DEBUG_LOGGED_MESSAGES_KHR 0x9145 // NOLINT
#define GL_DEBUG_SEVERITY_HIGH_KHR 0x9146 // NOLINT
#define GL_DEBUG_SEVERITY_MEDIUM_KHR 0x9147 // NOLINT
#define GL_DEBUG_SEVERITY_LOW_KHR 0x9148 // NOLINT
#define GL_DEBUG_OUTPUT_KHR 0x92E0 // NOLINT
#define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0x00000002 // NOLINT
#define GL_STACK_OVERFLOW_KHR 0x0503 // NOLINT
#define GL_STACK_UNDERFLOW_KHR 0x0504 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageControlKHRType )( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled );
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageInsertKHRType )( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf );
typedef void ( NN_GLL_GL_APIENTRY *glDebugMessageCallbackKHRType )( GLDEBUGPROCKHR callback, const void *userParam );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGetDebugMessageLogKHRType )( GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog );
typedef void ( NN_GLL_GL_APIENTRY *glPushDebugGroupKHRType )( GLenum source, GLuint id, GLsizei length, const GLchar *message );
typedef void ( NN_GLL_GL_APIENTRY *glPopDebugGroupKHRType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glObjectLabelKHRType )( GLenum identifier, GLuint name, GLsizei length, const GLchar *label );
typedef void ( NN_GLL_GL_APIENTRY *glGetObjectLabelKHRType )( GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label );
typedef void ( NN_GLL_GL_APIENTRY *glObjectPtrLabelKHRType )( const void *ptr, GLsizei length, const GLchar *label );
typedef void ( NN_GLL_GL_APIENTRY *glGetObjectPtrLabelKHRType )( const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label );
typedef void ( NN_GLL_GL_APIENTRY *glGetPointervKHRType )( GLenum pname, void **params );
#define glDebugMessageControlKHR g_nngllDebugMessageControlKHR
#define glDebugMessageInsertKHR g_nngllDebugMessageInsertKHR
#define glDebugMessageCallbackKHR g_nngllDebugMessageCallbackKHR
#define glGetDebugMessageLogKHR g_nngllGetDebugMessageLogKHR
#define glPushDebugGroupKHR g_nngllPushDebugGroupKHR
#define glPopDebugGroupKHR g_nngllPopDebugGroupKHR
#define glObjectLabelKHR g_nngllObjectLabelKHR
#define glGetObjectLabelKHR g_nngllGetObjectLabelKHR
#define glObjectPtrLabelKHR g_nngllObjectPtrLabelKHR
#define glGetObjectPtrLabelKHR g_nngllGetObjectPtrLabelKHR
#define glGetPointervKHR g_nngllGetPointervKHR
NN_GLL_API glDebugMessageControlKHRType g_nngllDebugMessageControlKHR;
NN_GLL_API glDebugMessageInsertKHRType g_nngllDebugMessageInsertKHR;
NN_GLL_API glDebugMessageCallbackKHRType g_nngllDebugMessageCallbackKHR;
NN_GLL_API glGetDebugMessageLogKHRType g_nngllGetDebugMessageLogKHR;
NN_GLL_API glPushDebugGroupKHRType g_nngllPushDebugGroupKHR;
NN_GLL_API glPopDebugGroupKHRType g_nngllPopDebugGroupKHR;
NN_GLL_API glObjectLabelKHRType g_nngllObjectLabelKHR;
NN_GLL_API glGetObjectLabelKHRType g_nngllGetObjectLabelKHR;
NN_GLL_API glObjectPtrLabelKHRType g_nngllObjectPtrLabelKHR;
NN_GLL_API glGetObjectPtrLabelKHRType g_nngllGetObjectPtrLabelKHR;
NN_GLL_API glGetPointervKHRType g_nngllGetPointervKHR;
NN_GLL_API GLboolean nngllIsSupported_GL_KHR_debug();
#endif // GL_KHR_debug

#if !defined(GL_KHR_no_error)
#define GL_KHR_no_error

#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0x00000008 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_KHR_no_error();
#endif // GL_KHR_no_error

#if !defined(GL_KHR_robust_buffer_access_behavior)
#define GL_KHR_robust_buffer_access_behavior

NN_GLL_API GLboolean nngllIsSupported_GL_KHR_robust_buffer_access_behavior();
#endif // GL_KHR_robust_buffer_access_behavior

#if !defined(GL_KHR_robustness)
#define GL_KHR_robustness

#define GL_CONTEXT_ROBUST_ACCESS 0x90F3 // NOLINT
#define GL_CONTEXT_ROBUST_ACCESS_KHR 0x90F3 // NOLINT
#define GL_LOSE_CONTEXT_ON_RESET_KHR 0x8252 // NOLINT
#define GL_GUILTY_CONTEXT_RESET_KHR 0x8253 // NOLINT
#define GL_INNOCENT_CONTEXT_RESET_KHR 0x8254 // NOLINT
#define GL_UNKNOWN_CONTEXT_RESET_KHR 0x8255 // NOLINT
#define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256 // NOLINT
#define GL_NO_RESET_NOTIFICATION_KHR 0x8261 // NOLINT
#define GL_CONTEXT_LOST_KHR 0x0507 // NOLINT
typedef GLenum ( NN_GLL_GL_APIENTRY *glGetGraphicsResetStatusKHRType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glReadnPixelsKHRType )( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformfvKHRType )( GLuint program, GLint location, GLsizei bufSize, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformivKHRType )( GLuint program, GLint location, GLsizei bufSize, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetnUniformuivKHRType )( GLuint program, GLint location, GLsizei bufSize, GLuint *params );
#define glGetGraphicsResetStatusKHR g_nngllGetGraphicsResetStatusKHR
#define glReadnPixelsKHR g_nngllReadnPixelsKHR
#define glGetnUniformfvKHR g_nngllGetnUniformfvKHR
#define glGetnUniformivKHR g_nngllGetnUniformivKHR
#define glGetnUniformuivKHR g_nngllGetnUniformuivKHR
NN_GLL_API glGetGraphicsResetStatusKHRType g_nngllGetGraphicsResetStatusKHR;
NN_GLL_API glReadnPixelsKHRType g_nngllReadnPixelsKHR;
NN_GLL_API glGetnUniformfvKHRType g_nngllGetnUniformfvKHR;
NN_GLL_API glGetnUniformivKHRType g_nngllGetnUniformivKHR;
NN_GLL_API glGetnUniformuivKHRType g_nngllGetnUniformuivKHR;
NN_GLL_API GLboolean nngllIsSupported_GL_KHR_robustness();
#endif // GL_KHR_robustness

#if !defined(GL_KHR_texture_compression_astc_hdr)
#define GL_KHR_texture_compression_astc_hdr

#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0 // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1 // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2 // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3 // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4 // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5 // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6 // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7 // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8 // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9 // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC // NOLINT
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0 // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1 // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2 // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3 // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4 // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5 // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6 // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7 // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8 // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9 // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC // NOLINT
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_KHR_texture_compression_astc_hdr();
#endif // GL_KHR_texture_compression_astc_hdr
// API is identical to GL_KHR_texture_compression_astc_hdr extension

#if !defined(GL_KHR_texture_compression_astc_ldr)
#define GL_KHR_texture_compression_astc_ldr

NN_GLL_API GLboolean nngllIsSupported_GL_KHR_texture_compression_astc_ldr();
#endif // GL_KHR_texture_compression_astc_ldr

#if !defined(GL_KHR_texture_compression_astc_sliced_3d)
#define GL_KHR_texture_compression_astc_sliced_3d

NN_GLL_API GLboolean nngllIsSupported_GL_KHR_texture_compression_astc_sliced_3d();
#endif // GL_KHR_texture_compression_astc_sliced_3d

#if !defined(GL_KHR_parallel_shader_compile)
#define GL_KHR_parallel_shader_compile

#define GL_MAX_SHADER_COMPILER_THREADS_KHR 0x91B0 // NOLINT
#define GL_COMPLETION_STATUS_KHR 0x91B1 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glMaxShaderCompilerThreadsKHRType )( GLuint count );
#define glMaxShaderCompilerThreadsKHR g_nngllMaxShaderCompilerThreadsKHR
NN_GLL_API glMaxShaderCompilerThreadsKHRType g_nngllMaxShaderCompilerThreadsKHR;
NN_GLL_API GLboolean nngllIsSupported_GL_KHR_parallel_shader_compile();
#endif // GL_KHR_parallel_shader_compile

#if !defined(GL_MESAX_texture_stack)
#define GL_MESAX_texture_stack

#define GL_TEXTURE_1D_STACK_MESAX 0x8759 // NOLINT
#define GL_TEXTURE_2D_STACK_MESAX 0x875A // NOLINT
#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B // NOLINT
#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C // NOLINT
#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D // NOLINT
#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_MESAX_texture_stack();
#endif // GL_MESAX_texture_stack

#if !defined(GL_MESA_pack_invert)
#define GL_MESA_pack_invert

#define GL_PACK_INVERT_MESA 0x8758 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_MESA_pack_invert();
#endif // GL_MESA_pack_invert

#if !defined(GL_MESA_program_binary_formats)
#define GL_MESA_program_binary_formats

#define GL_PROGRAM_BINARY_FORMAT_MESA 0x875F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_MESA_program_binary_formats();
#endif // GL_MESA_program_binary_formats

#if !defined(GL_MESA_resize_buffers)
#define GL_MESA_resize_buffers

typedef void ( NN_GLL_GL_APIENTRY *glResizeBuffersMESAType )(  );
#define glResizeBuffersMESA g_nngllResizeBuffersMESA
NN_GLL_API glResizeBuffersMESAType g_nngllResizeBuffersMESA;
NN_GLL_API GLboolean nngllIsSupported_GL_MESA_resize_buffers();
#endif // GL_MESA_resize_buffers

#if !defined(GL_MESA_shader_integer_functions)
#define GL_MESA_shader_integer_functions

NN_GLL_API GLboolean nngllIsSupported_GL_MESA_shader_integer_functions();
#endif // GL_MESA_shader_integer_functions

#if !defined(GL_MESA_tile_raster_order)
#define GL_MESA_tile_raster_order

#define GL_TILE_RASTER_ORDER_FIXED_MESA 0x8BB8 // NOLINT
#define GL_TILE_RASTER_ORDER_INCREASING_X_MESA 0x8BB9 // NOLINT
#define GL_TILE_RASTER_ORDER_INCREASING_Y_MESA 0x8BBA // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_MESA_tile_raster_order();
#endif // GL_MESA_tile_raster_order

#if !defined(GL_MESA_window_pos)
#define GL_MESA_window_pos

typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2dMESAType )( GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2dvMESAType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2fMESAType )( GLfloat x, GLfloat y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2fvMESAType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2iMESAType )( GLint x, GLint y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2ivMESAType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2sMESAType )( GLshort x, GLshort y );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos2svMESAType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3dMESAType )( GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3dvMESAType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3fMESAType )( GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3fvMESAType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3iMESAType )( GLint x, GLint y, GLint z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3ivMESAType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3sMESAType )( GLshort x, GLshort y, GLshort z );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos3svMESAType )( const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos4dMESAType )( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos4dvMESAType )( const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos4fMESAType )( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos4fvMESAType )( const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos4iMESAType )( GLint x, GLint y, GLint z, GLint w );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos4ivMESAType )( const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos4sMESAType )( GLshort x, GLshort y, GLshort z, GLshort w );
typedef void ( NN_GLL_GL_APIENTRY *glWindowPos4svMESAType )( const GLshort *v );
#define glWindowPos2dMESA g_nngllWindowPos2dMESA
#define glWindowPos2dvMESA g_nngllWindowPos2dvMESA
#define glWindowPos2fMESA g_nngllWindowPos2fMESA
#define glWindowPos2fvMESA g_nngllWindowPos2fvMESA
#define glWindowPos2iMESA g_nngllWindowPos2iMESA
#define glWindowPos2ivMESA g_nngllWindowPos2ivMESA
#define glWindowPos2sMESA g_nngllWindowPos2sMESA
#define glWindowPos2svMESA g_nngllWindowPos2svMESA
#define glWindowPos3dMESA g_nngllWindowPos3dMESA
#define glWindowPos3dvMESA g_nngllWindowPos3dvMESA
#define glWindowPos3fMESA g_nngllWindowPos3fMESA
#define glWindowPos3fvMESA g_nngllWindowPos3fvMESA
#define glWindowPos3iMESA g_nngllWindowPos3iMESA
#define glWindowPos3ivMESA g_nngllWindowPos3ivMESA
#define glWindowPos3sMESA g_nngllWindowPos3sMESA
#define glWindowPos3svMESA g_nngllWindowPos3svMESA
#define glWindowPos4dMESA g_nngllWindowPos4dMESA
#define glWindowPos4dvMESA g_nngllWindowPos4dvMESA
#define glWindowPos4fMESA g_nngllWindowPos4fMESA
#define glWindowPos4fvMESA g_nngllWindowPos4fvMESA
#define glWindowPos4iMESA g_nngllWindowPos4iMESA
#define glWindowPos4ivMESA g_nngllWindowPos4ivMESA
#define glWindowPos4sMESA g_nngllWindowPos4sMESA
#define glWindowPos4svMESA g_nngllWindowPos4svMESA
NN_GLL_API glWindowPos2dMESAType g_nngllWindowPos2dMESA;
NN_GLL_API glWindowPos2dvMESAType g_nngllWindowPos2dvMESA;
NN_GLL_API glWindowPos2fMESAType g_nngllWindowPos2fMESA;
NN_GLL_API glWindowPos2fvMESAType g_nngllWindowPos2fvMESA;
NN_GLL_API glWindowPos2iMESAType g_nngllWindowPos2iMESA;
NN_GLL_API glWindowPos2ivMESAType g_nngllWindowPos2ivMESA;
NN_GLL_API glWindowPos2sMESAType g_nngllWindowPos2sMESA;
NN_GLL_API glWindowPos2svMESAType g_nngllWindowPos2svMESA;
NN_GLL_API glWindowPos3dMESAType g_nngllWindowPos3dMESA;
NN_GLL_API glWindowPos3dvMESAType g_nngllWindowPos3dvMESA;
NN_GLL_API glWindowPos3fMESAType g_nngllWindowPos3fMESA;
NN_GLL_API glWindowPos3fvMESAType g_nngllWindowPos3fvMESA;
NN_GLL_API glWindowPos3iMESAType g_nngllWindowPos3iMESA;
NN_GLL_API glWindowPos3ivMESAType g_nngllWindowPos3ivMESA;
NN_GLL_API glWindowPos3sMESAType g_nngllWindowPos3sMESA;
NN_GLL_API glWindowPos3svMESAType g_nngllWindowPos3svMESA;
NN_GLL_API glWindowPos4dMESAType g_nngllWindowPos4dMESA;
NN_GLL_API glWindowPos4dvMESAType g_nngllWindowPos4dvMESA;
NN_GLL_API glWindowPos4fMESAType g_nngllWindowPos4fMESA;
NN_GLL_API glWindowPos4fvMESAType g_nngllWindowPos4fvMESA;
NN_GLL_API glWindowPos4iMESAType g_nngllWindowPos4iMESA;
NN_GLL_API glWindowPos4ivMESAType g_nngllWindowPos4ivMESA;
NN_GLL_API glWindowPos4sMESAType g_nngllWindowPos4sMESA;
NN_GLL_API glWindowPos4svMESAType g_nngllWindowPos4svMESA;
NN_GLL_API GLboolean nngllIsSupported_GL_MESA_window_pos();
#endif // GL_MESA_window_pos

#if !defined(GL_MESA_ycbcr_texture)
#define GL_MESA_ycbcr_texture

#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA // NOLINT
#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB // NOLINT
#define GL_YCBCR_MESA 0x8757 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_MESA_ycbcr_texture();
#endif // GL_MESA_ycbcr_texture

#if !defined(GL_NVX_blend_equation_advanced_multi_draw_buffers)
#define GL_NVX_blend_equation_advanced_multi_draw_buffers

NN_GLL_API GLboolean nngllIsSupported_GL_NVX_blend_equation_advanced_multi_draw_buffers();
#endif // GL_NVX_blend_equation_advanced_multi_draw_buffers

#if !defined(GL_NVX_conditional_render)
#define GL_NVX_conditional_render

typedef void ( NN_GLL_GL_APIENTRY *glBeginConditionalRenderNVXType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glEndConditionalRenderNVXType )(  );
#define glBeginConditionalRenderNVX g_nngllBeginConditionalRenderNVX
#define glEndConditionalRenderNVX g_nngllEndConditionalRenderNVX
NN_GLL_API glBeginConditionalRenderNVXType g_nngllBeginConditionalRenderNVX;
NN_GLL_API glEndConditionalRenderNVXType g_nngllEndConditionalRenderNVX;
NN_GLL_API GLboolean nngllIsSupported_GL_NVX_conditional_render();
#endif // GL_NVX_conditional_render

#if !defined(GL_NVX_gpu_memory_info)
#define GL_NVX_gpu_memory_info

#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047 // NOLINT
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048 // NOLINT
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049 // NOLINT
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A // NOLINT
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NVX_gpu_memory_info();
#endif // GL_NVX_gpu_memory_info

#if !defined(GL_NVX_linked_gpu_multicast)
#define GL_NVX_linked_gpu_multicast

#define GL_LGPU_SEPARATE_STORAGE_BIT_NVX 0x0800 // NOLINT
#define GL_MAX_LGPU_GPUS_NVX 0x92BA // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glLGPUNamedBufferSubDataNVXType )( GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glLGPUCopyImageSubDataNVXType )( GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth );
typedef void ( NN_GLL_GL_APIENTRY *glLGPUInterlockNVXType )(  );
#define glLGPUNamedBufferSubDataNVX g_nngllLGPUNamedBufferSubDataNVX
#define glLGPUCopyImageSubDataNVX g_nngllLGPUCopyImageSubDataNVX
#define glLGPUInterlockNVX g_nngllLGPUInterlockNVX
NN_GLL_API glLGPUNamedBufferSubDataNVXType g_nngllLGPUNamedBufferSubDataNVX;
NN_GLL_API glLGPUCopyImageSubDataNVXType g_nngllLGPUCopyImageSubDataNVX;
NN_GLL_API glLGPUInterlockNVXType g_nngllLGPUInterlockNVX;
NN_GLL_API GLboolean nngllIsSupported_GL_NVX_linked_gpu_multicast();
#endif // GL_NVX_linked_gpu_multicast

#if !defined(GL_NV_alpha_to_coverage_dither_control)
#define GL_NV_alpha_to_coverage_dither_control

#define GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV 0x934D // NOLINT
#define GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV 0x934E // NOLINT
#define GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV 0x934F // NOLINT
#define GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV 0x92BF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glAlphaToCoverageDitherControlNVType )( GLenum mode );
#define glAlphaToCoverageDitherControlNV g_nngllAlphaToCoverageDitherControlNV
NN_GLL_API glAlphaToCoverageDitherControlNVType g_nngllAlphaToCoverageDitherControlNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_alpha_to_coverage_dither_control();
#endif // GL_NV_alpha_to_coverage_dither_control

#if !defined(GL_NV_bindless_multi_draw_indirect)
#define GL_NV_bindless_multi_draw_indirect

typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawArraysIndirectBindlessNVType )( GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawElementsIndirectBindlessNVType )( GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount );
#define glMultiDrawArraysIndirectBindlessNV g_nngllMultiDrawArraysIndirectBindlessNV
#define glMultiDrawElementsIndirectBindlessNV g_nngllMultiDrawElementsIndirectBindlessNV
NN_GLL_API glMultiDrawArraysIndirectBindlessNVType g_nngllMultiDrawArraysIndirectBindlessNV;
NN_GLL_API glMultiDrawElementsIndirectBindlessNVType g_nngllMultiDrawElementsIndirectBindlessNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_bindless_multi_draw_indirect();
#endif // GL_NV_bindless_multi_draw_indirect

#if !defined(GL_NV_bindless_multi_draw_indirect_count)
#define GL_NV_bindless_multi_draw_indirect_count

typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawArraysIndirectBindlessCountNVType )( GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount );
typedef void ( NN_GLL_GL_APIENTRY *glMultiDrawElementsIndirectBindlessCountNVType )( GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount );
#define glMultiDrawArraysIndirectBindlessCountNV g_nngllMultiDrawArraysIndirectBindlessCountNV
#define glMultiDrawElementsIndirectBindlessCountNV g_nngllMultiDrawElementsIndirectBindlessCountNV
NN_GLL_API glMultiDrawArraysIndirectBindlessCountNVType g_nngllMultiDrawArraysIndirectBindlessCountNV;
NN_GLL_API glMultiDrawElementsIndirectBindlessCountNVType g_nngllMultiDrawElementsIndirectBindlessCountNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_bindless_multi_draw_indirect_count();
#endif // GL_NV_bindless_multi_draw_indirect_count

#if !defined(GL_NV_bindless_texture)
#define GL_NV_bindless_texture

typedef GLuint64 ( NN_GLL_GL_APIENTRY *glGetTextureHandleNVType )( GLuint texture );
typedef GLuint64 ( NN_GLL_GL_APIENTRY *glGetTextureSamplerHandleNVType )( GLuint texture, GLuint sampler );
typedef void ( NN_GLL_GL_APIENTRY *glMakeTextureHandleResidentNVType )( GLuint64 handle );
typedef void ( NN_GLL_GL_APIENTRY *glMakeTextureHandleNonResidentNVType )( GLuint64 handle );
typedef GLuint64 ( NN_GLL_GL_APIENTRY *glGetImageHandleNVType )( GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format );
typedef void ( NN_GLL_GL_APIENTRY *glMakeImageHandleResidentNVType )( GLuint64 handle, GLenum access );
typedef void ( NN_GLL_GL_APIENTRY *glMakeImageHandleNonResidentNVType )( GLuint64 handle );
typedef void ( NN_GLL_GL_APIENTRY *glUniformHandleui64NVType )( GLint location, GLuint64 value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformHandleui64vNVType )( GLint location, GLsizei count, const GLuint64 *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformHandleui64NVType )( GLuint program, GLint location, GLuint64 value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformHandleui64vNVType )( GLuint program, GLint location, GLsizei count, const GLuint64 *values );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsTextureHandleResidentNVType )( GLuint64 handle );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsImageHandleResidentNVType )( GLuint64 handle );
#define glGetTextureHandleNV g_nngllGetTextureHandleNV
#define glGetTextureSamplerHandleNV g_nngllGetTextureSamplerHandleNV
#define glMakeTextureHandleResidentNV g_nngllMakeTextureHandleResidentNV
#define glMakeTextureHandleNonResidentNV g_nngllMakeTextureHandleNonResidentNV
#define glGetImageHandleNV g_nngllGetImageHandleNV
#define glMakeImageHandleResidentNV g_nngllMakeImageHandleResidentNV
#define glMakeImageHandleNonResidentNV g_nngllMakeImageHandleNonResidentNV
#define glUniformHandleui64NV g_nngllUniformHandleui64NV
#define glUniformHandleui64vNV g_nngllUniformHandleui64vNV
#define glProgramUniformHandleui64NV g_nngllProgramUniformHandleui64NV
#define glProgramUniformHandleui64vNV g_nngllProgramUniformHandleui64vNV
#define glIsTextureHandleResidentNV g_nngllIsTextureHandleResidentNV
#define glIsImageHandleResidentNV g_nngllIsImageHandleResidentNV
NN_GLL_API glGetTextureHandleNVType g_nngllGetTextureHandleNV;
NN_GLL_API glGetTextureSamplerHandleNVType g_nngllGetTextureSamplerHandleNV;
NN_GLL_API glMakeTextureHandleResidentNVType g_nngllMakeTextureHandleResidentNV;
NN_GLL_API glMakeTextureHandleNonResidentNVType g_nngllMakeTextureHandleNonResidentNV;
NN_GLL_API glGetImageHandleNVType g_nngllGetImageHandleNV;
NN_GLL_API glMakeImageHandleResidentNVType g_nngllMakeImageHandleResidentNV;
NN_GLL_API glMakeImageHandleNonResidentNVType g_nngllMakeImageHandleNonResidentNV;
NN_GLL_API glUniformHandleui64NVType g_nngllUniformHandleui64NV;
NN_GLL_API glUniformHandleui64vNVType g_nngllUniformHandleui64vNV;
NN_GLL_API glProgramUniformHandleui64NVType g_nngllProgramUniformHandleui64NV;
NN_GLL_API glProgramUniformHandleui64vNVType g_nngllProgramUniformHandleui64vNV;
NN_GLL_API glIsTextureHandleResidentNVType g_nngllIsTextureHandleResidentNV;
NN_GLL_API glIsImageHandleResidentNVType g_nngllIsImageHandleResidentNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_bindless_texture();
#endif // GL_NV_bindless_texture

#if !defined(GL_NV_blend_equation_advanced)
#define GL_NV_blend_equation_advanced

#define GL_BLEND_OVERLAP_NV 0x9281 // NOLINT
#define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280 // NOLINT
#define GL_BLUE_NV 0x1905 // NOLINT
#define GL_COLORBURN_NV 0x929A // NOLINT
#define GL_COLORDODGE_NV 0x9299 // NOLINT
#define GL_CONJOINT_NV 0x9284 // NOLINT
#define GL_CONTRAST_NV 0x92A1 // NOLINT
#define GL_DARKEN_NV 0x9297 // NOLINT
#define GL_DIFFERENCE_NV 0x929E // NOLINT
#define GL_DISJOINT_NV 0x9283 // NOLINT
#define GL_DST_ATOP_NV 0x928F // NOLINT
#define GL_DST_IN_NV 0x928B // NOLINT
#define GL_DST_NV 0x9287 // NOLINT
#define GL_DST_OUT_NV 0x928D // NOLINT
#define GL_DST_OVER_NV 0x9289 // NOLINT
#define GL_EXCLUSION_NV 0x92A0 // NOLINT
#define GL_GREEN_NV 0x1904 // NOLINT
#define GL_HARDLIGHT_NV 0x929B // NOLINT
#define GL_HARDMIX_NV 0x92A9 // NOLINT
#define GL_HSL_COLOR_NV 0x92AF // NOLINT
#define GL_HSL_HUE_NV 0x92AD // NOLINT
#define GL_HSL_LUMINOSITY_NV 0x92B0 // NOLINT
#define GL_HSL_SATURATION_NV 0x92AE // NOLINT
#define GL_INVERT_OVG_NV 0x92B4 // NOLINT
#define GL_INVERT_RGB_NV 0x92A3 // NOLINT
#define GL_LIGHTEN_NV 0x9298 // NOLINT
#define GL_LINEARBURN_NV 0x92A5 // NOLINT
#define GL_LINEARDODGE_NV 0x92A4 // NOLINT
#define GL_LINEARLIGHT_NV 0x92A7 // NOLINT
#define GL_MINUS_CLAMPED_NV 0x92B3 // NOLINT
#define GL_MINUS_NV 0x929F // NOLINT
#define GL_MULTIPLY_NV 0x9294 // NOLINT
#define GL_OVERLAY_NV 0x9296 // NOLINT
#define GL_PINLIGHT_NV 0x92A8 // NOLINT
#define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2 // NOLINT
#define GL_PLUS_CLAMPED_NV 0x92B1 // NOLINT
#define GL_PLUS_DARKER_NV 0x9292 // NOLINT
#define GL_PLUS_NV 0x9291 // NOLINT
#define GL_RED_NV 0x1903 // NOLINT
#define GL_SCREEN_NV 0x9295 // NOLINT
#define GL_SOFTLIGHT_NV 0x929C // NOLINT
#define GL_SRC_ATOP_NV 0x928E // NOLINT
#define GL_SRC_IN_NV 0x928A // NOLINT
#define GL_SRC_NV 0x9286 // NOLINT
#define GL_SRC_OUT_NV 0x928C // NOLINT
#define GL_SRC_OVER_NV 0x9288 // NOLINT
#define GL_UNCORRELATED_NV 0x9282 // NOLINT
#define GL_VIVIDLIGHT_NV 0x92A6 // NOLINT
#define GL_XOR_NV 0x1506 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBlendParameteriNVType )( GLenum pname, GLint value );
typedef void ( NN_GLL_GL_APIENTRY *glBlendBarrierNVType )(  );
#define glBlendParameteriNV g_nngllBlendParameteriNV
#define glBlendBarrierNV g_nngllBlendBarrierNV
NN_GLL_API glBlendParameteriNVType g_nngllBlendParameteriNV;
NN_GLL_API glBlendBarrierNVType g_nngllBlendBarrierNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_blend_equation_advanced();
#endif // GL_NV_blend_equation_advanced

#if !defined(GL_NV_blend_equation_advanced_coherent)
#define GL_NV_blend_equation_advanced_coherent

#define GL_BLEND_ADVANCED_COHERENT_NV 0x9285 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_blend_equation_advanced_coherent();
#endif // GL_NV_blend_equation_advanced_coherent

#if !defined(GL_NV_blend_minmax_factor)
#define GL_NV_blend_minmax_factor

NN_GLL_API GLboolean nngllIsSupported_GL_NV_blend_minmax_factor();
#endif // GL_NV_blend_minmax_factor

#if !defined(GL_NV_blend_square)
#define GL_NV_blend_square

NN_GLL_API GLboolean nngllIsSupported_GL_NV_blend_square();
#endif // GL_NV_blend_square

#if !defined(GL_NV_clip_space_w_scaling)
#define GL_NV_clip_space_w_scaling

#define GL_VIEWPORT_POSITION_W_SCALE_NV 0x937C // NOLINT
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D // NOLINT
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glViewportPositionWScaleNVType )( GLuint index, GLfloat xcoeff, GLfloat ycoeff );
#define glViewportPositionWScaleNV g_nngllViewportPositionWScaleNV
NN_GLL_API glViewportPositionWScaleNVType g_nngllViewportPositionWScaleNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_clip_space_w_scaling();
#endif // GL_NV_clip_space_w_scaling

#if !defined(GL_NV_command_list)
#define GL_NV_command_list

#define GL_TERMINATE_SEQUENCE_COMMAND_NV 0x0000 // NOLINT
#define GL_NOP_COMMAND_NV 0x0001 // NOLINT
#define GL_DRAW_ELEMENTS_COMMAND_NV 0x0002 // NOLINT
#define GL_DRAW_ARRAYS_COMMAND_NV 0x0003 // NOLINT
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004 // NOLINT
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0x0005 // NOLINT
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006 // NOLINT
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007 // NOLINT
#define GL_ELEMENT_ADDRESS_COMMAND_NV 0x0008 // NOLINT
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0x0009 // NOLINT
#define GL_UNIFORM_ADDRESS_COMMAND_NV 0x000A // NOLINT
#define GL_BLEND_COLOR_COMMAND_NV 0x000B // NOLINT
#define GL_STENCIL_REF_COMMAND_NV 0x000C // NOLINT
#define GL_LINE_WIDTH_COMMAND_NV 0x000D // NOLINT
#define GL_POLYGON_OFFSET_COMMAND_NV 0x000E // NOLINT
#define GL_ALPHA_REF_COMMAND_NV 0x000F // NOLINT
#define GL_VIEWPORT_COMMAND_NV 0x0010 // NOLINT
#define GL_SCISSOR_COMMAND_NV 0x0011 // NOLINT
#define GL_FRONT_FACE_COMMAND_NV 0x0012 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glCreateStatesNVType )( GLsizei n, GLuint *states );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteStatesNVType )( GLsizei n, const GLuint *states );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsStateNVType )( GLuint state );
typedef void ( NN_GLL_GL_APIENTRY *glStateCaptureNVType )( GLuint state, GLenum mode );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGetCommandHeaderNVType )( GLenum tokenID, GLuint size );
typedef GLushort ( NN_GLL_GL_APIENTRY *glGetStageIndexNVType )( GLenum shadertype );
typedef void ( NN_GLL_GL_APIENTRY *glDrawCommandsNVType )( GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count );
typedef void ( NN_GLL_GL_APIENTRY *glDrawCommandsAddressNVType )( GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count );
typedef void ( NN_GLL_GL_APIENTRY *glDrawCommandsStatesNVType )( GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
typedef void ( NN_GLL_GL_APIENTRY *glDrawCommandsStatesAddressNVType )( const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
typedef void ( NN_GLL_GL_APIENTRY *glCreateCommandListsNVType )( GLsizei n, GLuint *lists );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteCommandListsNVType )( GLsizei n, const GLuint *lists );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsCommandListNVType )( GLuint list );
typedef void ( NN_GLL_GL_APIENTRY *glListDrawCommandsStatesClientNVType )( GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count );
typedef void ( NN_GLL_GL_APIENTRY *glCommandListSegmentsNVType )( GLuint list, GLuint segments );
typedef void ( NN_GLL_GL_APIENTRY *glCompileCommandListNVType )( GLuint list );
typedef void ( NN_GLL_GL_APIENTRY *glCallCommandListNVType )( GLuint list );
#define glCreateStatesNV g_nngllCreateStatesNV
#define glDeleteStatesNV g_nngllDeleteStatesNV
#define glIsStateNV g_nngllIsStateNV
#define glStateCaptureNV g_nngllStateCaptureNV
#define glGetCommandHeaderNV g_nngllGetCommandHeaderNV
#define glGetStageIndexNV g_nngllGetStageIndexNV
#define glDrawCommandsNV g_nngllDrawCommandsNV
#define glDrawCommandsAddressNV g_nngllDrawCommandsAddressNV
#define glDrawCommandsStatesNV g_nngllDrawCommandsStatesNV
#define glDrawCommandsStatesAddressNV g_nngllDrawCommandsStatesAddressNV
#define glCreateCommandListsNV g_nngllCreateCommandListsNV
#define glDeleteCommandListsNV g_nngllDeleteCommandListsNV
#define glIsCommandListNV g_nngllIsCommandListNV
#define glListDrawCommandsStatesClientNV g_nngllListDrawCommandsStatesClientNV
#define glCommandListSegmentsNV g_nngllCommandListSegmentsNV
#define glCompileCommandListNV g_nngllCompileCommandListNV
#define glCallCommandListNV g_nngllCallCommandListNV
NN_GLL_API glCreateStatesNVType g_nngllCreateStatesNV;
NN_GLL_API glDeleteStatesNVType g_nngllDeleteStatesNV;
NN_GLL_API glIsStateNVType g_nngllIsStateNV;
NN_GLL_API glStateCaptureNVType g_nngllStateCaptureNV;
NN_GLL_API glGetCommandHeaderNVType g_nngllGetCommandHeaderNV;
NN_GLL_API glGetStageIndexNVType g_nngllGetStageIndexNV;
NN_GLL_API glDrawCommandsNVType g_nngllDrawCommandsNV;
NN_GLL_API glDrawCommandsAddressNVType g_nngllDrawCommandsAddressNV;
NN_GLL_API glDrawCommandsStatesNVType g_nngllDrawCommandsStatesNV;
NN_GLL_API glDrawCommandsStatesAddressNVType g_nngllDrawCommandsStatesAddressNV;
NN_GLL_API glCreateCommandListsNVType g_nngllCreateCommandListsNV;
NN_GLL_API glDeleteCommandListsNVType g_nngllDeleteCommandListsNV;
NN_GLL_API glIsCommandListNVType g_nngllIsCommandListNV;
NN_GLL_API glListDrawCommandsStatesClientNVType g_nngllListDrawCommandsStatesClientNV;
NN_GLL_API glCommandListSegmentsNVType g_nngllCommandListSegmentsNV;
NN_GLL_API glCompileCommandListNVType g_nngllCompileCommandListNV;
NN_GLL_API glCallCommandListNVType g_nngllCallCommandListNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_command_list();
#endif // GL_NV_command_list

#if !defined(GL_NV_compute_program5)
#define GL_NV_compute_program5

#define GL_COMPUTE_PROGRAM_NV 0x90FB // NOLINT
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_compute_program5();
#endif // GL_NV_compute_program5

#if !defined(GL_NV_conditional_render)
#define GL_NV_conditional_render

#define GL_QUERY_WAIT_NV 0x8E13 // NOLINT
#define GL_QUERY_NO_WAIT_NV 0x8E14 // NOLINT
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15 // NOLINT
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBeginConditionalRenderNVType )( GLuint id, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glEndConditionalRenderNVType )(  );
#define glBeginConditionalRenderNV g_nngllBeginConditionalRenderNV
#define glEndConditionalRenderNV g_nngllEndConditionalRenderNV
NN_GLL_API glBeginConditionalRenderNVType g_nngllBeginConditionalRenderNV;
NN_GLL_API glEndConditionalRenderNVType g_nngllEndConditionalRenderNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_conditional_render();
#endif // GL_NV_conditional_render

#if !defined(GL_NV_conservative_raster)
#define GL_NV_conservative_raster

#define GL_CONSERVATIVE_RASTERIZATION_NV 0x9346 // NOLINT
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347 // NOLINT
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348 // NOLINT
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glSubpixelPrecisionBiasNVType )( GLuint xbits, GLuint ybits );
#define glSubpixelPrecisionBiasNV g_nngllSubpixelPrecisionBiasNV
NN_GLL_API glSubpixelPrecisionBiasNVType g_nngllSubpixelPrecisionBiasNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_conservative_raster();
#endif // GL_NV_conservative_raster

#if !defined(GL_NV_conservative_raster_dilate)
#define GL_NV_conservative_raster_dilate

#define GL_CONSERVATIVE_RASTER_DILATE_NV 0x9379 // NOLINT
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A // NOLINT
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glConservativeRasterParameterfNVType )( GLenum pname, GLfloat value );
#define glConservativeRasterParameterfNV g_nngllConservativeRasterParameterfNV
NN_GLL_API glConservativeRasterParameterfNVType g_nngllConservativeRasterParameterfNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_conservative_raster_dilate();
#endif // GL_NV_conservative_raster_dilate

#if !defined(GL_NV_conservative_raster_pre_snap)
#define GL_NV_conservative_raster_pre_snap

#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV 0x9550 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_conservative_raster_pre_snap();
#endif // GL_NV_conservative_raster_pre_snap

#if !defined(GL_NV_conservative_raster_pre_snap_triangles)
#define GL_NV_conservative_raster_pre_snap_triangles

#define GL_CONSERVATIVE_RASTER_MODE_NV 0x954D // NOLINT
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E // NOLINT
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glConservativeRasterParameteriNVType )( GLenum pname, GLint param );
#define glConservativeRasterParameteriNV g_nngllConservativeRasterParameteriNV
NN_GLL_API glConservativeRasterParameteriNVType g_nngllConservativeRasterParameteriNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_conservative_raster_pre_snap_triangles();
#endif // GL_NV_conservative_raster_pre_snap_triangles

#if !defined(GL_NV_conservative_raster_underestimation)
#define GL_NV_conservative_raster_underestimation

NN_GLL_API GLboolean nngllIsSupported_GL_NV_conservative_raster_underestimation();
#endif // GL_NV_conservative_raster_underestimation

#if !defined(GL_NV_copy_depth_to_color)
#define GL_NV_copy_depth_to_color

#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E // NOLINT
#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_copy_depth_to_color();
#endif // GL_NV_copy_depth_to_color

#if !defined(GL_NV_copy_image)
#define GL_NV_copy_image

typedef void ( NN_GLL_GL_APIENTRY *glCopyImageSubDataNVType )( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth );
#define glCopyImageSubDataNV g_nngllCopyImageSubDataNV
NN_GLL_API glCopyImageSubDataNVType g_nngllCopyImageSubDataNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_copy_image();
#endif // GL_NV_copy_image

#if !defined(GL_NV_deep_texture3D)
#define GL_NV_deep_texture3D

#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0 // NOLINT
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0x90D1 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_deep_texture3D();
#endif // GL_NV_deep_texture3D

#if !defined(GL_NV_depth_buffer_float)
#define GL_NV_depth_buffer_float

#define GL_DEPTH_COMPONENT32F_NV 0x8DAB // NOLINT
#define GL_DEPTH32F_STENCIL8_NV 0x8DAC // NOLINT
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD // NOLINT
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDepthRangedNVType )( GLdouble zNear, GLdouble zFar );
typedef void ( NN_GLL_GL_APIENTRY *glClearDepthdNVType )( GLdouble depth );
typedef void ( NN_GLL_GL_APIENTRY *glDepthBoundsdNVType )( GLdouble zmin, GLdouble zmax );
#define glDepthRangedNV g_nngllDepthRangedNV
#define glClearDepthdNV g_nngllClearDepthdNV
#define glDepthBoundsdNV g_nngllDepthBoundsdNV
NN_GLL_API glDepthRangedNVType g_nngllDepthRangedNV;
NN_GLL_API glClearDepthdNVType g_nngllClearDepthdNV;
NN_GLL_API glDepthBoundsdNVType g_nngllDepthBoundsdNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_depth_buffer_float();
#endif // GL_NV_depth_buffer_float

#if !defined(GL_NV_depth_clamp)
#define GL_NV_depth_clamp

#define GL_DEPTH_CLAMP_NV 0x864F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_depth_clamp();
#endif // GL_NV_depth_clamp

#if !defined(GL_NV_draw_texture)
#define GL_NV_draw_texture

typedef void ( NN_GLL_GL_APIENTRY *glDrawTextureNVType )( GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1 );
#define glDrawTextureNV g_nngllDrawTextureNV
NN_GLL_API glDrawTextureNVType g_nngllDrawTextureNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_draw_texture();
#endif // GL_NV_draw_texture

#if !defined(GL_NV_draw_vulkan_image)
#define GL_NV_draw_vulkan_image

typedef void ( *GLVULKANPROCNV)(void);
typedef void ( NN_GLL_GL_APIENTRY *glDrawVkImageNVType )( GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1 );
typedef GLVULKANPROCNV ( NN_GLL_GL_APIENTRY *glGetVkProcAddrNVType )( const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glWaitVkSemaphoreNVType )( GLuint64 vkSemaphore );
typedef void ( NN_GLL_GL_APIENTRY *glSignalVkSemaphoreNVType )( GLuint64 vkSemaphore );
typedef void ( NN_GLL_GL_APIENTRY *glSignalVkFenceNVType )( GLuint64 vkFence );
#define glDrawVkImageNV g_nngllDrawVkImageNV
#define glGetVkProcAddrNV g_nngllGetVkProcAddrNV
#define glWaitVkSemaphoreNV g_nngllWaitVkSemaphoreNV
#define glSignalVkSemaphoreNV g_nngllSignalVkSemaphoreNV
#define glSignalVkFenceNV g_nngllSignalVkFenceNV
NN_GLL_API glDrawVkImageNVType g_nngllDrawVkImageNV;
NN_GLL_API glGetVkProcAddrNVType g_nngllGetVkProcAddrNV;
NN_GLL_API glWaitVkSemaphoreNVType g_nngllWaitVkSemaphoreNV;
NN_GLL_API glSignalVkSemaphoreNVType g_nngllSignalVkSemaphoreNV;
NN_GLL_API glSignalVkFenceNVType g_nngllSignalVkFenceNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_draw_vulkan_image();
#endif // GL_NV_draw_vulkan_image

#if !defined(GL_NV_evaluators)
#define GL_NV_evaluators

#define GL_EVAL_2D_NV 0x86C0 // NOLINT
#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1 // NOLINT
#define GL_MAP_TESSELLATION_NV 0x86C2 // NOLINT
#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3 // NOLINT
#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4 // NOLINT
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5 // NOLINT
#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6 // NOLINT
#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7 // NOLINT
#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8 // NOLINT
#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9 // NOLINT
#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA // NOLINT
#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB // NOLINT
#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC // NOLINT
#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD // NOLINT
#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE // NOLINT
#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF // NOLINT
#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0 // NOLINT
#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1 // NOLINT
#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2 // NOLINT
#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3 // NOLINT
#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4 // NOLINT
#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5 // NOLINT
#define GL_MAX_MAP_TESSELLATION_NV 0x86D6 // NOLINT
#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glMapControlPointsNVType )( GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points );
typedef void ( NN_GLL_GL_APIENTRY *glMapParameterivNVType )( GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glMapParameterfvNVType )( GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMapControlPointsNVType )( GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points );
typedef void ( NN_GLL_GL_APIENTRY *glGetMapParameterivNVType )( GLenum target, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMapParameterfvNVType )( GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMapAttribParameterivNVType )( GLenum target, GLuint index, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMapAttribParameterfvNVType )( GLenum target, GLuint index, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glEvalMapsNVType )( GLenum target, GLenum mode );
#define glMapControlPointsNV g_nngllMapControlPointsNV
#define glMapParameterivNV g_nngllMapParameterivNV
#define glMapParameterfvNV g_nngllMapParameterfvNV
#define glGetMapControlPointsNV g_nngllGetMapControlPointsNV
#define glGetMapParameterivNV g_nngllGetMapParameterivNV
#define glGetMapParameterfvNV g_nngllGetMapParameterfvNV
#define glGetMapAttribParameterivNV g_nngllGetMapAttribParameterivNV
#define glGetMapAttribParameterfvNV g_nngllGetMapAttribParameterfvNV
#define glEvalMapsNV g_nngllEvalMapsNV
NN_GLL_API glMapControlPointsNVType g_nngllMapControlPointsNV;
NN_GLL_API glMapParameterivNVType g_nngllMapParameterivNV;
NN_GLL_API glMapParameterfvNVType g_nngllMapParameterfvNV;
NN_GLL_API glGetMapControlPointsNVType g_nngllGetMapControlPointsNV;
NN_GLL_API glGetMapParameterivNVType g_nngllGetMapParameterivNV;
NN_GLL_API glGetMapParameterfvNVType g_nngllGetMapParameterfvNV;
NN_GLL_API glGetMapAttribParameterivNVType g_nngllGetMapAttribParameterivNV;
NN_GLL_API glGetMapAttribParameterfvNVType g_nngllGetMapAttribParameterfvNV;
NN_GLL_API glEvalMapsNVType g_nngllEvalMapsNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_evaluators();
#endif // GL_NV_evaluators

#if !defined(GL_NV_explicit_multisample)
#define GL_NV_explicit_multisample

#define GL_SAMPLE_POSITION_NV 0x8E50 // NOLINT
#define GL_SAMPLE_MASK_NV 0x8E51 // NOLINT
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52 // NOLINT
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53 // NOLINT
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54 // NOLINT
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55 // NOLINT
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56 // NOLINT
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57 // NOLINT
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58 // NOLINT
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGetMultisamplefvNVType )( GLenum pname, GLuint index, GLfloat *val );
typedef void ( NN_GLL_GL_APIENTRY *glSampleMaskIndexedNVType )( GLuint index, GLbitfield mask );
typedef void ( NN_GLL_GL_APIENTRY *glTexRenderbufferNVType )( GLenum target, GLuint renderbuffer );
#define glGetMultisamplefvNV g_nngllGetMultisamplefvNV
#define glSampleMaskIndexedNV g_nngllSampleMaskIndexedNV
#define glTexRenderbufferNV g_nngllTexRenderbufferNV
NN_GLL_API glGetMultisamplefvNVType g_nngllGetMultisamplefvNV;
NN_GLL_API glSampleMaskIndexedNVType g_nngllSampleMaskIndexedNV;
NN_GLL_API glTexRenderbufferNVType g_nngllTexRenderbufferNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_explicit_multisample();
#endif // GL_NV_explicit_multisample

#if !defined(GL_NV_fence)
#define GL_NV_fence

#define GL_ALL_COMPLETED_NV 0x84F2 // NOLINT
#define GL_FENCE_STATUS_NV 0x84F3 // NOLINT
#define GL_FENCE_CONDITION_NV 0x84F4 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDeleteFencesNVType )( GLsizei n, const GLuint *fences );
typedef void ( NN_GLL_GL_APIENTRY *glGenFencesNVType )( GLsizei n, GLuint *fences );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsFenceNVType )( GLuint fence );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glTestFenceNVType )( GLuint fence );
typedef void ( NN_GLL_GL_APIENTRY *glGetFenceivNVType )( GLuint fence, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glFinishFenceNVType )( GLuint fence );
typedef void ( NN_GLL_GL_APIENTRY *glSetFenceNVType )( GLuint fence, GLenum condition );
#define glDeleteFencesNV g_nngllDeleteFencesNV
#define glGenFencesNV g_nngllGenFencesNV
#define glIsFenceNV g_nngllIsFenceNV
#define glTestFenceNV g_nngllTestFenceNV
#define glGetFenceivNV g_nngllGetFenceivNV
#define glFinishFenceNV g_nngllFinishFenceNV
#define glSetFenceNV g_nngllSetFenceNV
NN_GLL_API glDeleteFencesNVType g_nngllDeleteFencesNV;
NN_GLL_API glGenFencesNVType g_nngllGenFencesNV;
NN_GLL_API glIsFenceNVType g_nngllIsFenceNV;
NN_GLL_API glTestFenceNVType g_nngllTestFenceNV;
NN_GLL_API glGetFenceivNVType g_nngllGetFenceivNV;
NN_GLL_API glFinishFenceNVType g_nngllFinishFenceNV;
NN_GLL_API glSetFenceNVType g_nngllSetFenceNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_fence();
#endif // GL_NV_fence

#if !defined(GL_NV_fill_rectangle)
#define GL_NV_fill_rectangle

#define GL_FILL_RECTANGLE_NV 0x933C // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_fill_rectangle();
#endif // GL_NV_fill_rectangle

#if !defined(GL_NV_float_buffer)
#define GL_NV_float_buffer

#define GL_FLOAT_R_NV 0x8880 // NOLINT
#define GL_FLOAT_RG_NV 0x8881 // NOLINT
#define GL_FLOAT_RGB_NV 0x8882 // NOLINT
#define GL_FLOAT_RGBA_NV 0x8883 // NOLINT
#define GL_FLOAT_R16_NV 0x8884 // NOLINT
#define GL_FLOAT_R32_NV 0x8885 // NOLINT
#define GL_FLOAT_RG16_NV 0x8886 // NOLINT
#define GL_FLOAT_RG32_NV 0x8887 // NOLINT
#define GL_FLOAT_RGB16_NV 0x8888 // NOLINT
#define GL_FLOAT_RGB32_NV 0x8889 // NOLINT
#define GL_FLOAT_RGBA16_NV 0x888A // NOLINT
#define GL_FLOAT_RGBA32_NV 0x888B // NOLINT
#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C // NOLINT
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D // NOLINT
#define GL_FLOAT_RGBA_MODE_NV 0x888E // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_float_buffer();
#endif // GL_NV_float_buffer

#if !defined(GL_NV_fog_distance)
#define GL_NV_fog_distance

#define GL_FOG_DISTANCE_MODE_NV 0x855A // NOLINT
#define GL_EYE_RADIAL_NV 0x855B // NOLINT
#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_fog_distance();
#endif // GL_NV_fog_distance

#if !defined(GL_NV_fragment_coverage_to_color)
#define GL_NV_fragment_coverage_to_color

#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0x92DD // NOLINT
#define GL_FRAGMENT_COVERAGE_COLOR_NV 0x92DE // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFragmentCoverageColorNVType )( GLuint color );
#define glFragmentCoverageColorNV g_nngllFragmentCoverageColorNV
NN_GLL_API glFragmentCoverageColorNVType g_nngllFragmentCoverageColorNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_fragment_coverage_to_color();
#endif // GL_NV_fragment_coverage_to_color

#if !defined(GL_NV_fragment_program)
#define GL_NV_fragment_program

#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868 // NOLINT
#define GL_FRAGMENT_PROGRAM_NV 0x8870 // NOLINT
#define GL_MAX_TEXTURE_COORDS_NV 0x8871 // NOLINT
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872 // NOLINT
#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873 // NOLINT
#define GL_PROGRAM_ERROR_STRING_NV 0x8874 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glProgramNamedParameter4fNVType )( GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramNamedParameter4fvNVType )( GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glProgramNamedParameter4dNVType )( GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramNamedParameter4dvNVType )( GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramNamedParameterfvNVType )( GLuint id, GLsizei len, const GLubyte *name, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramNamedParameterdvNVType )( GLuint id, GLsizei len, const GLubyte *name, GLdouble *params );
#define glProgramNamedParameter4fNV g_nngllProgramNamedParameter4fNV
#define glProgramNamedParameter4fvNV g_nngllProgramNamedParameter4fvNV
#define glProgramNamedParameter4dNV g_nngllProgramNamedParameter4dNV
#define glProgramNamedParameter4dvNV g_nngllProgramNamedParameter4dvNV
#define glGetProgramNamedParameterfvNV g_nngllGetProgramNamedParameterfvNV
#define glGetProgramNamedParameterdvNV g_nngllGetProgramNamedParameterdvNV
NN_GLL_API glProgramNamedParameter4fNVType g_nngllProgramNamedParameter4fNV;
NN_GLL_API glProgramNamedParameter4fvNVType g_nngllProgramNamedParameter4fvNV;
NN_GLL_API glProgramNamedParameter4dNVType g_nngllProgramNamedParameter4dNV;
NN_GLL_API glProgramNamedParameter4dvNVType g_nngllProgramNamedParameter4dvNV;
NN_GLL_API glGetProgramNamedParameterfvNVType g_nngllGetProgramNamedParameterfvNV;
NN_GLL_API glGetProgramNamedParameterdvNVType g_nngllGetProgramNamedParameterdvNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_fragment_program();
#endif // GL_NV_fragment_program

#if !defined(GL_NV_fragment_program2)
#define GL_NV_fragment_program2

#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4 // NOLINT
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5 // NOLINT
#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6 // NOLINT
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7 // NOLINT
#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_fragment_program2();
#endif // GL_NV_fragment_program2

#if !defined(GL_NV_fragment_program4)
#define GL_NV_fragment_program4

NN_GLL_API GLboolean nngllIsSupported_GL_NV_fragment_program4();
#endif // GL_NV_fragment_program4

#if !defined(GL_NV_fragment_program_option)
#define GL_NV_fragment_program_option

NN_GLL_API GLboolean nngllIsSupported_GL_NV_fragment_program_option();
#endif // GL_NV_fragment_program_option

#if !defined(GL_NV_fragment_shader_interlock)
#define GL_NV_fragment_shader_interlock

NN_GLL_API GLboolean nngllIsSupported_GL_NV_fragment_shader_interlock();
#endif // GL_NV_fragment_shader_interlock

#if !defined(GL_NV_framebuffer_mixed_samples)
#define GL_NV_framebuffer_mixed_samples

#define GL_COVERAGE_MODULATION_TABLE_NV 0x9331 // NOLINT
#define GL_COLOR_SAMPLES_NV 0x8E20 // NOLINT
#define GL_DEPTH_SAMPLES_NV 0x932D // NOLINT
#define GL_STENCIL_SAMPLES_NV 0x932E // NOLINT
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F // NOLINT
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330 // NOLINT
#define GL_COVERAGE_MODULATION_NV 0x9332 // NOLINT
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glCoverageModulationTableNVType )( GLsizei n, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetCoverageModulationTableNVType )( GLsizei bufsize, GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glCoverageModulationNVType )( GLenum components );
#define glCoverageModulationTableNV g_nngllCoverageModulationTableNV
#define glGetCoverageModulationTableNV g_nngllGetCoverageModulationTableNV
#define glCoverageModulationNV g_nngllCoverageModulationNV
NN_GLL_API glCoverageModulationTableNVType g_nngllCoverageModulationTableNV;
NN_GLL_API glGetCoverageModulationTableNVType g_nngllGetCoverageModulationTableNV;
NN_GLL_API glCoverageModulationNVType g_nngllCoverageModulationNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_framebuffer_mixed_samples();
#endif // GL_NV_framebuffer_mixed_samples

#if !defined(GL_NV_framebuffer_multisample_coverage)
#define GL_NV_framebuffer_multisample_coverage

#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB // NOLINT
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10 // NOLINT
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11 // NOLINT
#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glRenderbufferStorageMultisampleCoverageNVType )( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height );
#define glRenderbufferStorageMultisampleCoverageNV g_nngllRenderbufferStorageMultisampleCoverageNV
NN_GLL_API glRenderbufferStorageMultisampleCoverageNVType g_nngllRenderbufferStorageMultisampleCoverageNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_framebuffer_multisample_coverage();
#endif // GL_NV_framebuffer_multisample_coverage

#if !defined(GL_NV_geometry_program4)
#define GL_NV_geometry_program4

#define GL_GEOMETRY_PROGRAM_NV 0x8C26 // NOLINT
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27 // NOLINT
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glProgramVertexLimitNVType )( GLenum target, GLint limit );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTextureEXTType )( GLenum target, GLenum attachment, GLuint texture, GLint level );
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTextureFaceEXTType )( GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face );
#define glProgramVertexLimitNV g_nngllProgramVertexLimitNV
#define glFramebufferTextureEXT g_nngllFramebufferTextureEXT
#define glFramebufferTextureFaceEXT g_nngllFramebufferTextureFaceEXT
NN_GLL_API glProgramVertexLimitNVType g_nngllProgramVertexLimitNV;
NN_GLL_API glFramebufferTextureEXTType g_nngllFramebufferTextureEXT;
NN_GLL_API glFramebufferTextureFaceEXTType g_nngllFramebufferTextureFaceEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_geometry_program4();
#endif // GL_NV_geometry_program4

#if !defined(GL_NV_geometry_shader4)
#define GL_NV_geometry_shader4

NN_GLL_API GLboolean nngllIsSupported_GL_NV_geometry_shader4();
#endif // GL_NV_geometry_shader4

#if !defined(GL_NV_geometry_shader_passthrough)
#define GL_NV_geometry_shader_passthrough

NN_GLL_API GLboolean nngllIsSupported_GL_NV_geometry_shader_passthrough();
#endif // GL_NV_geometry_shader_passthrough

#if !defined(GL_NV_gpu_program4)
#define GL_NV_gpu_program4

#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904 // NOLINT
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905 // NOLINT
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906 // NOLINT
#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907 // NOLINT
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908 // NOLINT
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909 // NOLINT
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5 // NOLINT
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glProgramLocalParameterI4iNVType )( GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramLocalParameterI4ivNVType )( GLenum target, GLuint index, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramLocalParametersI4ivNVType )( GLenum target, GLuint index, GLsizei count, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramLocalParameterI4uiNVType )( GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramLocalParameterI4uivNVType )( GLenum target, GLuint index, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramLocalParametersI4uivNVType )( GLenum target, GLuint index, GLsizei count, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramEnvParameterI4iNVType )( GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramEnvParameterI4ivNVType )( GLenum target, GLuint index, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramEnvParametersI4ivNVType )( GLenum target, GLuint index, GLsizei count, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramEnvParameterI4uiNVType )( GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramEnvParameterI4uivNVType )( GLenum target, GLuint index, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramEnvParametersI4uivNVType )( GLenum target, GLuint index, GLsizei count, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramLocalParameterIivNVType )( GLenum target, GLuint index, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramLocalParameterIuivNVType )( GLenum target, GLuint index, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramEnvParameterIivNVType )( GLenum target, GLuint index, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramEnvParameterIuivNVType )( GLenum target, GLuint index, GLuint *params );
#define glProgramLocalParameterI4iNV g_nngllProgramLocalParameterI4iNV
#define glProgramLocalParameterI4ivNV g_nngllProgramLocalParameterI4ivNV
#define glProgramLocalParametersI4ivNV g_nngllProgramLocalParametersI4ivNV
#define glProgramLocalParameterI4uiNV g_nngllProgramLocalParameterI4uiNV
#define glProgramLocalParameterI4uivNV g_nngllProgramLocalParameterI4uivNV
#define glProgramLocalParametersI4uivNV g_nngllProgramLocalParametersI4uivNV
#define glProgramEnvParameterI4iNV g_nngllProgramEnvParameterI4iNV
#define glProgramEnvParameterI4ivNV g_nngllProgramEnvParameterI4ivNV
#define glProgramEnvParametersI4ivNV g_nngllProgramEnvParametersI4ivNV
#define glProgramEnvParameterI4uiNV g_nngllProgramEnvParameterI4uiNV
#define glProgramEnvParameterI4uivNV g_nngllProgramEnvParameterI4uivNV
#define glProgramEnvParametersI4uivNV g_nngllProgramEnvParametersI4uivNV
#define glGetProgramLocalParameterIivNV g_nngllGetProgramLocalParameterIivNV
#define glGetProgramLocalParameterIuivNV g_nngllGetProgramLocalParameterIuivNV
#define glGetProgramEnvParameterIivNV g_nngllGetProgramEnvParameterIivNV
#define glGetProgramEnvParameterIuivNV g_nngllGetProgramEnvParameterIuivNV
NN_GLL_API glProgramLocalParameterI4iNVType g_nngllProgramLocalParameterI4iNV;
NN_GLL_API glProgramLocalParameterI4ivNVType g_nngllProgramLocalParameterI4ivNV;
NN_GLL_API glProgramLocalParametersI4ivNVType g_nngllProgramLocalParametersI4ivNV;
NN_GLL_API glProgramLocalParameterI4uiNVType g_nngllProgramLocalParameterI4uiNV;
NN_GLL_API glProgramLocalParameterI4uivNVType g_nngllProgramLocalParameterI4uivNV;
NN_GLL_API glProgramLocalParametersI4uivNVType g_nngllProgramLocalParametersI4uivNV;
NN_GLL_API glProgramEnvParameterI4iNVType g_nngllProgramEnvParameterI4iNV;
NN_GLL_API glProgramEnvParameterI4ivNVType g_nngllProgramEnvParameterI4ivNV;
NN_GLL_API glProgramEnvParametersI4ivNVType g_nngllProgramEnvParametersI4ivNV;
NN_GLL_API glProgramEnvParameterI4uiNVType g_nngllProgramEnvParameterI4uiNV;
NN_GLL_API glProgramEnvParameterI4uivNVType g_nngllProgramEnvParameterI4uivNV;
NN_GLL_API glProgramEnvParametersI4uivNVType g_nngllProgramEnvParametersI4uivNV;
NN_GLL_API glGetProgramLocalParameterIivNVType g_nngllGetProgramLocalParameterIivNV;
NN_GLL_API glGetProgramLocalParameterIuivNVType g_nngllGetProgramLocalParameterIuivNV;
NN_GLL_API glGetProgramEnvParameterIivNVType g_nngllGetProgramEnvParameterIivNV;
NN_GLL_API glGetProgramEnvParameterIuivNVType g_nngllGetProgramEnvParameterIuivNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_gpu_program4();
#endif // GL_NV_gpu_program4

#if !defined(GL_NV_gpu_program5)
#define GL_NV_gpu_program5

#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A // NOLINT
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B // NOLINT
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C // NOLINT
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D // NOLINT
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E // NOLINT
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F // NOLINT
#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44 // NOLINT
#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0x8F45 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glProgramSubroutineParametersuivNVType )( GLenum target, GLsizei count, const GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramSubroutineParameteruivNVType )( GLenum target, GLuint index, GLuint *param );
#define glProgramSubroutineParametersuivNV g_nngllProgramSubroutineParametersuivNV
#define glGetProgramSubroutineParameteruivNV g_nngllGetProgramSubroutineParameteruivNV
NN_GLL_API glProgramSubroutineParametersuivNVType g_nngllProgramSubroutineParametersuivNV;
NN_GLL_API glGetProgramSubroutineParameteruivNVType g_nngllGetProgramSubroutineParameteruivNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_gpu_program5();
#endif // GL_NV_gpu_program5

#if !defined(GL_NV_gpu_program5_mem_extended)
#define GL_NV_gpu_program5_mem_extended

NN_GLL_API GLboolean nngllIsSupported_GL_NV_gpu_program5_mem_extended();
#endif // GL_NV_gpu_program5_mem_extended

#if !defined(GL_NV_gpu_shader5)
#define GL_NV_gpu_shader5

NN_GLL_API GLboolean nngllIsSupported_GL_NV_gpu_shader5();
#endif // GL_NV_gpu_shader5

#if !defined(GL_NV_half_float)
#define GL_NV_half_float

typedef unsigned short GLhalfNV;
#define GL_HALF_FLOAT_NV 0x140B // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glVertex2hNVType )( GLhalfNV x, GLhalfNV y );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2hvNVType )( const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3hNVType )( GLhalfNV x, GLhalfNV y, GLhalfNV z );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3hvNVType )( const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4hNVType )( GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4hvNVType )( const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3hNVType )( GLhalfNV nx, GLhalfNV ny, GLhalfNV nz );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3hvNVType )( const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor3hNVType )( GLhalfNV red, GLhalfNV green, GLhalfNV blue );
typedef void ( NN_GLL_GL_APIENTRY *glColor3hvNVType )( const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor4hNVType )( GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha );
typedef void ( NN_GLL_GL_APIENTRY *glColor4hvNVType )( const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1hNVType )( GLhalfNV s );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1hvNVType )( const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2hNVType )( GLhalfNV s, GLhalfNV t );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2hvNVType )( const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3hNVType )( GLhalfNV s, GLhalfNV t, GLhalfNV r );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3hvNVType )( const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4hNVType )( GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4hvNVType )( const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1hNVType )( GLenum target, GLhalfNV s );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1hvNVType )( GLenum target, const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2hNVType )( GLenum target, GLhalfNV s, GLhalfNV t );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2hvNVType )( GLenum target, const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3hNVType )( GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3hvNVType )( GLenum target, const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4hNVType )( GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4hvNVType )( GLenum target, const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoordhNVType )( GLhalfNV fog );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoordhvNVType )( const GLhalfNV *fog );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3hNVType )( GLhalfNV red, GLhalfNV green, GLhalfNV blue );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColor3hvNVType )( const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexWeighthNVType )( GLhalfNV weight );
typedef void ( NN_GLL_GL_APIENTRY *glVertexWeighthvNVType )( const GLhalfNV *weight );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1hNVType )( GLuint index, GLhalfNV x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1hvNVType )( GLuint index, const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2hNVType )( GLuint index, GLhalfNV x, GLhalfNV y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2hvNVType )( GLuint index, const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3hNVType )( GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3hvNVType )( GLuint index, const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4hNVType )( GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4hvNVType )( GLuint index, const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs1hvNVType )( GLuint index, GLsizei n, const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs2hvNVType )( GLuint index, GLsizei n, const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs3hvNVType )( GLuint index, GLsizei n, const GLhalfNV *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs4hvNVType )( GLuint index, GLsizei n, const GLhalfNV *v );
#define glVertex2hNV g_nngllVertex2hNV
#define glVertex2hvNV g_nngllVertex2hvNV
#define glVertex3hNV g_nngllVertex3hNV
#define glVertex3hvNV g_nngllVertex3hvNV
#define glVertex4hNV g_nngllVertex4hNV
#define glVertex4hvNV g_nngllVertex4hvNV
#define glNormal3hNV g_nngllNormal3hNV
#define glNormal3hvNV g_nngllNormal3hvNV
#define glColor3hNV g_nngllColor3hNV
#define glColor3hvNV g_nngllColor3hvNV
#define glColor4hNV g_nngllColor4hNV
#define glColor4hvNV g_nngllColor4hvNV
#define glTexCoord1hNV g_nngllTexCoord1hNV
#define glTexCoord1hvNV g_nngllTexCoord1hvNV
#define glTexCoord2hNV g_nngllTexCoord2hNV
#define glTexCoord2hvNV g_nngllTexCoord2hvNV
#define glTexCoord3hNV g_nngllTexCoord3hNV
#define glTexCoord3hvNV g_nngllTexCoord3hvNV
#define glTexCoord4hNV g_nngllTexCoord4hNV
#define glTexCoord4hvNV g_nngllTexCoord4hvNV
#define glMultiTexCoord1hNV g_nngllMultiTexCoord1hNV
#define glMultiTexCoord1hvNV g_nngllMultiTexCoord1hvNV
#define glMultiTexCoord2hNV g_nngllMultiTexCoord2hNV
#define glMultiTexCoord2hvNV g_nngllMultiTexCoord2hvNV
#define glMultiTexCoord3hNV g_nngllMultiTexCoord3hNV
#define glMultiTexCoord3hvNV g_nngllMultiTexCoord3hvNV
#define glMultiTexCoord4hNV g_nngllMultiTexCoord4hNV
#define glMultiTexCoord4hvNV g_nngllMultiTexCoord4hvNV
#define glFogCoordhNV g_nngllFogCoordhNV
#define glFogCoordhvNV g_nngllFogCoordhvNV
#define glSecondaryColor3hNV g_nngllSecondaryColor3hNV
#define glSecondaryColor3hvNV g_nngllSecondaryColor3hvNV
#define glVertexWeighthNV g_nngllVertexWeighthNV
#define glVertexWeighthvNV g_nngllVertexWeighthvNV
#define glVertexAttrib1hNV g_nngllVertexAttrib1hNV
#define glVertexAttrib1hvNV g_nngllVertexAttrib1hvNV
#define glVertexAttrib2hNV g_nngllVertexAttrib2hNV
#define glVertexAttrib2hvNV g_nngllVertexAttrib2hvNV
#define glVertexAttrib3hNV g_nngllVertexAttrib3hNV
#define glVertexAttrib3hvNV g_nngllVertexAttrib3hvNV
#define glVertexAttrib4hNV g_nngllVertexAttrib4hNV
#define glVertexAttrib4hvNV g_nngllVertexAttrib4hvNV
#define glVertexAttribs1hvNV g_nngllVertexAttribs1hvNV
#define glVertexAttribs2hvNV g_nngllVertexAttribs2hvNV
#define glVertexAttribs3hvNV g_nngllVertexAttribs3hvNV
#define glVertexAttribs4hvNV g_nngllVertexAttribs4hvNV
NN_GLL_API glVertex2hNVType g_nngllVertex2hNV;
NN_GLL_API glVertex2hvNVType g_nngllVertex2hvNV;
NN_GLL_API glVertex3hNVType g_nngllVertex3hNV;
NN_GLL_API glVertex3hvNVType g_nngllVertex3hvNV;
NN_GLL_API glVertex4hNVType g_nngllVertex4hNV;
NN_GLL_API glVertex4hvNVType g_nngllVertex4hvNV;
NN_GLL_API glNormal3hNVType g_nngllNormal3hNV;
NN_GLL_API glNormal3hvNVType g_nngllNormal3hvNV;
NN_GLL_API glColor3hNVType g_nngllColor3hNV;
NN_GLL_API glColor3hvNVType g_nngllColor3hvNV;
NN_GLL_API glColor4hNVType g_nngllColor4hNV;
NN_GLL_API glColor4hvNVType g_nngllColor4hvNV;
NN_GLL_API glTexCoord1hNVType g_nngllTexCoord1hNV;
NN_GLL_API glTexCoord1hvNVType g_nngllTexCoord1hvNV;
NN_GLL_API glTexCoord2hNVType g_nngllTexCoord2hNV;
NN_GLL_API glTexCoord2hvNVType g_nngllTexCoord2hvNV;
NN_GLL_API glTexCoord3hNVType g_nngllTexCoord3hNV;
NN_GLL_API glTexCoord3hvNVType g_nngllTexCoord3hvNV;
NN_GLL_API glTexCoord4hNVType g_nngllTexCoord4hNV;
NN_GLL_API glTexCoord4hvNVType g_nngllTexCoord4hvNV;
NN_GLL_API glMultiTexCoord1hNVType g_nngllMultiTexCoord1hNV;
NN_GLL_API glMultiTexCoord1hvNVType g_nngllMultiTexCoord1hvNV;
NN_GLL_API glMultiTexCoord2hNVType g_nngllMultiTexCoord2hNV;
NN_GLL_API glMultiTexCoord2hvNVType g_nngllMultiTexCoord2hvNV;
NN_GLL_API glMultiTexCoord3hNVType g_nngllMultiTexCoord3hNV;
NN_GLL_API glMultiTexCoord3hvNVType g_nngllMultiTexCoord3hvNV;
NN_GLL_API glMultiTexCoord4hNVType g_nngllMultiTexCoord4hNV;
NN_GLL_API glMultiTexCoord4hvNVType g_nngllMultiTexCoord4hvNV;
NN_GLL_API glFogCoordhNVType g_nngllFogCoordhNV;
NN_GLL_API glFogCoordhvNVType g_nngllFogCoordhvNV;
NN_GLL_API glSecondaryColor3hNVType g_nngllSecondaryColor3hNV;
NN_GLL_API glSecondaryColor3hvNVType g_nngllSecondaryColor3hvNV;
NN_GLL_API glVertexWeighthNVType g_nngllVertexWeighthNV;
NN_GLL_API glVertexWeighthvNVType g_nngllVertexWeighthvNV;
NN_GLL_API glVertexAttrib1hNVType g_nngllVertexAttrib1hNV;
NN_GLL_API glVertexAttrib1hvNVType g_nngllVertexAttrib1hvNV;
NN_GLL_API glVertexAttrib2hNVType g_nngllVertexAttrib2hNV;
NN_GLL_API glVertexAttrib2hvNVType g_nngllVertexAttrib2hvNV;
NN_GLL_API glVertexAttrib3hNVType g_nngllVertexAttrib3hNV;
NN_GLL_API glVertexAttrib3hvNVType g_nngllVertexAttrib3hvNV;
NN_GLL_API glVertexAttrib4hNVType g_nngllVertexAttrib4hNV;
NN_GLL_API glVertexAttrib4hvNVType g_nngllVertexAttrib4hvNV;
NN_GLL_API glVertexAttribs1hvNVType g_nngllVertexAttribs1hvNV;
NN_GLL_API glVertexAttribs2hvNVType g_nngllVertexAttribs2hvNV;
NN_GLL_API glVertexAttribs3hvNVType g_nngllVertexAttribs3hvNV;
NN_GLL_API glVertexAttribs4hvNVType g_nngllVertexAttribs4hvNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_half_float();
#endif // GL_NV_half_float

#if !defined(GL_NV_internalformat_sample_query)
#define GL_NV_internalformat_sample_query

#define GL_MULTISAMPLES_NV 0x9371 // NOLINT
#define GL_SUPERSAMPLE_SCALE_X_NV 0x9372 // NOLINT
#define GL_SUPERSAMPLE_SCALE_Y_NV 0x9373 // NOLINT
#define GL_CONFORMANT_NV 0x9374 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGetInternalformatSampleivNVType )( GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params );
#define glGetInternalformatSampleivNV g_nngllGetInternalformatSampleivNV
NN_GLL_API glGetInternalformatSampleivNVType g_nngllGetInternalformatSampleivNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_internalformat_sample_query();
#endif // GL_NV_internalformat_sample_query

#if !defined(GL_NV_light_max_exponent)
#define GL_NV_light_max_exponent

#define GL_MAX_SHININESS_NV 0x8504 // NOLINT
#define GL_MAX_SPOT_EXPONENT_NV 0x8505 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_light_max_exponent();
#endif // GL_NV_light_max_exponent

#if !defined(GL_NV_gpu_multicast)
#define GL_NV_gpu_multicast

#define GL_PER_GPU_STORAGE_BIT_NV 0x0800 // NOLINT
#define GL_MULTICAST_GPUS_NV 0x92BA // NOLINT
#define GL_RENDER_GPU_MASK_NV 0x9558 // NOLINT
#define GL_PER_GPU_STORAGE_NV 0x9548 // NOLINT
#define GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9549 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glRenderGpuMaskNVType )( GLbitfield mask );
typedef void ( NN_GLL_GL_APIENTRY *glMulticastBufferSubDataNVType )( GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data );
typedef void ( NN_GLL_GL_APIENTRY *glMulticastCopyBufferSubDataNVType )( GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size );
typedef void ( NN_GLL_GL_APIENTRY *glMulticastCopyImageSubDataNVType )( GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth );
typedef void ( NN_GLL_GL_APIENTRY *glMulticastBlitFramebufferNVType )( GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter );
typedef void ( NN_GLL_GL_APIENTRY *glMulticastFramebufferSampleLocationsfvNVType )( GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glMulticastBarrierNVType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glMulticastWaitSyncNVType )( GLuint signalGpu, GLbitfield waitGpuMask );
typedef void ( NN_GLL_GL_APIENTRY *glMulticastGetQueryObjectivNVType )( GLuint gpu, GLuint id, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glMulticastGetQueryObjectuivNVType )( GLuint gpu, GLuint id, GLenum pname, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glMulticastGetQueryObjecti64vNVType )( GLuint gpu, GLuint id, GLenum pname, GLint64 *params );
typedef void ( NN_GLL_GL_APIENTRY *glMulticastGetQueryObjectui64vNVType )( GLuint gpu, GLuint id, GLenum pname, GLuint64 *params );
#define glRenderGpuMaskNV g_nngllRenderGpuMaskNV
#define glMulticastBufferSubDataNV g_nngllMulticastBufferSubDataNV
#define glMulticastCopyBufferSubDataNV g_nngllMulticastCopyBufferSubDataNV
#define glMulticastCopyImageSubDataNV g_nngllMulticastCopyImageSubDataNV
#define glMulticastBlitFramebufferNV g_nngllMulticastBlitFramebufferNV
#define glMulticastFramebufferSampleLocationsfvNV g_nngllMulticastFramebufferSampleLocationsfvNV
#define glMulticastBarrierNV g_nngllMulticastBarrierNV
#define glMulticastWaitSyncNV g_nngllMulticastWaitSyncNV
#define glMulticastGetQueryObjectivNV g_nngllMulticastGetQueryObjectivNV
#define glMulticastGetQueryObjectuivNV g_nngllMulticastGetQueryObjectuivNV
#define glMulticastGetQueryObjecti64vNV g_nngllMulticastGetQueryObjecti64vNV
#define glMulticastGetQueryObjectui64vNV g_nngllMulticastGetQueryObjectui64vNV
NN_GLL_API glRenderGpuMaskNVType g_nngllRenderGpuMaskNV;
NN_GLL_API glMulticastBufferSubDataNVType g_nngllMulticastBufferSubDataNV;
NN_GLL_API glMulticastCopyBufferSubDataNVType g_nngllMulticastCopyBufferSubDataNV;
NN_GLL_API glMulticastCopyImageSubDataNVType g_nngllMulticastCopyImageSubDataNV;
NN_GLL_API glMulticastBlitFramebufferNVType g_nngllMulticastBlitFramebufferNV;
NN_GLL_API glMulticastFramebufferSampleLocationsfvNVType g_nngllMulticastFramebufferSampleLocationsfvNV;
NN_GLL_API glMulticastBarrierNVType g_nngllMulticastBarrierNV;
NN_GLL_API glMulticastWaitSyncNVType g_nngllMulticastWaitSyncNV;
NN_GLL_API glMulticastGetQueryObjectivNVType g_nngllMulticastGetQueryObjectivNV;
NN_GLL_API glMulticastGetQueryObjectuivNVType g_nngllMulticastGetQueryObjectuivNV;
NN_GLL_API glMulticastGetQueryObjecti64vNVType g_nngllMulticastGetQueryObjecti64vNV;
NN_GLL_API glMulticastGetQueryObjectui64vNVType g_nngllMulticastGetQueryObjectui64vNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_gpu_multicast();
#endif // GL_NV_gpu_multicast

#if !defined(GL_NV_multisample_coverage)
#define GL_NV_multisample_coverage

NN_GLL_API GLboolean nngllIsSupported_GL_NV_multisample_coverage();
#endif // GL_NV_multisample_coverage

#if !defined(GL_NV_multisample_filter_hint)
#define GL_NV_multisample_filter_hint

#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_multisample_filter_hint();
#endif // GL_NV_multisample_filter_hint

#if !defined(GL_NV_occlusion_query)
#define GL_NV_occlusion_query

#define GL_PIXEL_COUNTER_BITS_NV 0x8864 // NOLINT
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865 // NOLINT
#define GL_PIXEL_COUNT_NV 0x8866 // NOLINT
#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGenOcclusionQueriesNVType )( GLsizei n, GLuint *ids );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteOcclusionQueriesNVType )( GLsizei n, const GLuint *ids );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsOcclusionQueryNVType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glBeginOcclusionQueryNVType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glEndOcclusionQueryNVType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glGetOcclusionQueryivNVType )( GLuint id, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetOcclusionQueryuivNVType )( GLuint id, GLenum pname, GLuint *params );
#define glGenOcclusionQueriesNV g_nngllGenOcclusionQueriesNV
#define glDeleteOcclusionQueriesNV g_nngllDeleteOcclusionQueriesNV
#define glIsOcclusionQueryNV g_nngllIsOcclusionQueryNV
#define glBeginOcclusionQueryNV g_nngllBeginOcclusionQueryNV
#define glEndOcclusionQueryNV g_nngllEndOcclusionQueryNV
#define glGetOcclusionQueryivNV g_nngllGetOcclusionQueryivNV
#define glGetOcclusionQueryuivNV g_nngllGetOcclusionQueryuivNV
NN_GLL_API glGenOcclusionQueriesNVType g_nngllGenOcclusionQueriesNV;
NN_GLL_API glDeleteOcclusionQueriesNVType g_nngllDeleteOcclusionQueriesNV;
NN_GLL_API glIsOcclusionQueryNVType g_nngllIsOcclusionQueryNV;
NN_GLL_API glBeginOcclusionQueryNVType g_nngllBeginOcclusionQueryNV;
NN_GLL_API glEndOcclusionQueryNVType g_nngllEndOcclusionQueryNV;
NN_GLL_API glGetOcclusionQueryivNVType g_nngllGetOcclusionQueryivNV;
NN_GLL_API glGetOcclusionQueryuivNVType g_nngllGetOcclusionQueryuivNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_occlusion_query();
#endif // GL_NV_occlusion_query

#if !defined(GL_NV_packed_depth_stencil)
#define GL_NV_packed_depth_stencil

#define GL_DEPTH_STENCIL_NV 0x84F9 // NOLINT
#define GL_UNSIGNED_INT_24_8_NV 0x84FA // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_packed_depth_stencil();
#endif // GL_NV_packed_depth_stencil

#if !defined(GL_NV_parameter_buffer_object)
#define GL_NV_parameter_buffer_object

#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0 // NOLINT
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1 // NOLINT
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2 // NOLINT
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3 // NOLINT
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glProgramBufferParametersfvNVType )( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramBufferParametersIivNVType )( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glProgramBufferParametersIuivNVType )( GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params );
#define glProgramBufferParametersfvNV g_nngllProgramBufferParametersfvNV
#define glProgramBufferParametersIivNV g_nngllProgramBufferParametersIivNV
#define glProgramBufferParametersIuivNV g_nngllProgramBufferParametersIuivNV
NN_GLL_API glProgramBufferParametersfvNVType g_nngllProgramBufferParametersfvNV;
NN_GLL_API glProgramBufferParametersIivNVType g_nngllProgramBufferParametersIivNV;
NN_GLL_API glProgramBufferParametersIuivNVType g_nngllProgramBufferParametersIuivNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_parameter_buffer_object();
#endif // GL_NV_parameter_buffer_object

#if !defined(GL_NV_parameter_buffer_object2)
#define GL_NV_parameter_buffer_object2

NN_GLL_API GLboolean nngllIsSupported_GL_NV_parameter_buffer_object2();
#endif // GL_NV_parameter_buffer_object2

#if !defined(GL_NV_path_rendering)
#define GL_NV_path_rendering

#define GL_PATH_FORMAT_SVG_NV 0x9070 // NOLINT
#define GL_PATH_FORMAT_PS_NV 0x9071 // NOLINT
#define GL_STANDARD_FONT_NAME_NV 0x9072 // NOLINT
#define GL_SYSTEM_FONT_NAME_NV 0x9073 // NOLINT
#define GL_FILE_NAME_NV 0x9074 // NOLINT
#define GL_PATH_STROKE_WIDTH_NV 0x9075 // NOLINT
#define GL_PATH_END_CAPS_NV 0x9076 // NOLINT
#define GL_PATH_INITIAL_END_CAP_NV 0x9077 // NOLINT
#define GL_PATH_TERMINAL_END_CAP_NV 0x9078 // NOLINT
#define GL_PATH_JOIN_STYLE_NV 0x9079 // NOLINT
#define GL_PATH_MITER_LIMIT_NV 0x907A // NOLINT
#define GL_PATH_DASH_CAPS_NV 0x907B // NOLINT
#define GL_PATH_INITIAL_DASH_CAP_NV 0x907C // NOLINT
#define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D // NOLINT
#define GL_PATH_DASH_OFFSET_NV 0x907E // NOLINT
#define GL_PATH_CLIENT_LENGTH_NV 0x907F // NOLINT
#define GL_PATH_FILL_MODE_NV 0x9080 // NOLINT
#define GL_PATH_FILL_MASK_NV 0x9081 // NOLINT
#define GL_PATH_FILL_COVER_MODE_NV 0x9082 // NOLINT
#define GL_PATH_STROKE_COVER_MODE_NV 0x9083 // NOLINT
#define GL_PATH_STROKE_MASK_NV 0x9084 // NOLINT
#define GL_COUNT_UP_NV 0x9088 // NOLINT
#define GL_COUNT_DOWN_NV 0x9089 // NOLINT
#define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A // NOLINT
#define GL_CONVEX_HULL_NV 0x908B // NOLINT
#define GL_BOUNDING_BOX_NV 0x908D // NOLINT
#define GL_TRANSLATE_X_NV 0x908E // NOLINT
#define GL_TRANSLATE_Y_NV 0x908F // NOLINT
#define GL_TRANSLATE_2D_NV 0x9090 // NOLINT
#define GL_TRANSLATE_3D_NV 0x9091 // NOLINT
#define GL_AFFINE_2D_NV 0x9092 // NOLINT
#define GL_AFFINE_3D_NV 0x9094 // NOLINT
#define GL_TRANSPOSE_AFFINE_2D_NV 0x9096 // NOLINT
#define GL_TRANSPOSE_AFFINE_3D_NV 0x9098 // NOLINT
#define GL_UTF8_NV 0x909A // NOLINT
#define GL_UTF16_NV 0x909B // NOLINT
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C // NOLINT
#define GL_PATH_COMMAND_COUNT_NV 0x909D // NOLINT
#define GL_PATH_COORD_COUNT_NV 0x909E // NOLINT
#define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F // NOLINT
#define GL_PATH_COMPUTED_LENGTH_NV 0x90A0 // NOLINT
#define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1 // NOLINT
#define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2 // NOLINT
#define GL_SQUARE_NV 0x90A3 // NOLINT
#define GL_ROUND_NV 0x90A4 // NOLINT
#define GL_TRIANGULAR_NV 0x90A5 // NOLINT
#define GL_BEVEL_NV 0x90A6 // NOLINT
#define GL_MITER_REVERT_NV 0x90A7 // NOLINT
#define GL_MITER_TRUNCATE_NV 0x90A8 // NOLINT
#define GL_SKIP_MISSING_GLYPH_NV 0x90A9 // NOLINT
#define GL_USE_MISSING_GLYPH_NV 0x90AA // NOLINT
#define GL_PATH_ERROR_POSITION_NV 0x90AB // NOLINT
#define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD // NOLINT
#define GL_ADJACENT_PAIRS_NV 0x90AE // NOLINT
#define GL_FIRST_TO_REST_NV 0x90AF // NOLINT
#define GL_PATH_GEN_MODE_NV 0x90B0 // NOLINT
#define GL_PATH_GEN_COEFF_NV 0x90B1 // NOLINT
#define GL_PATH_GEN_COMPONENTS_NV 0x90B3 // NOLINT
#define GL_PATH_STENCIL_FUNC_NV 0x90B7 // NOLINT
#define GL_PATH_STENCIL_REF_NV 0x90B8 // NOLINT
#define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9 // NOLINT
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD // NOLINT
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE // NOLINT
#define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF // NOLINT
#define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4 // NOLINT
#define GL_MOVE_TO_RESETS_NV 0x90B5 // NOLINT
#define GL_MOVE_TO_CONTINUES_NV 0x90B6 // NOLINT
#define GL_CLOSE_PATH_NV 0x00 // NOLINT
#define GL_MOVE_TO_NV 0x02 // NOLINT
#define GL_RELATIVE_MOVE_TO_NV 0x03 // NOLINT
#define GL_LINE_TO_NV 0x04 // NOLINT
#define GL_RELATIVE_LINE_TO_NV 0x05 // NOLINT
#define GL_HORIZONTAL_LINE_TO_NV 0x06 // NOLINT
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07 // NOLINT
#define GL_VERTICAL_LINE_TO_NV 0x08 // NOLINT
#define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09 // NOLINT
#define GL_QUADRATIC_CURVE_TO_NV 0x0A // NOLINT
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B // NOLINT
#define GL_CUBIC_CURVE_TO_NV 0x0C // NOLINT
#define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D // NOLINT
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E // NOLINT
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F // NOLINT
#define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10 // NOLINT
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11 // NOLINT
#define GL_SMALL_CCW_ARC_TO_NV 0x12 // NOLINT
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13 // NOLINT
#define GL_SMALL_CW_ARC_TO_NV 0x14 // NOLINT
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15 // NOLINT
#define GL_LARGE_CCW_ARC_TO_NV 0x16 // NOLINT
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17 // NOLINT
#define GL_LARGE_CW_ARC_TO_NV 0x18 // NOLINT
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19 // NOLINT
#define GL_RESTART_PATH_NV 0xF0 // NOLINT
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2 // NOLINT
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4 // NOLINT
#define GL_RECT_NV 0xF6 // NOLINT
#define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8 // NOLINT
#define GL_CIRCULAR_CW_ARC_TO_NV 0xFA // NOLINT
#define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC // NOLINT
#define GL_ARC_TO_NV 0xFE // NOLINT
#define GL_RELATIVE_ARC_TO_NV 0xFF // NOLINT
#define GL_BOLD_BIT_NV 0x01 // NOLINT
#define GL_ITALIC_BIT_NV 0x02 // NOLINT
#define GL_GLYPH_WIDTH_BIT_NV 0x01 // NOLINT
#define GL_GLYPH_HEIGHT_BIT_NV 0x02 // NOLINT
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04 // NOLINT
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08 // NOLINT
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10 // NOLINT
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20 // NOLINT
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40 // NOLINT
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80 // NOLINT
#define GL_GLYPH_HAS_KERNING_BIT_NV 0x100 // NOLINT
#define GL_FONT_X_MIN_BOUNDS_BIT_NV 0x00010000 // NOLINT
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0x00020000 // NOLINT
#define GL_FONT_X_MAX_BOUNDS_BIT_NV 0x00040000 // NOLINT
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0x00080000 // NOLINT
#define GL_FONT_UNITS_PER_EM_BIT_NV 0x00100000 // NOLINT
#define GL_FONT_ASCENDER_BIT_NV 0x00200000 // NOLINT
#define GL_FONT_DESCENDER_BIT_NV 0x00400000 // NOLINT
#define GL_FONT_HEIGHT_BIT_NV 0x00800000 // NOLINT
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0x01000000 // NOLINT
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000 // NOLINT
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000 // NOLINT
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000 // NOLINT
#define GL_FONT_HAS_KERNING_BIT_NV 0x10000000 // NOLINT
#define GL_ROUNDED_RECT_NV 0xE8 // NOLINT
#define GL_RELATIVE_ROUNDED_RECT_NV 0xE9 // NOLINT
#define GL_ROUNDED_RECT2_NV 0xEA // NOLINT
#define GL_RELATIVE_ROUNDED_RECT2_NV 0xEB // NOLINT
#define GL_ROUNDED_RECT4_NV 0xEC // NOLINT
#define GL_RELATIVE_ROUNDED_RECT4_NV 0xED // NOLINT
#define GL_ROUNDED_RECT8_NV 0xEE // NOLINT
#define GL_RELATIVE_ROUNDED_RECT8_NV 0xEF // NOLINT
#define GL_RELATIVE_RECT_NV 0xF7 // NOLINT
#define GL_FONT_GLYPHS_AVAILABLE_NV 0x9368 // NOLINT
#define GL_FONT_TARGET_UNAVAILABLE_NV 0x9369 // NOLINT
#define GL_FONT_UNAVAILABLE_NV 0x936A // NOLINT
#define GL_FONT_UNINTELLIGIBLE_NV 0x936B // NOLINT
#define GL_CONIC_CURVE_TO_NV 0x1A // NOLINT
#define GL_RELATIVE_CONIC_CURVE_TO_NV 0x1B // NOLINT
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0x20000000 // NOLINT
#define GL_STANDARD_FONT_FORMAT_NV 0x936C // NOLINT
#define GL_2_BYTES_NV 0x1407 // NOLINT
#define GL_3_BYTES_NV 0x1408 // NOLINT
#define GL_4_BYTES_NV 0x1409 // NOLINT
#define GL_EYE_LINEAR_NV 0x2400 // NOLINT
#define GL_OBJECT_LINEAR_NV 0x2401 // NOLINT
#define GL_CONSTANT_NV 0x8576 // NOLINT
#define GL_PATH_FOG_GEN_MODE_NV 0x90AC // NOLINT
#define GL_PRIMARY_COLOR_NV 0x852C // NOLINT
#define GL_SECONDARY_COLOR_NV 0x852D // NOLINT
#define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2 // NOLINT
#define GL_PATH_PROJECTION_NV 0x1701 // NOLINT
#define GL_PATH_MODELVIEW_NV 0x1700 // NOLINT
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0x0BA3 // NOLINT
#define GL_PATH_MODELVIEW_MATRIX_NV 0x0BA6 // NOLINT
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36 // NOLINT
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3 // NOLINT
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4 // NOLINT
#define GL_PATH_PROJECTION_MATRIX_NV 0x0BA7 // NOLINT
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38 // NOLINT
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4 // NOLINT
#define GL_FRAGMENT_INPUT_NV 0x936D // NOLINT
typedef GLuint ( NN_GLL_GL_APIENTRY *glGenPathsNVType )( GLsizei range );
typedef void ( NN_GLL_GL_APIENTRY *glDeletePathsNVType )( GLuint path, GLsizei range );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsPathNVType )( GLuint path );
typedef void ( NN_GLL_GL_APIENTRY *glPathCommandsNVType )( GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords );
typedef void ( NN_GLL_GL_APIENTRY *glPathCoordsNVType )( GLuint path, GLsizei numCoords, GLenum coordType, const void *coords );
typedef void ( NN_GLL_GL_APIENTRY *glPathSubCommandsNVType )( GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords );
typedef void ( NN_GLL_GL_APIENTRY *glPathSubCoordsNVType )( GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords );
typedef void ( NN_GLL_GL_APIENTRY *glPathStringNVType )( GLuint path, GLenum format, GLsizei length, const void *pathString );
typedef void ( NN_GLL_GL_APIENTRY *glPathGlyphsNVType )( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
typedef void ( NN_GLL_GL_APIENTRY *glPathGlyphRangeNVType )( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
typedef void ( NN_GLL_GL_APIENTRY *glWeightPathsNVType )( GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights );
typedef void ( NN_GLL_GL_APIENTRY *glCopyPathNVType )( GLuint resultPath, GLuint srcPath );
typedef void ( NN_GLL_GL_APIENTRY *glInterpolatePathsNVType )( GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight );
typedef void ( NN_GLL_GL_APIENTRY *glTransformPathNVType )( GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues );
typedef void ( NN_GLL_GL_APIENTRY *glPathParameterivNVType )( GLuint path, GLenum pname, const GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glPathParameteriNVType )( GLuint path, GLenum pname, GLint value );
typedef void ( NN_GLL_GL_APIENTRY *glPathParameterfvNVType )( GLuint path, GLenum pname, const GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glPathParameterfNVType )( GLuint path, GLenum pname, GLfloat value );
typedef void ( NN_GLL_GL_APIENTRY *glPathDashArrayNVType )( GLuint path, GLsizei dashCount, const GLfloat *dashArray );
typedef void ( NN_GLL_GL_APIENTRY *glPathStencilFuncNVType )( GLenum func, GLint ref, GLuint mask );
typedef void ( NN_GLL_GL_APIENTRY *glPathStencilDepthOffsetNVType )( GLfloat factor, GLfloat units );
typedef void ( NN_GLL_GL_APIENTRY *glStencilFillPathNVType )( GLuint path, GLenum fillMode, GLuint mask );
typedef void ( NN_GLL_GL_APIENTRY *glStencilStrokePathNVType )( GLuint path, GLint reference, GLuint mask );
typedef void ( NN_GLL_GL_APIENTRY *glStencilFillPathInstancedNVType )( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues );
typedef void ( NN_GLL_GL_APIENTRY *glStencilStrokePathInstancedNVType )( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues );
typedef void ( NN_GLL_GL_APIENTRY *glPathCoverDepthFuncNVType )( GLenum func );
typedef void ( NN_GLL_GL_APIENTRY *glCoverFillPathNVType )( GLuint path, GLenum coverMode );
typedef void ( NN_GLL_GL_APIENTRY *glCoverStrokePathNVType )( GLuint path, GLenum coverMode );
typedef void ( NN_GLL_GL_APIENTRY *glCoverFillPathInstancedNVType )( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
typedef void ( NN_GLL_GL_APIENTRY *glCoverStrokePathInstancedNVType )( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathParameterivNVType )( GLuint path, GLenum pname, GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathParameterfvNVType )( GLuint path, GLenum pname, GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathCommandsNVType )( GLuint path, GLubyte *commands );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathCoordsNVType )( GLuint path, GLfloat *coords );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathDashArrayNVType )( GLuint path, GLfloat *dashArray );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathMetricsNVType )( GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathMetricRangeNVType )( GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathSpacingNVType )( GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsPointInFillPathNVType )( GLuint path, GLuint mask, GLfloat x, GLfloat y );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsPointInStrokePathNVType )( GLuint path, GLfloat x, GLfloat y );
typedef GLfloat ( NN_GLL_GL_APIENTRY *glGetPathLengthNVType )( GLuint path, GLsizei startSegment, GLsizei numSegments );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glPointAlongPathNVType )( GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixLoad3x2fNVType )( GLenum matrixMode, const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixLoad3x3fNVType )( GLenum matrixMode, const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixLoadTranspose3x3fNVType )( GLenum matrixMode, const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixMult3x2fNVType )( GLenum matrixMode, const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixMult3x3fNVType )( GLenum matrixMode, const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glMatrixMultTranspose3x3fNVType )( GLenum matrixMode, const GLfloat *m );
typedef void ( NN_GLL_GL_APIENTRY *glStencilThenCoverFillPathNVType )( GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode );
typedef void ( NN_GLL_GL_APIENTRY *glStencilThenCoverStrokePathNVType )( GLuint path, GLint reference, GLuint mask, GLenum coverMode );
typedef void ( NN_GLL_GL_APIENTRY *glStencilThenCoverFillPathInstancedNVType )( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
typedef void ( NN_GLL_GL_APIENTRY *glStencilThenCoverStrokePathInstancedNVType )( GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues );
typedef GLenum ( NN_GLL_GL_APIENTRY *glPathGlyphIndexRangeNVType )( GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2] );
typedef GLenum ( NN_GLL_GL_APIENTRY *glPathGlyphIndexArrayNVType )( GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
typedef GLenum ( NN_GLL_GL_APIENTRY *glPathMemoryGlyphIndexArrayNVType )( GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale );
typedef void ( NN_GLL_GL_APIENTRY *glProgramPathFragmentInputGenNVType )( GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramResourcefvNVType )( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glPathColorGenNVType )( GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs );
typedef void ( NN_GLL_GL_APIENTRY *glPathTexGenNVType )( GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs );
typedef void ( NN_GLL_GL_APIENTRY *glPathFogGenNVType )( GLenum genMode );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathColorGenivNVType )( GLenum color, GLenum pname, GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathColorGenfvNVType )( GLenum color, GLenum pname, GLfloat *value );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathTexGenivNVType )( GLenum texCoordSet, GLenum pname, GLint *value );
typedef void ( NN_GLL_GL_APIENTRY *glGetPathTexGenfvNVType )( GLenum texCoordSet, GLenum pname, GLfloat *value );
#define glGenPathsNV g_nngllGenPathsNV
#define glDeletePathsNV g_nngllDeletePathsNV
#define glIsPathNV g_nngllIsPathNV
#define glPathCommandsNV g_nngllPathCommandsNV
#define glPathCoordsNV g_nngllPathCoordsNV
#define glPathSubCommandsNV g_nngllPathSubCommandsNV
#define glPathSubCoordsNV g_nngllPathSubCoordsNV
#define glPathStringNV g_nngllPathStringNV
#define glPathGlyphsNV g_nngllPathGlyphsNV
#define glPathGlyphRangeNV g_nngllPathGlyphRangeNV
#define glWeightPathsNV g_nngllWeightPathsNV
#define glCopyPathNV g_nngllCopyPathNV
#define glInterpolatePathsNV g_nngllInterpolatePathsNV
#define glTransformPathNV g_nngllTransformPathNV
#define glPathParameterivNV g_nngllPathParameterivNV
#define glPathParameteriNV g_nngllPathParameteriNV
#define glPathParameterfvNV g_nngllPathParameterfvNV
#define glPathParameterfNV g_nngllPathParameterfNV
#define glPathDashArrayNV g_nngllPathDashArrayNV
#define glPathStencilFuncNV g_nngllPathStencilFuncNV
#define glPathStencilDepthOffsetNV g_nngllPathStencilDepthOffsetNV
#define glStencilFillPathNV g_nngllStencilFillPathNV
#define glStencilStrokePathNV g_nngllStencilStrokePathNV
#define glStencilFillPathInstancedNV g_nngllStencilFillPathInstancedNV
#define glStencilStrokePathInstancedNV g_nngllStencilStrokePathInstancedNV
#define glPathCoverDepthFuncNV g_nngllPathCoverDepthFuncNV
#define glCoverFillPathNV g_nngllCoverFillPathNV
#define glCoverStrokePathNV g_nngllCoverStrokePathNV
#define glCoverFillPathInstancedNV g_nngllCoverFillPathInstancedNV
#define glCoverStrokePathInstancedNV g_nngllCoverStrokePathInstancedNV
#define glGetPathParameterivNV g_nngllGetPathParameterivNV
#define glGetPathParameterfvNV g_nngllGetPathParameterfvNV
#define glGetPathCommandsNV g_nngllGetPathCommandsNV
#define glGetPathCoordsNV g_nngllGetPathCoordsNV
#define glGetPathDashArrayNV g_nngllGetPathDashArrayNV
#define glGetPathMetricsNV g_nngllGetPathMetricsNV
#define glGetPathMetricRangeNV g_nngllGetPathMetricRangeNV
#define glGetPathSpacingNV g_nngllGetPathSpacingNV
#define glIsPointInFillPathNV g_nngllIsPointInFillPathNV
#define glIsPointInStrokePathNV g_nngllIsPointInStrokePathNV
#define glGetPathLengthNV g_nngllGetPathLengthNV
#define glPointAlongPathNV g_nngllPointAlongPathNV
#define glMatrixLoad3x2fNV g_nngllMatrixLoad3x2fNV
#define glMatrixLoad3x3fNV g_nngllMatrixLoad3x3fNV
#define glMatrixLoadTranspose3x3fNV g_nngllMatrixLoadTranspose3x3fNV
#define glMatrixMult3x2fNV g_nngllMatrixMult3x2fNV
#define glMatrixMult3x3fNV g_nngllMatrixMult3x3fNV
#define glMatrixMultTranspose3x3fNV g_nngllMatrixMultTranspose3x3fNV
#define glStencilThenCoverFillPathNV g_nngllStencilThenCoverFillPathNV
#define glStencilThenCoverStrokePathNV g_nngllStencilThenCoverStrokePathNV
#define glStencilThenCoverFillPathInstancedNV g_nngllStencilThenCoverFillPathInstancedNV
#define glStencilThenCoverStrokePathInstancedNV g_nngllStencilThenCoverStrokePathInstancedNV
#define glPathGlyphIndexRangeNV g_nngllPathGlyphIndexRangeNV
#define glPathGlyphIndexArrayNV g_nngllPathGlyphIndexArrayNV
#define glPathMemoryGlyphIndexArrayNV g_nngllPathMemoryGlyphIndexArrayNV
#define glProgramPathFragmentInputGenNV g_nngllProgramPathFragmentInputGenNV
#define glGetProgramResourcefvNV g_nngllGetProgramResourcefvNV
#define glPathColorGenNV g_nngllPathColorGenNV
#define glPathTexGenNV g_nngllPathTexGenNV
#define glPathFogGenNV g_nngllPathFogGenNV
#define glGetPathColorGenivNV g_nngllGetPathColorGenivNV
#define glGetPathColorGenfvNV g_nngllGetPathColorGenfvNV
#define glGetPathTexGenivNV g_nngllGetPathTexGenivNV
#define glGetPathTexGenfvNV g_nngllGetPathTexGenfvNV
NN_GLL_API glGenPathsNVType g_nngllGenPathsNV;
NN_GLL_API glDeletePathsNVType g_nngllDeletePathsNV;
NN_GLL_API glIsPathNVType g_nngllIsPathNV;
NN_GLL_API glPathCommandsNVType g_nngllPathCommandsNV;
NN_GLL_API glPathCoordsNVType g_nngllPathCoordsNV;
NN_GLL_API glPathSubCommandsNVType g_nngllPathSubCommandsNV;
NN_GLL_API glPathSubCoordsNVType g_nngllPathSubCoordsNV;
NN_GLL_API glPathStringNVType g_nngllPathStringNV;
NN_GLL_API glPathGlyphsNVType g_nngllPathGlyphsNV;
NN_GLL_API glPathGlyphRangeNVType g_nngllPathGlyphRangeNV;
NN_GLL_API glWeightPathsNVType g_nngllWeightPathsNV;
NN_GLL_API glCopyPathNVType g_nngllCopyPathNV;
NN_GLL_API glInterpolatePathsNVType g_nngllInterpolatePathsNV;
NN_GLL_API glTransformPathNVType g_nngllTransformPathNV;
NN_GLL_API glPathParameterivNVType g_nngllPathParameterivNV;
NN_GLL_API glPathParameteriNVType g_nngllPathParameteriNV;
NN_GLL_API glPathParameterfvNVType g_nngllPathParameterfvNV;
NN_GLL_API glPathParameterfNVType g_nngllPathParameterfNV;
NN_GLL_API glPathDashArrayNVType g_nngllPathDashArrayNV;
NN_GLL_API glPathStencilFuncNVType g_nngllPathStencilFuncNV;
NN_GLL_API glPathStencilDepthOffsetNVType g_nngllPathStencilDepthOffsetNV;
NN_GLL_API glStencilFillPathNVType g_nngllStencilFillPathNV;
NN_GLL_API glStencilStrokePathNVType g_nngllStencilStrokePathNV;
NN_GLL_API glStencilFillPathInstancedNVType g_nngllStencilFillPathInstancedNV;
NN_GLL_API glStencilStrokePathInstancedNVType g_nngllStencilStrokePathInstancedNV;
NN_GLL_API glPathCoverDepthFuncNVType g_nngllPathCoverDepthFuncNV;
NN_GLL_API glCoverFillPathNVType g_nngllCoverFillPathNV;
NN_GLL_API glCoverStrokePathNVType g_nngllCoverStrokePathNV;
NN_GLL_API glCoverFillPathInstancedNVType g_nngllCoverFillPathInstancedNV;
NN_GLL_API glCoverStrokePathInstancedNVType g_nngllCoverStrokePathInstancedNV;
NN_GLL_API glGetPathParameterivNVType g_nngllGetPathParameterivNV;
NN_GLL_API glGetPathParameterfvNVType g_nngllGetPathParameterfvNV;
NN_GLL_API glGetPathCommandsNVType g_nngllGetPathCommandsNV;
NN_GLL_API glGetPathCoordsNVType g_nngllGetPathCoordsNV;
NN_GLL_API glGetPathDashArrayNVType g_nngllGetPathDashArrayNV;
NN_GLL_API glGetPathMetricsNVType g_nngllGetPathMetricsNV;
NN_GLL_API glGetPathMetricRangeNVType g_nngllGetPathMetricRangeNV;
NN_GLL_API glGetPathSpacingNVType g_nngllGetPathSpacingNV;
NN_GLL_API glIsPointInFillPathNVType g_nngllIsPointInFillPathNV;
NN_GLL_API glIsPointInStrokePathNVType g_nngllIsPointInStrokePathNV;
NN_GLL_API glGetPathLengthNVType g_nngllGetPathLengthNV;
NN_GLL_API glPointAlongPathNVType g_nngllPointAlongPathNV;
NN_GLL_API glMatrixLoad3x2fNVType g_nngllMatrixLoad3x2fNV;
NN_GLL_API glMatrixLoad3x3fNVType g_nngllMatrixLoad3x3fNV;
NN_GLL_API glMatrixLoadTranspose3x3fNVType g_nngllMatrixLoadTranspose3x3fNV;
NN_GLL_API glMatrixMult3x2fNVType g_nngllMatrixMult3x2fNV;
NN_GLL_API glMatrixMult3x3fNVType g_nngllMatrixMult3x3fNV;
NN_GLL_API glMatrixMultTranspose3x3fNVType g_nngllMatrixMultTranspose3x3fNV;
NN_GLL_API glStencilThenCoverFillPathNVType g_nngllStencilThenCoverFillPathNV;
NN_GLL_API glStencilThenCoverStrokePathNVType g_nngllStencilThenCoverStrokePathNV;
NN_GLL_API glStencilThenCoverFillPathInstancedNVType g_nngllStencilThenCoverFillPathInstancedNV;
NN_GLL_API glStencilThenCoverStrokePathInstancedNVType g_nngllStencilThenCoverStrokePathInstancedNV;
NN_GLL_API glPathGlyphIndexRangeNVType g_nngllPathGlyphIndexRangeNV;
NN_GLL_API glPathGlyphIndexArrayNVType g_nngllPathGlyphIndexArrayNV;
NN_GLL_API glPathMemoryGlyphIndexArrayNVType g_nngllPathMemoryGlyphIndexArrayNV;
NN_GLL_API glProgramPathFragmentInputGenNVType g_nngllProgramPathFragmentInputGenNV;
NN_GLL_API glGetProgramResourcefvNVType g_nngllGetProgramResourcefvNV;
NN_GLL_API glPathColorGenNVType g_nngllPathColorGenNV;
NN_GLL_API glPathTexGenNVType g_nngllPathTexGenNV;
NN_GLL_API glPathFogGenNVType g_nngllPathFogGenNV;
NN_GLL_API glGetPathColorGenivNVType g_nngllGetPathColorGenivNV;
NN_GLL_API glGetPathColorGenfvNVType g_nngllGetPathColorGenfvNV;
NN_GLL_API glGetPathTexGenivNVType g_nngllGetPathTexGenivNV;
NN_GLL_API glGetPathTexGenfvNVType g_nngllGetPathTexGenfvNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_path_rendering();
#endif // GL_NV_path_rendering

#if !defined(GL_NV_path_rendering_shared_edge)
#define GL_NV_path_rendering_shared_edge

#define GL_SHARED_EDGE_NV 0xC0 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_path_rendering_shared_edge();
#endif // GL_NV_path_rendering_shared_edge

#if !defined(GL_NV_pixel_data_range)
#define GL_NV_pixel_data_range

#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878 // NOLINT
#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879 // NOLINT
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A // NOLINT
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B // NOLINT
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C // NOLINT
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPixelDataRangeNVType )( GLenum target, GLsizei length, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glFlushPixelDataRangeNVType )( GLenum target );
#define glPixelDataRangeNV g_nngllPixelDataRangeNV
#define glFlushPixelDataRangeNV g_nngllFlushPixelDataRangeNV
NN_GLL_API glPixelDataRangeNVType g_nngllPixelDataRangeNV;
NN_GLL_API glFlushPixelDataRangeNVType g_nngllFlushPixelDataRangeNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_pixel_data_range();
#endif // GL_NV_pixel_data_range

#if !defined(GL_NV_point_sprite)
#define GL_NV_point_sprite

#define GL_POINT_SPRITE_NV 0x8861 // NOLINT
#define GL_COORD_REPLACE_NV 0x8862 // NOLINT
#define GL_POINT_SPRITE_R_MODE_NV 0x8863 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPointParameteriNVType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterivNVType )( GLenum pname, const GLint *params );
#define glPointParameteriNV g_nngllPointParameteriNV
#define glPointParameterivNV g_nngllPointParameterivNV
NN_GLL_API glPointParameteriNVType g_nngllPointParameteriNV;
NN_GLL_API glPointParameterivNVType g_nngllPointParameterivNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_point_sprite();
#endif // GL_NV_point_sprite

#if !defined(GL_NV_present_video)
#define GL_NV_present_video

#define GL_FRAME_NV 0x8E26 // NOLINT
#define GL_FIELDS_NV 0x8E27 // NOLINT
#define GL_CURRENT_TIME_NV 0x8E28 // NOLINT
#define GL_NUM_FILL_STREAMS_NV 0x8E29 // NOLINT
#define GL_PRESENT_TIME_NV 0x8E2A // NOLINT
#define GL_PRESENT_DURATION_NV 0x8E2B // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPresentFrameKeyedNVType )( GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1 );
typedef void ( NN_GLL_GL_APIENTRY *glPresentFrameDualFillNVType )( GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3 );
typedef void ( NN_GLL_GL_APIENTRY *glGetVideoivNVType )( GLuint video_slot, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVideouivNVType )( GLuint video_slot, GLenum pname, GLuint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVideoi64vNVType )( GLuint video_slot, GLenum pname, GLint64EXT *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVideoui64vNVType )( GLuint video_slot, GLenum pname, GLuint64EXT *params );
#define glPresentFrameKeyedNV g_nngllPresentFrameKeyedNV
#define glPresentFrameDualFillNV g_nngllPresentFrameDualFillNV
#define glGetVideoivNV g_nngllGetVideoivNV
#define glGetVideouivNV g_nngllGetVideouivNV
#define glGetVideoi64vNV g_nngllGetVideoi64vNV
#define glGetVideoui64vNV g_nngllGetVideoui64vNV
NN_GLL_API glPresentFrameKeyedNVType g_nngllPresentFrameKeyedNV;
NN_GLL_API glPresentFrameDualFillNVType g_nngllPresentFrameDualFillNV;
NN_GLL_API glGetVideoivNVType g_nngllGetVideoivNV;
NN_GLL_API glGetVideouivNVType g_nngllGetVideouivNV;
NN_GLL_API glGetVideoi64vNVType g_nngllGetVideoi64vNV;
NN_GLL_API glGetVideoui64vNVType g_nngllGetVideoui64vNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_present_video();
#endif // GL_NV_present_video

#if !defined(GL_NV_primitive_restart)
#define GL_NV_primitive_restart

#define GL_PRIMITIVE_RESTART_NV 0x8558 // NOLINT
#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPrimitiveRestartNVType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glPrimitiveRestartIndexNVType )( GLuint index );
#define glPrimitiveRestartNV g_nngllPrimitiveRestartNV
#define glPrimitiveRestartIndexNV g_nngllPrimitiveRestartIndexNV
NN_GLL_API glPrimitiveRestartNVType g_nngllPrimitiveRestartNV;
NN_GLL_API glPrimitiveRestartIndexNVType g_nngllPrimitiveRestartIndexNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_primitive_restart();
#endif // GL_NV_primitive_restart

#if !defined(GL_NV_query_resource)
#define GL_NV_query_resource

#define GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV 0x9540 // NOLINT
#define GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV 0x9542 // NOLINT
#define GL_QUERY_RESOURCE_SYS_RESERVED_NV 0x9544 // NOLINT
#define GL_QUERY_RESOURCE_TEXTURE_NV 0x9545 // NOLINT
#define GL_QUERY_RESOURCE_RENDERBUFFER_NV 0x9546 // NOLINT
#define GL_QUERY_RESOURCE_BUFFEROBJECT_NV 0x9547 // NOLINT
typedef GLint ( NN_GLL_GL_APIENTRY *glQueryResourceNVType )( GLenum queryType, GLint tagId, GLuint bufSize, GLint *buffer );
#define glQueryResourceNV g_nngllQueryResourceNV
NN_GLL_API glQueryResourceNVType g_nngllQueryResourceNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_query_resource();
#endif // GL_NV_query_resource

#if !defined(GL_NV_query_resource_tag)
#define GL_NV_query_resource_tag

typedef void ( NN_GLL_GL_APIENTRY *glGenQueryResourceTagNVType )( GLsizei n, GLint *tagIds );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteQueryResourceTagNVType )( GLsizei n, const GLint *tagIds );
typedef void ( NN_GLL_GL_APIENTRY *glQueryResourceTagNVType )( GLint tagId, const GLchar *tagString );
#define glGenQueryResourceTagNV g_nngllGenQueryResourceTagNV
#define glDeleteQueryResourceTagNV g_nngllDeleteQueryResourceTagNV
#define glQueryResourceTagNV g_nngllQueryResourceTagNV
NN_GLL_API glGenQueryResourceTagNVType g_nngllGenQueryResourceTagNV;
NN_GLL_API glDeleteQueryResourceTagNVType g_nngllDeleteQueryResourceTagNV;
NN_GLL_API glQueryResourceTagNVType g_nngllQueryResourceTagNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_query_resource_tag();
#endif // GL_NV_query_resource_tag

#if !defined(GL_NV_register_combiners)
#define GL_NV_register_combiners

#define GL_REGISTER_COMBINERS_NV 0x8522 // NOLINT
#define GL_VARIABLE_A_NV 0x8523 // NOLINT
#define GL_VARIABLE_B_NV 0x8524 // NOLINT
#define GL_VARIABLE_C_NV 0x8525 // NOLINT
#define GL_VARIABLE_D_NV 0x8526 // NOLINT
#define GL_VARIABLE_E_NV 0x8527 // NOLINT
#define GL_VARIABLE_F_NV 0x8528 // NOLINT
#define GL_VARIABLE_G_NV 0x8529 // NOLINT
#define GL_CONSTANT_COLOR0_NV 0x852A // NOLINT
#define GL_CONSTANT_COLOR1_NV 0x852B // NOLINT
#define GL_SPARE0_NV 0x852E // NOLINT
#define GL_SPARE1_NV 0x852F // NOLINT
#define GL_DISCARD_NV 0x8530 // NOLINT
#define GL_E_TIMES_F_NV 0x8531 // NOLINT
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532 // NOLINT
#define GL_UNSIGNED_IDENTITY_NV 0x8536 // NOLINT
#define GL_UNSIGNED_INVERT_NV 0x8537 // NOLINT
#define GL_EXPAND_NORMAL_NV 0x8538 // NOLINT
#define GL_EXPAND_NEGATE_NV 0x8539 // NOLINT
#define GL_HALF_BIAS_NORMAL_NV 0x853A // NOLINT
#define GL_HALF_BIAS_NEGATE_NV 0x853B // NOLINT
#define GL_SIGNED_IDENTITY_NV 0x853C // NOLINT
#define GL_SIGNED_NEGATE_NV 0x853D // NOLINT
#define GL_SCALE_BY_TWO_NV 0x853E // NOLINT
#define GL_SCALE_BY_FOUR_NV 0x853F // NOLINT
#define GL_SCALE_BY_ONE_HALF_NV 0x8540 // NOLINT
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541 // NOLINT
#define GL_COMBINER_INPUT_NV 0x8542 // NOLINT
#define GL_COMBINER_MAPPING_NV 0x8543 // NOLINT
#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544 // NOLINT
#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545 // NOLINT
#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546 // NOLINT
#define GL_COMBINER_MUX_SUM_NV 0x8547 // NOLINT
#define GL_COMBINER_SCALE_NV 0x8548 // NOLINT
#define GL_COMBINER_BIAS_NV 0x8549 // NOLINT
#define GL_COMBINER_AB_OUTPUT_NV 0x854A // NOLINT
#define GL_COMBINER_CD_OUTPUT_NV 0x854B // NOLINT
#define GL_COMBINER_SUM_OUTPUT_NV 0x854C // NOLINT
#define GL_MAX_GENERAL_COMBINERS_NV 0x854D // NOLINT
#define GL_NUM_GENERAL_COMBINERS_NV 0x854E // NOLINT
#define GL_COLOR_SUM_CLAMP_NV 0x854F // NOLINT
#define GL_COMBINER0_NV 0x8550 // NOLINT
#define GL_COMBINER1_NV 0x8551 // NOLINT
#define GL_COMBINER2_NV 0x8552 // NOLINT
#define GL_COMBINER3_NV 0x8553 // NOLINT
#define GL_COMBINER4_NV 0x8554 // NOLINT
#define GL_COMBINER5_NV 0x8555 // NOLINT
#define GL_COMBINER6_NV 0x8556 // NOLINT
#define GL_COMBINER7_NV 0x8557 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glCombinerParameterfvNVType )( GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glCombinerParameterfNVType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glCombinerParameterivNVType )( GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glCombinerParameteriNVType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glCombinerInputNVType )( GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );
typedef void ( NN_GLL_GL_APIENTRY *glCombinerOutputNVType )( GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum );
typedef void ( NN_GLL_GL_APIENTRY *glFinalCombinerInputNVType )( GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );
typedef void ( NN_GLL_GL_APIENTRY *glGetCombinerInputParameterfvNVType )( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetCombinerInputParameterivNVType )( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetCombinerOutputParameterfvNVType )( GLenum stage, GLenum portion, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetCombinerOutputParameterivNVType )( GLenum stage, GLenum portion, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetFinalCombinerInputParameterfvNVType )( GLenum variable, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetFinalCombinerInputParameterivNVType )( GLenum variable, GLenum pname, GLint *params );
#define glCombinerParameterfvNV g_nngllCombinerParameterfvNV
#define glCombinerParameterfNV g_nngllCombinerParameterfNV
#define glCombinerParameterivNV g_nngllCombinerParameterivNV
#define glCombinerParameteriNV g_nngllCombinerParameteriNV
#define glCombinerInputNV g_nngllCombinerInputNV
#define glCombinerOutputNV g_nngllCombinerOutputNV
#define glFinalCombinerInputNV g_nngllFinalCombinerInputNV
#define glGetCombinerInputParameterfvNV g_nngllGetCombinerInputParameterfvNV
#define glGetCombinerInputParameterivNV g_nngllGetCombinerInputParameterivNV
#define glGetCombinerOutputParameterfvNV g_nngllGetCombinerOutputParameterfvNV
#define glGetCombinerOutputParameterivNV g_nngllGetCombinerOutputParameterivNV
#define glGetFinalCombinerInputParameterfvNV g_nngllGetFinalCombinerInputParameterfvNV
#define glGetFinalCombinerInputParameterivNV g_nngllGetFinalCombinerInputParameterivNV
NN_GLL_API glCombinerParameterfvNVType g_nngllCombinerParameterfvNV;
NN_GLL_API glCombinerParameterfNVType g_nngllCombinerParameterfNV;
NN_GLL_API glCombinerParameterivNVType g_nngllCombinerParameterivNV;
NN_GLL_API glCombinerParameteriNVType g_nngllCombinerParameteriNV;
NN_GLL_API glCombinerInputNVType g_nngllCombinerInputNV;
NN_GLL_API glCombinerOutputNVType g_nngllCombinerOutputNV;
NN_GLL_API glFinalCombinerInputNVType g_nngllFinalCombinerInputNV;
NN_GLL_API glGetCombinerInputParameterfvNVType g_nngllGetCombinerInputParameterfvNV;
NN_GLL_API glGetCombinerInputParameterivNVType g_nngllGetCombinerInputParameterivNV;
NN_GLL_API glGetCombinerOutputParameterfvNVType g_nngllGetCombinerOutputParameterfvNV;
NN_GLL_API glGetCombinerOutputParameterivNVType g_nngllGetCombinerOutputParameterivNV;
NN_GLL_API glGetFinalCombinerInputParameterfvNVType g_nngllGetFinalCombinerInputParameterfvNV;
NN_GLL_API glGetFinalCombinerInputParameterivNVType g_nngllGetFinalCombinerInputParameterivNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_register_combiners();
#endif // GL_NV_register_combiners

#if !defined(GL_NV_register_combiners2)
#define GL_NV_register_combiners2

#define GL_PER_STAGE_CONSTANTS_NV 0x8535 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glCombinerStageParameterfvNVType )( GLenum stage, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetCombinerStageParameterfvNVType )( GLenum stage, GLenum pname, GLfloat *params );
#define glCombinerStageParameterfvNV g_nngllCombinerStageParameterfvNV
#define glGetCombinerStageParameterfvNV g_nngllGetCombinerStageParameterfvNV
NN_GLL_API glCombinerStageParameterfvNVType g_nngllCombinerStageParameterfvNV;
NN_GLL_API glGetCombinerStageParameterfvNVType g_nngllGetCombinerStageParameterfvNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_register_combiners2();
#endif // GL_NV_register_combiners2

#if !defined(GL_NV_robustness_video_memory_purge)
#define GL_NV_robustness_video_memory_purge

#define GL_PURGED_CONTEXT_RESET_NV 0x92BB // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_robustness_video_memory_purge();
#endif // GL_NV_robustness_video_memory_purge

#if !defined(GL_NV_sample_locations)
#define GL_NV_sample_locations

#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D // NOLINT
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E // NOLINT
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F // NOLINT
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340 // NOLINT
#define GL_SAMPLE_LOCATION_NV 0x8E50 // NOLINT
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341 // NOLINT
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342 // NOLINT
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferSampleLocationsfvNVType )( GLenum target, GLuint start, GLsizei count, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glNamedFramebufferSampleLocationsfvNVType )( GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glResolveDepthValuesNVType )(  );
#define glFramebufferSampleLocationsfvNV g_nngllFramebufferSampleLocationsfvNV
#define glNamedFramebufferSampleLocationsfvNV g_nngllNamedFramebufferSampleLocationsfvNV
#define glResolveDepthValuesNV g_nngllResolveDepthValuesNV
NN_GLL_API glFramebufferSampleLocationsfvNVType g_nngllFramebufferSampleLocationsfvNV;
NN_GLL_API glNamedFramebufferSampleLocationsfvNVType g_nngllNamedFramebufferSampleLocationsfvNV;
NN_GLL_API glResolveDepthValuesNVType g_nngllResolveDepthValuesNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_sample_locations();
#endif // GL_NV_sample_locations

#if !defined(GL_NV_sample_mask_override_coverage)
#define GL_NV_sample_mask_override_coverage

NN_GLL_API GLboolean nngllIsSupported_GL_NV_sample_mask_override_coverage();
#endif // GL_NV_sample_mask_override_coverage

#if !defined(GL_NV_shader_atomic_counters)
#define GL_NV_shader_atomic_counters

NN_GLL_API GLboolean nngllIsSupported_GL_NV_shader_atomic_counters();
#endif // GL_NV_shader_atomic_counters

#if !defined(GL_NV_shader_atomic_float)
#define GL_NV_shader_atomic_float

NN_GLL_API GLboolean nngllIsSupported_GL_NV_shader_atomic_float();
#endif // GL_NV_shader_atomic_float

#if !defined(GL_NV_shader_atomic_float64)
#define GL_NV_shader_atomic_float64

NN_GLL_API GLboolean nngllIsSupported_GL_NV_shader_atomic_float64();
#endif // GL_NV_shader_atomic_float64

#if !defined(GL_NV_shader_atomic_fp16_vector)
#define GL_NV_shader_atomic_fp16_vector

NN_GLL_API GLboolean nngllIsSupported_GL_NV_shader_atomic_fp16_vector();
#endif // GL_NV_shader_atomic_fp16_vector

#if !defined(GL_NV_shader_atomic_int64)
#define GL_NV_shader_atomic_int64

NN_GLL_API GLboolean nngllIsSupported_GL_NV_shader_atomic_int64();
#endif // GL_NV_shader_atomic_int64

#if !defined(GL_NV_shader_buffer_load)
#define GL_NV_shader_buffer_load

#define GL_BUFFER_GPU_ADDRESS_NV 0x8F1D // NOLINT
#define GL_GPU_ADDRESS_NV 0x8F34 // NOLINT
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0x8F35 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glMakeBufferResidentNVType )( GLenum target, GLenum access );
typedef void ( NN_GLL_GL_APIENTRY *glMakeBufferNonResidentNVType )( GLenum target );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsBufferResidentNVType )( GLenum target );
typedef void ( NN_GLL_GL_APIENTRY *glMakeNamedBufferResidentNVType )( GLuint buffer, GLenum access );
typedef void ( NN_GLL_GL_APIENTRY *glMakeNamedBufferNonResidentNVType )( GLuint buffer );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsNamedBufferResidentNVType )( GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glGetBufferParameterui64vNVType )( GLenum target, GLenum pname, GLuint64EXT *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetNamedBufferParameterui64vNVType )( GLuint buffer, GLenum pname, GLuint64EXT *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetIntegerui64vNVType )( GLenum value, GLuint64EXT *result );
typedef void ( NN_GLL_GL_APIENTRY *glUniformui64NVType )( GLint location, GLuint64EXT value );
typedef void ( NN_GLL_GL_APIENTRY *glUniformui64vNVType )( GLint location, GLsizei count, const GLuint64EXT *value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformui64NVType )( GLuint program, GLint location, GLuint64EXT value );
typedef void ( NN_GLL_GL_APIENTRY *glProgramUniformui64vNVType )( GLuint program, GLint location, GLsizei count, const GLuint64EXT *value );
#define glMakeBufferResidentNV g_nngllMakeBufferResidentNV
#define glMakeBufferNonResidentNV g_nngllMakeBufferNonResidentNV
#define glIsBufferResidentNV g_nngllIsBufferResidentNV
#define glMakeNamedBufferResidentNV g_nngllMakeNamedBufferResidentNV
#define glMakeNamedBufferNonResidentNV g_nngllMakeNamedBufferNonResidentNV
#define glIsNamedBufferResidentNV g_nngllIsNamedBufferResidentNV
#define glGetBufferParameterui64vNV g_nngllGetBufferParameterui64vNV
#define glGetNamedBufferParameterui64vNV g_nngllGetNamedBufferParameterui64vNV
#define glGetIntegerui64vNV g_nngllGetIntegerui64vNV
#define glUniformui64NV g_nngllUniformui64NV
#define glUniformui64vNV g_nngllUniformui64vNV
#define glProgramUniformui64NV g_nngllProgramUniformui64NV
#define glProgramUniformui64vNV g_nngllProgramUniformui64vNV
NN_GLL_API glMakeBufferResidentNVType g_nngllMakeBufferResidentNV;
NN_GLL_API glMakeBufferNonResidentNVType g_nngllMakeBufferNonResidentNV;
NN_GLL_API glIsBufferResidentNVType g_nngllIsBufferResidentNV;
NN_GLL_API glMakeNamedBufferResidentNVType g_nngllMakeNamedBufferResidentNV;
NN_GLL_API glMakeNamedBufferNonResidentNVType g_nngllMakeNamedBufferNonResidentNV;
NN_GLL_API glIsNamedBufferResidentNVType g_nngllIsNamedBufferResidentNV;
NN_GLL_API glGetBufferParameterui64vNVType g_nngllGetBufferParameterui64vNV;
NN_GLL_API glGetNamedBufferParameterui64vNVType g_nngllGetNamedBufferParameterui64vNV;
NN_GLL_API glGetIntegerui64vNVType g_nngllGetIntegerui64vNV;
NN_GLL_API glUniformui64NVType g_nngllUniformui64NV;
NN_GLL_API glUniformui64vNVType g_nngllUniformui64vNV;
NN_GLL_API glProgramUniformui64NVType g_nngllProgramUniformui64NV;
NN_GLL_API glProgramUniformui64vNVType g_nngllProgramUniformui64vNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_shader_buffer_load();
#endif // GL_NV_shader_buffer_load

#if !defined(GL_NV_shader_buffer_store)
#define GL_NV_shader_buffer_store

#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_shader_buffer_store();
#endif // GL_NV_shader_buffer_store

#if !defined(GL_NV_shader_storage_buffer_object)
#define GL_NV_shader_storage_buffer_object

NN_GLL_API GLboolean nngllIsSupported_GL_NV_shader_storage_buffer_object();
#endif // GL_NV_shader_storage_buffer_object

#if !defined(GL_NV_shader_thread_group)
#define GL_NV_shader_thread_group

#define GL_WARP_SIZE_NV 0x9339 // NOLINT
#define GL_WARPS_PER_SM_NV 0x933A // NOLINT
#define GL_SM_COUNT_NV 0x933B // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_shader_thread_group();
#endif // GL_NV_shader_thread_group

#if !defined(GL_NV_shader_thread_shuffle)
#define GL_NV_shader_thread_shuffle

NN_GLL_API GLboolean nngllIsSupported_GL_NV_shader_thread_shuffle();
#endif // GL_NV_shader_thread_shuffle

#if !defined(GL_NV_stereo_view_rendering)
#define GL_NV_stereo_view_rendering

NN_GLL_API GLboolean nngllIsSupported_GL_NV_stereo_view_rendering();
#endif // GL_NV_stereo_view_rendering

#if !defined(GL_NV_tessellation_program5)
#define GL_NV_tessellation_program5

#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0x86D8 // NOLINT
#define GL_TESS_CONTROL_PROGRAM_NV 0x891E // NOLINT
#define GL_TESS_EVALUATION_PROGRAM_NV 0x891F // NOLINT
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74 // NOLINT
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_tessellation_program5();
#endif // GL_NV_tessellation_program5

#if !defined(GL_NV_texgen_emboss)
#define GL_NV_texgen_emboss

#define GL_EMBOSS_LIGHT_NV 0x855D // NOLINT
#define GL_EMBOSS_CONSTANT_NV 0x855E // NOLINT
#define GL_EMBOSS_MAP_NV 0x855F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_texgen_emboss();
#endif // GL_NV_texgen_emboss

#if !defined(GL_NV_texgen_reflection)
#define GL_NV_texgen_reflection

#define GL_NORMAL_MAP_NV 0x8511 // NOLINT
#define GL_REFLECTION_MAP_NV 0x8512 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_texgen_reflection();
#endif // GL_NV_texgen_reflection

#if !defined(GL_NV_texture_barrier)
#define GL_NV_texture_barrier

typedef void ( NN_GLL_GL_APIENTRY *glTextureBarrierNVType )(  );
#define glTextureBarrierNV g_nngllTextureBarrierNV
NN_GLL_API glTextureBarrierNVType g_nngllTextureBarrierNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_texture_barrier();
#endif // GL_NV_texture_barrier

#if !defined(GL_NV_texture_compression_vtc)
#define GL_NV_texture_compression_vtc

NN_GLL_API GLboolean nngllIsSupported_GL_NV_texture_compression_vtc();
#endif // GL_NV_texture_compression_vtc

#if !defined(GL_NV_texture_env_combine4)
#define GL_NV_texture_env_combine4

#define GL_COMBINE4_NV 0x8503 // NOLINT
#define GL_SOURCE3_RGB_NV 0x8583 // NOLINT
#define GL_SOURCE3_ALPHA_NV 0x858B // NOLINT
#define GL_OPERAND3_RGB_NV 0x8593 // NOLINT
#define GL_OPERAND3_ALPHA_NV 0x859B // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_texture_env_combine4();
#endif // GL_NV_texture_env_combine4

#if !defined(GL_NV_texture_expand_normal)
#define GL_NV_texture_expand_normal

#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_texture_expand_normal();
#endif // GL_NV_texture_expand_normal

#if !defined(GL_NV_texture_multisample)
#define GL_NV_texture_multisample

#define GL_TEXTURE_COVERAGE_SAMPLES_NV 0x9045 // NOLINT
#define GL_TEXTURE_COLOR_SAMPLES_NV 0x9046 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTexImage2DMultisampleCoverageNVType )( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
typedef void ( NN_GLL_GL_APIENTRY *glTexImage3DMultisampleCoverageNVType )( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
typedef void ( NN_GLL_GL_APIENTRY *glTextureImage2DMultisampleNVType )( GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
typedef void ( NN_GLL_GL_APIENTRY *glTextureImage3DMultisampleNVType )( GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
typedef void ( NN_GLL_GL_APIENTRY *glTextureImage2DMultisampleCoverageNVType )( GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations );
typedef void ( NN_GLL_GL_APIENTRY *glTextureImage3DMultisampleCoverageNVType )( GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations );
#define glTexImage2DMultisampleCoverageNV g_nngllTexImage2DMultisampleCoverageNV
#define glTexImage3DMultisampleCoverageNV g_nngllTexImage3DMultisampleCoverageNV
#define glTextureImage2DMultisampleNV g_nngllTextureImage2DMultisampleNV
#define glTextureImage3DMultisampleNV g_nngllTextureImage3DMultisampleNV
#define glTextureImage2DMultisampleCoverageNV g_nngllTextureImage2DMultisampleCoverageNV
#define glTextureImage3DMultisampleCoverageNV g_nngllTextureImage3DMultisampleCoverageNV
NN_GLL_API glTexImage2DMultisampleCoverageNVType g_nngllTexImage2DMultisampleCoverageNV;
NN_GLL_API glTexImage3DMultisampleCoverageNVType g_nngllTexImage3DMultisampleCoverageNV;
NN_GLL_API glTextureImage2DMultisampleNVType g_nngllTextureImage2DMultisampleNV;
NN_GLL_API glTextureImage3DMultisampleNVType g_nngllTextureImage3DMultisampleNV;
NN_GLL_API glTextureImage2DMultisampleCoverageNVType g_nngllTextureImage2DMultisampleCoverageNV;
NN_GLL_API glTextureImage3DMultisampleCoverageNVType g_nngllTextureImage3DMultisampleCoverageNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_texture_multisample();
#endif // GL_NV_texture_multisample

#if !defined(GL_NV_texture_rectangle)
#define GL_NV_texture_rectangle

#define GL_TEXTURE_RECTANGLE_NV 0x84F5 // NOLINT
#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6 // NOLINT
#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7 // NOLINT
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_texture_rectangle();
#endif // GL_NV_texture_rectangle

#if !defined(GL_NV_texture_rectangle_compressed)
#define GL_NV_texture_rectangle_compressed

NN_GLL_API GLboolean nngllIsSupported_GL_NV_texture_rectangle_compressed();
#endif // GL_NV_texture_rectangle_compressed

#if !defined(GL_NV_texture_shader)
#define GL_NV_texture_shader

#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C // NOLINT
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D // NOLINT
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E // NOLINT
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9 // NOLINT
#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA // NOLINT
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB // NOLINT
#define GL_DSDT_MAG_INTENSITY_NV 0x86DC // NOLINT
#define GL_SHADER_CONSISTENT_NV 0x86DD // NOLINT
#define GL_TEXTURE_SHADER_NV 0x86DE // NOLINT
#define GL_SHADER_OPERATION_NV 0x86DF // NOLINT
#define GL_CULL_MODES_NV 0x86E0 // NOLINT
#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1 // NOLINT
#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2 // NOLINT
#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3 // NOLINT
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0x86E1 // NOLINT
#define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2 // NOLINT
#define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3 // NOLINT
#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4 // NOLINT
#define GL_CONST_EYE_NV 0x86E5 // NOLINT
#define GL_PASS_THROUGH_NV 0x86E6 // NOLINT
#define GL_CULL_FRAGMENT_NV 0x86E7 // NOLINT
#define GL_OFFSET_TEXTURE_2D_NV 0x86E8 // NOLINT
#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9 // NOLINT
#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA // NOLINT
#define GL_DOT_PRODUCT_NV 0x86EC // NOLINT
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED // NOLINT
#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE // NOLINT
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0 // NOLINT
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1 // NOLINT
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2 // NOLINT
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3 // NOLINT
#define GL_HILO_NV 0x86F4 // NOLINT
#define GL_DSDT_NV 0x86F5 // NOLINT
#define GL_DSDT_MAG_NV 0x86F6 // NOLINT
#define GL_DSDT_MAG_VIB_NV 0x86F7 // NOLINT
#define GL_HILO16_NV 0x86F8 // NOLINT
#define GL_SIGNED_HILO_NV 0x86F9 // NOLINT
#define GL_SIGNED_HILO16_NV 0x86FA // NOLINT
#define GL_SIGNED_RGBA_NV 0x86FB // NOLINT
#define GL_SIGNED_RGBA8_NV 0x86FC // NOLINT
#define GL_SIGNED_RGB_NV 0x86FE // NOLINT
#define GL_SIGNED_RGB8_NV 0x86FF // NOLINT
#define GL_SIGNED_LUMINANCE_NV 0x8701 // NOLINT
#define GL_SIGNED_LUMINANCE8_NV 0x8702 // NOLINT
#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703 // NOLINT
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704 // NOLINT
#define GL_SIGNED_ALPHA_NV 0x8705 // NOLINT
#define GL_SIGNED_ALPHA8_NV 0x8706 // NOLINT
#define GL_SIGNED_INTENSITY_NV 0x8707 // NOLINT
#define GL_SIGNED_INTENSITY8_NV 0x8708 // NOLINT
#define GL_DSDT8_NV 0x8709 // NOLINT
#define GL_DSDT8_MAG8_NV 0x870A // NOLINT
#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B // NOLINT
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C // NOLINT
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D // NOLINT
#define GL_HI_SCALE_NV 0x870E // NOLINT
#define GL_LO_SCALE_NV 0x870F // NOLINT
#define GL_DS_SCALE_NV 0x8710 // NOLINT
#define GL_DT_SCALE_NV 0x8711 // NOLINT
#define GL_MAGNITUDE_SCALE_NV 0x8712 // NOLINT
#define GL_VIBRANCE_SCALE_NV 0x8713 // NOLINT
#define GL_HI_BIAS_NV 0x8714 // NOLINT
#define GL_LO_BIAS_NV 0x8715 // NOLINT
#define GL_DS_BIAS_NV 0x8716 // NOLINT
#define GL_DT_BIAS_NV 0x8717 // NOLINT
#define GL_MAGNITUDE_BIAS_NV 0x8718 // NOLINT
#define GL_VIBRANCE_BIAS_NV 0x8719 // NOLINT
#define GL_TEXTURE_BORDER_VALUES_NV 0x871A // NOLINT
#define GL_TEXTURE_HI_SIZE_NV 0x871B // NOLINT
#define GL_TEXTURE_LO_SIZE_NV 0x871C // NOLINT
#define GL_TEXTURE_DS_SIZE_NV 0x871D // NOLINT
#define GL_TEXTURE_DT_SIZE_NV 0x871E // NOLINT
#define GL_TEXTURE_MAG_SIZE_NV 0x871F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_texture_shader();
#endif // GL_NV_texture_shader

#if !defined(GL_NV_texture_shader2)
#define GL_NV_texture_shader2

#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_texture_shader2();
#endif // GL_NV_texture_shader2

#if !defined(GL_NV_texture_shader3)
#define GL_NV_texture_shader3

#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850 // NOLINT
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851 // NOLINT
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852 // NOLINT
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853 // NOLINT
#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854 // NOLINT
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855 // NOLINT
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856 // NOLINT
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857 // NOLINT
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858 // NOLINT
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859 // NOLINT
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A // NOLINT
#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B // NOLINT
#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C // NOLINT
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D // NOLINT
#define GL_HILO8_NV 0x885E // NOLINT
#define GL_SIGNED_HILO8_NV 0x885F // NOLINT
#define GL_FORCE_BLUE_TO_ONE_NV 0x8860 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_texture_shader3();
#endif // GL_NV_texture_shader3

#if !defined(GL_NV_transform_feedback)
#define GL_NV_transform_feedback

#define GL_BACK_PRIMARY_COLOR_NV 0x8C77 // NOLINT
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78 // NOLINT
#define GL_TEXTURE_COORD_NV 0x8C79 // NOLINT
#define GL_CLIP_DISTANCE_NV 0x8C7A // NOLINT
#define GL_VERTEX_ID_NV 0x8C7B // NOLINT
#define GL_PRIMITIVE_ID_NV 0x8C7C // NOLINT
#define GL_GENERIC_ATTRIB_NV 0x8C7D // NOLINT
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F // NOLINT
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80 // NOLINT
#define GL_ACTIVE_VARYINGS_NV 0x8C81 // NOLINT
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82 // NOLINT
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85 // NOLINT
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86 // NOLINT
#define GL_PRIMITIVES_GENERATED_NV 0x8C87 // NOLINT
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88 // NOLINT
#define GL_RASTERIZER_DISCARD_NV 0x8C89 // NOLINT
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A // NOLINT
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B // NOLINT
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C // NOLINT
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F // NOLINT
#define GL_LAYER_NV 0x8DAA // NOLINT
#define GL_NEXT_BUFFER_NV -2 // NOLINT
#define GL_SKIP_COMPONENTS4_NV -3 // NOLINT
#define GL_SKIP_COMPONENTS3_NV -4 // NOLINT
#define GL_SKIP_COMPONENTS2_NV -5 // NOLINT
#define GL_SKIP_COMPONENTS1_NV -6 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBeginTransformFeedbackNVType )( GLenum primitiveMode );
typedef void ( NN_GLL_GL_APIENTRY *glEndTransformFeedbackNVType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glTransformFeedbackAttribsNVType )( GLsizei count, const GLint *attribs, GLenum bufferMode );
typedef void ( NN_GLL_GL_APIENTRY *glBindBufferRangeNVType )( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size );
typedef void ( NN_GLL_GL_APIENTRY *glBindBufferOffsetNVType )( GLenum target, GLuint index, GLuint buffer, GLintptr offset );
typedef void ( NN_GLL_GL_APIENTRY *glBindBufferBaseNVType )( GLenum target, GLuint index, GLuint buffer );
typedef void ( NN_GLL_GL_APIENTRY *glTransformFeedbackVaryingsNVType )( GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode );
typedef void ( NN_GLL_GL_APIENTRY *glActiveVaryingNVType )( GLuint program, const GLchar *name );
typedef GLint ( NN_GLL_GL_APIENTRY *glGetVaryingLocationNVType )( GLuint program, const GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetActiveVaryingNVType )( GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name );
typedef void ( NN_GLL_GL_APIENTRY *glGetTransformFeedbackVaryingNVType )( GLuint program, GLuint index, GLint *location );
typedef void ( NN_GLL_GL_APIENTRY *glTransformFeedbackStreamAttribsNVType )( GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode );
#define glBeginTransformFeedbackNV g_nngllBeginTransformFeedbackNV
#define glEndTransformFeedbackNV g_nngllEndTransformFeedbackNV
#define glTransformFeedbackAttribsNV g_nngllTransformFeedbackAttribsNV
#define glBindBufferRangeNV g_nngllBindBufferRangeNV
#define glBindBufferOffsetNV g_nngllBindBufferOffsetNV
#define glBindBufferBaseNV g_nngllBindBufferBaseNV
#define glTransformFeedbackVaryingsNV g_nngllTransformFeedbackVaryingsNV
#define glActiveVaryingNV g_nngllActiveVaryingNV
#define glGetVaryingLocationNV g_nngllGetVaryingLocationNV
#define glGetActiveVaryingNV g_nngllGetActiveVaryingNV
#define glGetTransformFeedbackVaryingNV g_nngllGetTransformFeedbackVaryingNV
#define glTransformFeedbackStreamAttribsNV g_nngllTransformFeedbackStreamAttribsNV
NN_GLL_API glBeginTransformFeedbackNVType g_nngllBeginTransformFeedbackNV;
NN_GLL_API glEndTransformFeedbackNVType g_nngllEndTransformFeedbackNV;
NN_GLL_API glTransformFeedbackAttribsNVType g_nngllTransformFeedbackAttribsNV;
NN_GLL_API glBindBufferRangeNVType g_nngllBindBufferRangeNV;
NN_GLL_API glBindBufferOffsetNVType g_nngllBindBufferOffsetNV;
NN_GLL_API glBindBufferBaseNVType g_nngllBindBufferBaseNV;
NN_GLL_API glTransformFeedbackVaryingsNVType g_nngllTransformFeedbackVaryingsNV;
NN_GLL_API glActiveVaryingNVType g_nngllActiveVaryingNV;
NN_GLL_API glGetVaryingLocationNVType g_nngllGetVaryingLocationNV;
NN_GLL_API glGetActiveVaryingNVType g_nngllGetActiveVaryingNV;
NN_GLL_API glGetTransformFeedbackVaryingNVType g_nngllGetTransformFeedbackVaryingNV;
NN_GLL_API glTransformFeedbackStreamAttribsNVType g_nngllTransformFeedbackStreamAttribsNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_transform_feedback();
#endif // GL_NV_transform_feedback

#if !defined(GL_NV_transform_feedback2)
#define GL_NV_transform_feedback2

#define GL_TRANSFORM_FEEDBACK_NV 0x8E22 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24 // NOLINT
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBindTransformFeedbackNVType )( GLenum target, GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteTransformFeedbacksNVType )( GLsizei n, const GLuint *ids );
typedef void ( NN_GLL_GL_APIENTRY *glGenTransformFeedbacksNVType )( GLsizei n, GLuint *ids );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsTransformFeedbackNVType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glPauseTransformFeedbackNVType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glResumeTransformFeedbackNVType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glDrawTransformFeedbackNVType )( GLenum mode, GLuint id );
#define glBindTransformFeedbackNV g_nngllBindTransformFeedbackNV
#define glDeleteTransformFeedbacksNV g_nngllDeleteTransformFeedbacksNV
#define glGenTransformFeedbacksNV g_nngllGenTransformFeedbacksNV
#define glIsTransformFeedbackNV g_nngllIsTransformFeedbackNV
#define glPauseTransformFeedbackNV g_nngllPauseTransformFeedbackNV
#define glResumeTransformFeedbackNV g_nngllResumeTransformFeedbackNV
#define glDrawTransformFeedbackNV g_nngllDrawTransformFeedbackNV
NN_GLL_API glBindTransformFeedbackNVType g_nngllBindTransformFeedbackNV;
NN_GLL_API glDeleteTransformFeedbacksNVType g_nngllDeleteTransformFeedbacksNV;
NN_GLL_API glGenTransformFeedbacksNVType g_nngllGenTransformFeedbacksNV;
NN_GLL_API glIsTransformFeedbackNVType g_nngllIsTransformFeedbackNV;
NN_GLL_API glPauseTransformFeedbackNVType g_nngllPauseTransformFeedbackNV;
NN_GLL_API glResumeTransformFeedbackNVType g_nngllResumeTransformFeedbackNV;
NN_GLL_API glDrawTransformFeedbackNVType g_nngllDrawTransformFeedbackNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_transform_feedback2();
#endif // GL_NV_transform_feedback2

#if !defined(GL_NV_uniform_buffer_unified_memory)
#define GL_NV_uniform_buffer_unified_memory

#define GL_UNIFORM_BUFFER_UNIFIED_NV 0x936E // NOLINT
#define GL_UNIFORM_BUFFER_ADDRESS_NV 0x936F // NOLINT
#define GL_UNIFORM_BUFFER_LENGTH_NV 0x9370 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_uniform_buffer_unified_memory();
#endif // GL_NV_uniform_buffer_unified_memory

#if !defined(GL_NV_vdpau_interop)
#define GL_NV_vdpau_interop

typedef GLintptr GLvdpauSurfaceNV;
#define GL_SURFACE_STATE_NV 0x86EB // NOLINT
#define GL_SURFACE_REGISTERED_NV 0x86FD // NOLINT
#define GL_SURFACE_MAPPED_NV 0x8700 // NOLINT
#define GL_WRITE_DISCARD_NV 0x88BE // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glVDPAUInitNVType )( const void *vdpDevice, const void *getProcAddress );
typedef void ( NN_GLL_GL_APIENTRY *glVDPAUFiniNVType )(  );
typedef GLvdpauSurfaceNV ( NN_GLL_GL_APIENTRY *glVDPAURegisterVideoSurfaceNVType )( const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames );
typedef GLvdpauSurfaceNV ( NN_GLL_GL_APIENTRY *glVDPAURegisterOutputSurfaceNVType )( const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glVDPAUIsSurfaceNVType )( GLvdpauSurfaceNV surface );
typedef void ( NN_GLL_GL_APIENTRY *glVDPAUUnregisterSurfaceNVType )( GLvdpauSurfaceNV surface );
typedef void ( NN_GLL_GL_APIENTRY *glVDPAUGetSurfaceivNVType )( GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values );
typedef void ( NN_GLL_GL_APIENTRY *glVDPAUSurfaceAccessNVType )( GLvdpauSurfaceNV surface, GLenum access );
typedef void ( NN_GLL_GL_APIENTRY *glVDPAUMapSurfacesNVType )( GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces );
typedef void ( NN_GLL_GL_APIENTRY *glVDPAUUnmapSurfacesNVType )( GLsizei numSurface, const GLvdpauSurfaceNV *surfaces );
#define glVDPAUInitNV g_nngllVDPAUInitNV
#define glVDPAUFiniNV g_nngllVDPAUFiniNV
#define glVDPAURegisterVideoSurfaceNV g_nngllVDPAURegisterVideoSurfaceNV
#define glVDPAURegisterOutputSurfaceNV g_nngllVDPAURegisterOutputSurfaceNV
#define glVDPAUIsSurfaceNV g_nngllVDPAUIsSurfaceNV
#define glVDPAUUnregisterSurfaceNV g_nngllVDPAUUnregisterSurfaceNV
#define glVDPAUGetSurfaceivNV g_nngllVDPAUGetSurfaceivNV
#define glVDPAUSurfaceAccessNV g_nngllVDPAUSurfaceAccessNV
#define glVDPAUMapSurfacesNV g_nngllVDPAUMapSurfacesNV
#define glVDPAUUnmapSurfacesNV g_nngllVDPAUUnmapSurfacesNV
NN_GLL_API glVDPAUInitNVType g_nngllVDPAUInitNV;
NN_GLL_API glVDPAUFiniNVType g_nngllVDPAUFiniNV;
NN_GLL_API glVDPAURegisterVideoSurfaceNVType g_nngllVDPAURegisterVideoSurfaceNV;
NN_GLL_API glVDPAURegisterOutputSurfaceNVType g_nngllVDPAURegisterOutputSurfaceNV;
NN_GLL_API glVDPAUIsSurfaceNVType g_nngllVDPAUIsSurfaceNV;
NN_GLL_API glVDPAUUnregisterSurfaceNVType g_nngllVDPAUUnregisterSurfaceNV;
NN_GLL_API glVDPAUGetSurfaceivNVType g_nngllVDPAUGetSurfaceivNV;
NN_GLL_API glVDPAUSurfaceAccessNVType g_nngllVDPAUSurfaceAccessNV;
NN_GLL_API glVDPAUMapSurfacesNVType g_nngllVDPAUMapSurfacesNV;
NN_GLL_API glVDPAUUnmapSurfacesNVType g_nngllVDPAUUnmapSurfacesNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_vdpau_interop();
#endif // GL_NV_vdpau_interop

#if !defined(GL_NV_vertex_array_range)
#define GL_NV_vertex_array_range

#define GL_VERTEX_ARRAY_RANGE_NV 0x851D // NOLINT
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E // NOLINT
#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F // NOLINT
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520 // NOLINT
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFlushVertexArrayRangeNVType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glVertexArrayRangeNVType )( GLsizei length, const void *pointer );
#define glFlushVertexArrayRangeNV g_nngllFlushVertexArrayRangeNV
#define glVertexArrayRangeNV g_nngllVertexArrayRangeNV
NN_GLL_API glFlushVertexArrayRangeNVType g_nngllFlushVertexArrayRangeNV;
NN_GLL_API glVertexArrayRangeNVType g_nngllVertexArrayRangeNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_vertex_array_range();
#endif // GL_NV_vertex_array_range

#if !defined(GL_NV_vertex_array_range2)
#define GL_NV_vertex_array_range2

#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_NV_vertex_array_range2();
#endif // GL_NV_vertex_array_range2

#if !defined(GL_NV_vertex_attrib_integer_64bit)
#define GL_NV_vertex_attrib_integer_64bit

typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL1i64NVType )( GLuint index, GLint64EXT x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL2i64NVType )( GLuint index, GLint64EXT x, GLint64EXT y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL3i64NVType )( GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL4i64NVType )( GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL1i64vNVType )( GLuint index, const GLint64EXT *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL2i64vNVType )( GLuint index, const GLint64EXT *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL3i64vNVType )( GLuint index, const GLint64EXT *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL4i64vNVType )( GLuint index, const GLint64EXT *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL1ui64NVType )( GLuint index, GLuint64EXT x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL2ui64NVType )( GLuint index, GLuint64EXT x, GLuint64EXT y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL3ui64NVType )( GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL4ui64NVType )( GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL1ui64vNVType )( GLuint index, const GLuint64EXT *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL2ui64vNVType )( GLuint index, const GLuint64EXT *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL3ui64vNVType )( GLuint index, const GLuint64EXT *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribL4ui64vNVType )( GLuint index, const GLuint64EXT *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribLi64vNVType )( GLuint index, GLenum pname, GLint64EXT *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribLui64vNVType )( GLuint index, GLenum pname, GLuint64EXT *params );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribLFormatNVType )( GLuint index, GLint size, GLenum type, GLsizei stride );
#define glVertexAttribL1i64NV g_nngllVertexAttribL1i64NV
#define glVertexAttribL2i64NV g_nngllVertexAttribL2i64NV
#define glVertexAttribL3i64NV g_nngllVertexAttribL3i64NV
#define glVertexAttribL4i64NV g_nngllVertexAttribL4i64NV
#define glVertexAttribL1i64vNV g_nngllVertexAttribL1i64vNV
#define glVertexAttribL2i64vNV g_nngllVertexAttribL2i64vNV
#define glVertexAttribL3i64vNV g_nngllVertexAttribL3i64vNV
#define glVertexAttribL4i64vNV g_nngllVertexAttribL4i64vNV
#define glVertexAttribL1ui64NV g_nngllVertexAttribL1ui64NV
#define glVertexAttribL2ui64NV g_nngllVertexAttribL2ui64NV
#define glVertexAttribL3ui64NV g_nngllVertexAttribL3ui64NV
#define glVertexAttribL4ui64NV g_nngllVertexAttribL4ui64NV
#define glVertexAttribL1ui64vNV g_nngllVertexAttribL1ui64vNV
#define glVertexAttribL2ui64vNV g_nngllVertexAttribL2ui64vNV
#define glVertexAttribL3ui64vNV g_nngllVertexAttribL3ui64vNV
#define glVertexAttribL4ui64vNV g_nngllVertexAttribL4ui64vNV
#define glGetVertexAttribLi64vNV g_nngllGetVertexAttribLi64vNV
#define glGetVertexAttribLui64vNV g_nngllGetVertexAttribLui64vNV
#define glVertexAttribLFormatNV g_nngllVertexAttribLFormatNV
NN_GLL_API glVertexAttribL1i64NVType g_nngllVertexAttribL1i64NV;
NN_GLL_API glVertexAttribL2i64NVType g_nngllVertexAttribL2i64NV;
NN_GLL_API glVertexAttribL3i64NVType g_nngllVertexAttribL3i64NV;
NN_GLL_API glVertexAttribL4i64NVType g_nngllVertexAttribL4i64NV;
NN_GLL_API glVertexAttribL1i64vNVType g_nngllVertexAttribL1i64vNV;
NN_GLL_API glVertexAttribL2i64vNVType g_nngllVertexAttribL2i64vNV;
NN_GLL_API glVertexAttribL3i64vNVType g_nngllVertexAttribL3i64vNV;
NN_GLL_API glVertexAttribL4i64vNVType g_nngllVertexAttribL4i64vNV;
NN_GLL_API glVertexAttribL1ui64NVType g_nngllVertexAttribL1ui64NV;
NN_GLL_API glVertexAttribL2ui64NVType g_nngllVertexAttribL2ui64NV;
NN_GLL_API glVertexAttribL3ui64NVType g_nngllVertexAttribL3ui64NV;
NN_GLL_API glVertexAttribL4ui64NVType g_nngllVertexAttribL4ui64NV;
NN_GLL_API glVertexAttribL1ui64vNVType g_nngllVertexAttribL1ui64vNV;
NN_GLL_API glVertexAttribL2ui64vNVType g_nngllVertexAttribL2ui64vNV;
NN_GLL_API glVertexAttribL3ui64vNVType g_nngllVertexAttribL3ui64vNV;
NN_GLL_API glVertexAttribL4ui64vNVType g_nngllVertexAttribL4ui64vNV;
NN_GLL_API glGetVertexAttribLi64vNVType g_nngllGetVertexAttribLi64vNV;
NN_GLL_API glGetVertexAttribLui64vNVType g_nngllGetVertexAttribLui64vNV;
NN_GLL_API glVertexAttribLFormatNVType g_nngllVertexAttribLFormatNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_vertex_attrib_integer_64bit();
#endif // GL_NV_vertex_attrib_integer_64bit

#if !defined(GL_NV_vertex_buffer_unified_memory)
#define GL_NV_vertex_buffer_unified_memory

#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E // NOLINT
#define GL_ELEMENT_ARRAY_UNIFIED_NV 0x8F1F // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20 // NOLINT
#define GL_VERTEX_ARRAY_ADDRESS_NV 0x8F21 // NOLINT
#define GL_NORMAL_ARRAY_ADDRESS_NV 0x8F22 // NOLINT
#define GL_COLOR_ARRAY_ADDRESS_NV 0x8F23 // NOLINT
#define GL_INDEX_ARRAY_ADDRESS_NV 0x8F24 // NOLINT
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25 // NOLINT
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0x8F26 // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27 // NOLINT
#define GL_FOG_COORD_ARRAY_ADDRESS_NV 0x8F28 // NOLINT
#define GL_ELEMENT_ARRAY_ADDRESS_NV 0x8F29 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0x8F2A // NOLINT
#define GL_VERTEX_ARRAY_LENGTH_NV 0x8F2B // NOLINT
#define GL_NORMAL_ARRAY_LENGTH_NV 0x8F2C // NOLINT
#define GL_COLOR_ARRAY_LENGTH_NV 0x8F2D // NOLINT
#define GL_INDEX_ARRAY_LENGTH_NV 0x8F2E // NOLINT
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0x8F2F // NOLINT
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0x8F30 // NOLINT
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31 // NOLINT
#define GL_FOG_COORD_ARRAY_LENGTH_NV 0x8F32 // NOLINT
#define GL_ELEMENT_ARRAY_LENGTH_NV 0x8F33 // NOLINT
#define GL_DRAW_INDIRECT_UNIFIED_NV 0x8F40 // NOLINT
#define GL_DRAW_INDIRECT_ADDRESS_NV 0x8F41 // NOLINT
#define GL_DRAW_INDIRECT_LENGTH_NV 0x8F42 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBufferAddressRangeNVType )( GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length );
typedef void ( NN_GLL_GL_APIENTRY *glVertexFormatNVType )( GLint size, GLenum type, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glNormalFormatNVType )( GLenum type, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glColorFormatNVType )( GLint size, GLenum type, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glIndexFormatNVType )( GLenum type, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoordFormatNVType )( GLint size, GLenum type, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glEdgeFlagFormatNVType )( GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glSecondaryColorFormatNVType )( GLint size, GLenum type, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glFogCoordFormatNVType )( GLenum type, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribFormatNVType )( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribIFormatNVType )( GLuint index, GLint size, GLenum type, GLsizei stride );
typedef void ( NN_GLL_GL_APIENTRY *glGetIntegerui64i_vNVType )( GLenum value, GLuint index, GLuint64EXT *result );
#define glBufferAddressRangeNV g_nngllBufferAddressRangeNV
#define glVertexFormatNV g_nngllVertexFormatNV
#define glNormalFormatNV g_nngllNormalFormatNV
#define glColorFormatNV g_nngllColorFormatNV
#define glIndexFormatNV g_nngllIndexFormatNV
#define glTexCoordFormatNV g_nngllTexCoordFormatNV
#define glEdgeFlagFormatNV g_nngllEdgeFlagFormatNV
#define glSecondaryColorFormatNV g_nngllSecondaryColorFormatNV
#define glFogCoordFormatNV g_nngllFogCoordFormatNV
#define glVertexAttribFormatNV g_nngllVertexAttribFormatNV
#define glVertexAttribIFormatNV g_nngllVertexAttribIFormatNV
#define glGetIntegerui64i_vNV g_nngllGetIntegerui64i_vNV
NN_GLL_API glBufferAddressRangeNVType g_nngllBufferAddressRangeNV;
NN_GLL_API glVertexFormatNVType g_nngllVertexFormatNV;
NN_GLL_API glNormalFormatNVType g_nngllNormalFormatNV;
NN_GLL_API glColorFormatNVType g_nngllColorFormatNV;
NN_GLL_API glIndexFormatNVType g_nngllIndexFormatNV;
NN_GLL_API glTexCoordFormatNVType g_nngllTexCoordFormatNV;
NN_GLL_API glEdgeFlagFormatNVType g_nngllEdgeFlagFormatNV;
NN_GLL_API glSecondaryColorFormatNVType g_nngllSecondaryColorFormatNV;
NN_GLL_API glFogCoordFormatNVType g_nngllFogCoordFormatNV;
NN_GLL_API glVertexAttribFormatNVType g_nngllVertexAttribFormatNV;
NN_GLL_API glVertexAttribIFormatNVType g_nngllVertexAttribIFormatNV;
NN_GLL_API glGetIntegerui64i_vNVType g_nngllGetIntegerui64i_vNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_vertex_buffer_unified_memory();
#endif // GL_NV_vertex_buffer_unified_memory

#if !defined(GL_NV_vertex_program)
#define GL_NV_vertex_program

#define GL_VERTEX_PROGRAM_NV 0x8620 // NOLINT
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621 // NOLINT
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623 // NOLINT
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624 // NOLINT
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625 // NOLINT
#define GL_CURRENT_ATTRIB_NV 0x8626 // NOLINT
#define GL_PROGRAM_LENGTH_NV 0x8627 // NOLINT
#define GL_PROGRAM_STRING_NV 0x8628 // NOLINT
#define GL_MODELVIEW_PROJECTION_NV 0x8629 // NOLINT
#define GL_IDENTITY_NV 0x862A // NOLINT
#define GL_INVERSE_NV 0x862B // NOLINT
#define GL_TRANSPOSE_NV 0x862C // NOLINT
#define GL_INVERSE_TRANSPOSE_NV 0x862D // NOLINT
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E // NOLINT
#define GL_MAX_TRACK_MATRICES_NV 0x862F // NOLINT
#define GL_MATRIX0_NV 0x8630 // NOLINT
#define GL_MATRIX1_NV 0x8631 // NOLINT
#define GL_MATRIX2_NV 0x8632 // NOLINT
#define GL_MATRIX3_NV 0x8633 // NOLINT
#define GL_MATRIX4_NV 0x8634 // NOLINT
#define GL_MATRIX5_NV 0x8635 // NOLINT
#define GL_MATRIX6_NV 0x8636 // NOLINT
#define GL_MATRIX7_NV 0x8637 // NOLINT
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640 // NOLINT
#define GL_CURRENT_MATRIX_NV 0x8641 // NOLINT
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642 // NOLINT
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643 // NOLINT
#define GL_PROGRAM_PARAMETER_NV 0x8644 // NOLINT
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645 // NOLINT
#define GL_PROGRAM_TARGET_NV 0x8646 // NOLINT
#define GL_PROGRAM_RESIDENT_NV 0x8647 // NOLINT
#define GL_TRACK_MATRIX_NV 0x8648 // NOLINT
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649 // NOLINT
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A // NOLINT
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659 // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E // NOLINT
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F // NOLINT
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660 // NOLINT
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661 // NOLINT
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662 // NOLINT
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663 // NOLINT
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664 // NOLINT
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665 // NOLINT
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666 // NOLINT
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667 // NOLINT
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668 // NOLINT
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669 // NOLINT
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A // NOLINT
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B // NOLINT
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C // NOLINT
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D // NOLINT
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E // NOLINT
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F // NOLINT
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670 // NOLINT
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671 // NOLINT
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672 // NOLINT
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673 // NOLINT
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674 // NOLINT
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675 // NOLINT
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676 // NOLINT
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677 // NOLINT
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678 // NOLINT
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679 // NOLINT
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A // NOLINT
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B // NOLINT
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C // NOLINT
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D // NOLINT
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E // NOLINT
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F // NOLINT
typedef GLboolean ( NN_GLL_GL_APIENTRY *glAreProgramsResidentNVType )( GLsizei n, const GLuint *programs, GLboolean *residences );
typedef void ( NN_GLL_GL_APIENTRY *glBindProgramNVType )( GLenum target, GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteProgramsNVType )( GLsizei n, const GLuint *programs );
typedef void ( NN_GLL_GL_APIENTRY *glExecuteProgramNVType )( GLenum target, GLuint id, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGenProgramsNVType )( GLsizei n, GLuint *programs );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramParameterdvNVType )( GLenum target, GLuint index, GLenum pname, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramParameterfvNVType )( GLenum target, GLuint index, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramivNVType )( GLuint id, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetProgramStringNVType )( GLuint id, GLenum pname, GLubyte *program );
typedef void ( NN_GLL_GL_APIENTRY *glGetTrackMatrixivNVType )( GLenum target, GLuint address, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribdvNVType )( GLuint index, GLenum pname, GLdouble *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribfvNVType )( GLuint index, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribivNVType )( GLuint index, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribPointervNVType )( GLuint index, GLenum pname, void **pointer );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsProgramNVType )( GLuint id );
typedef void ( NN_GLL_GL_APIENTRY *glLoadProgramNVType )( GLenum target, GLuint id, GLsizei len, const GLubyte *program );
typedef void ( NN_GLL_GL_APIENTRY *glProgramParameter4dNVType )( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramParameter4dvNVType )( GLenum target, GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glProgramParameter4fNVType )( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glProgramParameter4fvNVType )( GLenum target, GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glProgramParameters4dvNVType )( GLenum target, GLuint index, GLsizei count, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glProgramParameters4fvNVType )( GLenum target, GLuint index, GLsizei count, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glRequestResidentProgramsNVType )( GLsizei n, const GLuint *programs );
typedef void ( NN_GLL_GL_APIENTRY *glTrackMatrixNVType )( GLenum target, GLuint address, GLenum matrix, GLenum transform );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribPointerNVType )( GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1dNVType )( GLuint index, GLdouble x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1dvNVType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1fNVType )( GLuint index, GLfloat x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1fvNVType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1sNVType )( GLuint index, GLshort x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib1svNVType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2dNVType )( GLuint index, GLdouble x, GLdouble y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2dvNVType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2fNVType )( GLuint index, GLfloat x, GLfloat y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2fvNVType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2sNVType )( GLuint index, GLshort x, GLshort y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib2svNVType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3dNVType )( GLuint index, GLdouble x, GLdouble y, GLdouble z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3dvNVType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3fNVType )( GLuint index, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3fvNVType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3sNVType )( GLuint index, GLshort x, GLshort y, GLshort z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib3svNVType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4dNVType )( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4dvNVType )( GLuint index, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4fNVType )( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4fvNVType )( GLuint index, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4sNVType )( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4svNVType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4ubNVType )( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttrib4ubvNVType )( GLuint index, const GLubyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs1dvNVType )( GLuint index, GLsizei count, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs1fvNVType )( GLuint index, GLsizei count, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs1svNVType )( GLuint index, GLsizei count, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs2dvNVType )( GLuint index, GLsizei count, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs2fvNVType )( GLuint index, GLsizei count, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs2svNVType )( GLuint index, GLsizei count, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs3dvNVType )( GLuint index, GLsizei count, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs3fvNVType )( GLuint index, GLsizei count, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs3svNVType )( GLuint index, GLsizei count, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs4dvNVType )( GLuint index, GLsizei count, const GLdouble *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs4fvNVType )( GLuint index, GLsizei count, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs4svNVType )( GLuint index, GLsizei count, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribs4ubvNVType )( GLuint index, GLsizei count, const GLubyte *v );
#define glAreProgramsResidentNV g_nngllAreProgramsResidentNV
#define glBindProgramNV g_nngllBindProgramNV
#define glDeleteProgramsNV g_nngllDeleteProgramsNV
#define glExecuteProgramNV g_nngllExecuteProgramNV
#define glGenProgramsNV g_nngllGenProgramsNV
#define glGetProgramParameterdvNV g_nngllGetProgramParameterdvNV
#define glGetProgramParameterfvNV g_nngllGetProgramParameterfvNV
#define glGetProgramivNV g_nngllGetProgramivNV
#define glGetProgramStringNV g_nngllGetProgramStringNV
#define glGetTrackMatrixivNV g_nngllGetTrackMatrixivNV
#define glGetVertexAttribdvNV g_nngllGetVertexAttribdvNV
#define glGetVertexAttribfvNV g_nngllGetVertexAttribfvNV
#define glGetVertexAttribivNV g_nngllGetVertexAttribivNV
#define glGetVertexAttribPointervNV g_nngllGetVertexAttribPointervNV
#define glIsProgramNV g_nngllIsProgramNV
#define glLoadProgramNV g_nngllLoadProgramNV
#define glProgramParameter4dNV g_nngllProgramParameter4dNV
#define glProgramParameter4dvNV g_nngllProgramParameter4dvNV
#define glProgramParameter4fNV g_nngllProgramParameter4fNV
#define glProgramParameter4fvNV g_nngllProgramParameter4fvNV
#define glProgramParameters4dvNV g_nngllProgramParameters4dvNV
#define glProgramParameters4fvNV g_nngllProgramParameters4fvNV
#define glRequestResidentProgramsNV g_nngllRequestResidentProgramsNV
#define glTrackMatrixNV g_nngllTrackMatrixNV
#define glVertexAttribPointerNV g_nngllVertexAttribPointerNV
#define glVertexAttrib1dNV g_nngllVertexAttrib1dNV
#define glVertexAttrib1dvNV g_nngllVertexAttrib1dvNV
#define glVertexAttrib1fNV g_nngllVertexAttrib1fNV
#define glVertexAttrib1fvNV g_nngllVertexAttrib1fvNV
#define glVertexAttrib1sNV g_nngllVertexAttrib1sNV
#define glVertexAttrib1svNV g_nngllVertexAttrib1svNV
#define glVertexAttrib2dNV g_nngllVertexAttrib2dNV
#define glVertexAttrib2dvNV g_nngllVertexAttrib2dvNV
#define glVertexAttrib2fNV g_nngllVertexAttrib2fNV
#define glVertexAttrib2fvNV g_nngllVertexAttrib2fvNV
#define glVertexAttrib2sNV g_nngllVertexAttrib2sNV
#define glVertexAttrib2svNV g_nngllVertexAttrib2svNV
#define glVertexAttrib3dNV g_nngllVertexAttrib3dNV
#define glVertexAttrib3dvNV g_nngllVertexAttrib3dvNV
#define glVertexAttrib3fNV g_nngllVertexAttrib3fNV
#define glVertexAttrib3fvNV g_nngllVertexAttrib3fvNV
#define glVertexAttrib3sNV g_nngllVertexAttrib3sNV
#define glVertexAttrib3svNV g_nngllVertexAttrib3svNV
#define glVertexAttrib4dNV g_nngllVertexAttrib4dNV
#define glVertexAttrib4dvNV g_nngllVertexAttrib4dvNV
#define glVertexAttrib4fNV g_nngllVertexAttrib4fNV
#define glVertexAttrib4fvNV g_nngllVertexAttrib4fvNV
#define glVertexAttrib4sNV g_nngllVertexAttrib4sNV
#define glVertexAttrib4svNV g_nngllVertexAttrib4svNV
#define glVertexAttrib4ubNV g_nngllVertexAttrib4ubNV
#define glVertexAttrib4ubvNV g_nngllVertexAttrib4ubvNV
#define glVertexAttribs1dvNV g_nngllVertexAttribs1dvNV
#define glVertexAttribs1fvNV g_nngllVertexAttribs1fvNV
#define glVertexAttribs1svNV g_nngllVertexAttribs1svNV
#define glVertexAttribs2dvNV g_nngllVertexAttribs2dvNV
#define glVertexAttribs2fvNV g_nngllVertexAttribs2fvNV
#define glVertexAttribs2svNV g_nngllVertexAttribs2svNV
#define glVertexAttribs3dvNV g_nngllVertexAttribs3dvNV
#define glVertexAttribs3fvNV g_nngllVertexAttribs3fvNV
#define glVertexAttribs3svNV g_nngllVertexAttribs3svNV
#define glVertexAttribs4dvNV g_nngllVertexAttribs4dvNV
#define glVertexAttribs4fvNV g_nngllVertexAttribs4fvNV
#define glVertexAttribs4svNV g_nngllVertexAttribs4svNV
#define glVertexAttribs4ubvNV g_nngllVertexAttribs4ubvNV
NN_GLL_API glAreProgramsResidentNVType g_nngllAreProgramsResidentNV;
NN_GLL_API glBindProgramNVType g_nngllBindProgramNV;
NN_GLL_API glDeleteProgramsNVType g_nngllDeleteProgramsNV;
NN_GLL_API glExecuteProgramNVType g_nngllExecuteProgramNV;
NN_GLL_API glGenProgramsNVType g_nngllGenProgramsNV;
NN_GLL_API glGetProgramParameterdvNVType g_nngllGetProgramParameterdvNV;
NN_GLL_API glGetProgramParameterfvNVType g_nngllGetProgramParameterfvNV;
NN_GLL_API glGetProgramivNVType g_nngllGetProgramivNV;
NN_GLL_API glGetProgramStringNVType g_nngllGetProgramStringNV;
NN_GLL_API glGetTrackMatrixivNVType g_nngllGetTrackMatrixivNV;
NN_GLL_API glGetVertexAttribdvNVType g_nngllGetVertexAttribdvNV;
NN_GLL_API glGetVertexAttribfvNVType g_nngllGetVertexAttribfvNV;
NN_GLL_API glGetVertexAttribivNVType g_nngllGetVertexAttribivNV;
NN_GLL_API glGetVertexAttribPointervNVType g_nngllGetVertexAttribPointervNV;
NN_GLL_API glIsProgramNVType g_nngllIsProgramNV;
NN_GLL_API glLoadProgramNVType g_nngllLoadProgramNV;
NN_GLL_API glProgramParameter4dNVType g_nngllProgramParameter4dNV;
NN_GLL_API glProgramParameter4dvNVType g_nngllProgramParameter4dvNV;
NN_GLL_API glProgramParameter4fNVType g_nngllProgramParameter4fNV;
NN_GLL_API glProgramParameter4fvNVType g_nngllProgramParameter4fvNV;
NN_GLL_API glProgramParameters4dvNVType g_nngllProgramParameters4dvNV;
NN_GLL_API glProgramParameters4fvNVType g_nngllProgramParameters4fvNV;
NN_GLL_API glRequestResidentProgramsNVType g_nngllRequestResidentProgramsNV;
NN_GLL_API glTrackMatrixNVType g_nngllTrackMatrixNV;
NN_GLL_API glVertexAttribPointerNVType g_nngllVertexAttribPointerNV;
NN_GLL_API glVertexAttrib1dNVType g_nngllVertexAttrib1dNV;
NN_GLL_API glVertexAttrib1dvNVType g_nngllVertexAttrib1dvNV;
NN_GLL_API glVertexAttrib1fNVType g_nngllVertexAttrib1fNV;
NN_GLL_API glVertexAttrib1fvNVType g_nngllVertexAttrib1fvNV;
NN_GLL_API glVertexAttrib1sNVType g_nngllVertexAttrib1sNV;
NN_GLL_API glVertexAttrib1svNVType g_nngllVertexAttrib1svNV;
NN_GLL_API glVertexAttrib2dNVType g_nngllVertexAttrib2dNV;
NN_GLL_API glVertexAttrib2dvNVType g_nngllVertexAttrib2dvNV;
NN_GLL_API glVertexAttrib2fNVType g_nngllVertexAttrib2fNV;
NN_GLL_API glVertexAttrib2fvNVType g_nngllVertexAttrib2fvNV;
NN_GLL_API glVertexAttrib2sNVType g_nngllVertexAttrib2sNV;
NN_GLL_API glVertexAttrib2svNVType g_nngllVertexAttrib2svNV;
NN_GLL_API glVertexAttrib3dNVType g_nngllVertexAttrib3dNV;
NN_GLL_API glVertexAttrib3dvNVType g_nngllVertexAttrib3dvNV;
NN_GLL_API glVertexAttrib3fNVType g_nngllVertexAttrib3fNV;
NN_GLL_API glVertexAttrib3fvNVType g_nngllVertexAttrib3fvNV;
NN_GLL_API glVertexAttrib3sNVType g_nngllVertexAttrib3sNV;
NN_GLL_API glVertexAttrib3svNVType g_nngllVertexAttrib3svNV;
NN_GLL_API glVertexAttrib4dNVType g_nngllVertexAttrib4dNV;
NN_GLL_API glVertexAttrib4dvNVType g_nngllVertexAttrib4dvNV;
NN_GLL_API glVertexAttrib4fNVType g_nngllVertexAttrib4fNV;
NN_GLL_API glVertexAttrib4fvNVType g_nngllVertexAttrib4fvNV;
NN_GLL_API glVertexAttrib4sNVType g_nngllVertexAttrib4sNV;
NN_GLL_API glVertexAttrib4svNVType g_nngllVertexAttrib4svNV;
NN_GLL_API glVertexAttrib4ubNVType g_nngllVertexAttrib4ubNV;
NN_GLL_API glVertexAttrib4ubvNVType g_nngllVertexAttrib4ubvNV;
NN_GLL_API glVertexAttribs1dvNVType g_nngllVertexAttribs1dvNV;
NN_GLL_API glVertexAttribs1fvNVType g_nngllVertexAttribs1fvNV;
NN_GLL_API glVertexAttribs1svNVType g_nngllVertexAttribs1svNV;
NN_GLL_API glVertexAttribs2dvNVType g_nngllVertexAttribs2dvNV;
NN_GLL_API glVertexAttribs2fvNVType g_nngllVertexAttribs2fvNV;
NN_GLL_API glVertexAttribs2svNVType g_nngllVertexAttribs2svNV;
NN_GLL_API glVertexAttribs3dvNVType g_nngllVertexAttribs3dvNV;
NN_GLL_API glVertexAttribs3fvNVType g_nngllVertexAttribs3fvNV;
NN_GLL_API glVertexAttribs3svNVType g_nngllVertexAttribs3svNV;
NN_GLL_API glVertexAttribs4dvNVType g_nngllVertexAttribs4dvNV;
NN_GLL_API glVertexAttribs4fvNVType g_nngllVertexAttribs4fvNV;
NN_GLL_API glVertexAttribs4svNVType g_nngllVertexAttribs4svNV;
NN_GLL_API glVertexAttribs4ubvNVType g_nngllVertexAttribs4ubvNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_vertex_program();
#endif // GL_NV_vertex_program

#if !defined(GL_NV_vertex_program1_1)
#define GL_NV_vertex_program1_1

NN_GLL_API GLboolean nngllIsSupported_GL_NV_vertex_program1_1();
#endif // GL_NV_vertex_program1_1

#if !defined(GL_NV_vertex_program2)
#define GL_NV_vertex_program2

NN_GLL_API GLboolean nngllIsSupported_GL_NV_vertex_program2();
#endif // GL_NV_vertex_program2

#if !defined(GL_NV_vertex_program2_option)
#define GL_NV_vertex_program2_option

NN_GLL_API GLboolean nngllIsSupported_GL_NV_vertex_program2_option();
#endif // GL_NV_vertex_program2_option

#if !defined(GL_NV_vertex_program3)
#define GL_NV_vertex_program3

NN_GLL_API GLboolean nngllIsSupported_GL_NV_vertex_program3();
#endif // GL_NV_vertex_program3

#if !defined(GL_NV_vertex_program4)
#define GL_NV_vertex_program4

#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI1iEXTType )( GLuint index, GLint x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI2iEXTType )( GLuint index, GLint x, GLint y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI3iEXTType )( GLuint index, GLint x, GLint y, GLint z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4iEXTType )( GLuint index, GLint x, GLint y, GLint z, GLint w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI1uiEXTType )( GLuint index, GLuint x );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI2uiEXTType )( GLuint index, GLuint x, GLuint y );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI3uiEXTType )( GLuint index, GLuint x, GLuint y, GLuint z );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4uiEXTType )( GLuint index, GLuint x, GLuint y, GLuint z, GLuint w );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI1ivEXTType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI2ivEXTType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI3ivEXTType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4ivEXTType )( GLuint index, const GLint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI1uivEXTType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI2uivEXTType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI3uivEXTType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4uivEXTType )( GLuint index, const GLuint *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4bvEXTType )( GLuint index, const GLbyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4svEXTType )( GLuint index, const GLshort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4ubvEXTType )( GLuint index, const GLubyte *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribI4usvEXTType )( GLuint index, const GLushort *v );
typedef void ( NN_GLL_GL_APIENTRY *glVertexAttribIPointerEXTType )( GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribIivEXTType )( GLuint index, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVertexAttribIuivEXTType )( GLuint index, GLenum pname, GLuint *params );
#define glVertexAttribI1iEXT g_nngllVertexAttribI1iEXT
#define glVertexAttribI2iEXT g_nngllVertexAttribI2iEXT
#define glVertexAttribI3iEXT g_nngllVertexAttribI3iEXT
#define glVertexAttribI4iEXT g_nngllVertexAttribI4iEXT
#define glVertexAttribI1uiEXT g_nngllVertexAttribI1uiEXT
#define glVertexAttribI2uiEXT g_nngllVertexAttribI2uiEXT
#define glVertexAttribI3uiEXT g_nngllVertexAttribI3uiEXT
#define glVertexAttribI4uiEXT g_nngllVertexAttribI4uiEXT
#define glVertexAttribI1ivEXT g_nngllVertexAttribI1ivEXT
#define glVertexAttribI2ivEXT g_nngllVertexAttribI2ivEXT
#define glVertexAttribI3ivEXT g_nngllVertexAttribI3ivEXT
#define glVertexAttribI4ivEXT g_nngllVertexAttribI4ivEXT
#define glVertexAttribI1uivEXT g_nngllVertexAttribI1uivEXT
#define glVertexAttribI2uivEXT g_nngllVertexAttribI2uivEXT
#define glVertexAttribI3uivEXT g_nngllVertexAttribI3uivEXT
#define glVertexAttribI4uivEXT g_nngllVertexAttribI4uivEXT
#define glVertexAttribI4bvEXT g_nngllVertexAttribI4bvEXT
#define glVertexAttribI4svEXT g_nngllVertexAttribI4svEXT
#define glVertexAttribI4ubvEXT g_nngllVertexAttribI4ubvEXT
#define glVertexAttribI4usvEXT g_nngllVertexAttribI4usvEXT
#define glVertexAttribIPointerEXT g_nngllVertexAttribIPointerEXT
#define glGetVertexAttribIivEXT g_nngllGetVertexAttribIivEXT
#define glGetVertexAttribIuivEXT g_nngllGetVertexAttribIuivEXT
NN_GLL_API glVertexAttribI1iEXTType g_nngllVertexAttribI1iEXT;
NN_GLL_API glVertexAttribI2iEXTType g_nngllVertexAttribI2iEXT;
NN_GLL_API glVertexAttribI3iEXTType g_nngllVertexAttribI3iEXT;
NN_GLL_API glVertexAttribI4iEXTType g_nngllVertexAttribI4iEXT;
NN_GLL_API glVertexAttribI1uiEXTType g_nngllVertexAttribI1uiEXT;
NN_GLL_API glVertexAttribI2uiEXTType g_nngllVertexAttribI2uiEXT;
NN_GLL_API glVertexAttribI3uiEXTType g_nngllVertexAttribI3uiEXT;
NN_GLL_API glVertexAttribI4uiEXTType g_nngllVertexAttribI4uiEXT;
NN_GLL_API glVertexAttribI1ivEXTType g_nngllVertexAttribI1ivEXT;
NN_GLL_API glVertexAttribI2ivEXTType g_nngllVertexAttribI2ivEXT;
NN_GLL_API glVertexAttribI3ivEXTType g_nngllVertexAttribI3ivEXT;
NN_GLL_API glVertexAttribI4ivEXTType g_nngllVertexAttribI4ivEXT;
NN_GLL_API glVertexAttribI1uivEXTType g_nngllVertexAttribI1uivEXT;
NN_GLL_API glVertexAttribI2uivEXTType g_nngllVertexAttribI2uivEXT;
NN_GLL_API glVertexAttribI3uivEXTType g_nngllVertexAttribI3uivEXT;
NN_GLL_API glVertexAttribI4uivEXTType g_nngllVertexAttribI4uivEXT;
NN_GLL_API glVertexAttribI4bvEXTType g_nngllVertexAttribI4bvEXT;
NN_GLL_API glVertexAttribI4svEXTType g_nngllVertexAttribI4svEXT;
NN_GLL_API glVertexAttribI4ubvEXTType g_nngllVertexAttribI4ubvEXT;
NN_GLL_API glVertexAttribI4usvEXTType g_nngllVertexAttribI4usvEXT;
NN_GLL_API glVertexAttribIPointerEXTType g_nngllVertexAttribIPointerEXT;
NN_GLL_API glGetVertexAttribIivEXTType g_nngllGetVertexAttribIivEXT;
NN_GLL_API glGetVertexAttribIuivEXTType g_nngllGetVertexAttribIuivEXT;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_vertex_program4();
#endif // GL_NV_vertex_program4

#if !defined(GL_NV_video_capture)
#define GL_NV_video_capture

#define GL_VIDEO_BUFFER_NV 0x9020 // NOLINT
#define GL_VIDEO_BUFFER_BINDING_NV 0x9021 // NOLINT
#define GL_FIELD_UPPER_NV 0x9022 // NOLINT
#define GL_FIELD_LOWER_NV 0x9023 // NOLINT
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0x9024 // NOLINT
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025 // NOLINT
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026 // NOLINT
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0x9027 // NOLINT
#define GL_VIDEO_BUFFER_PITCH_NV 0x9028 // NOLINT
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029 // NOLINT
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0x902A // NOLINT
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0x902B // NOLINT
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C // NOLINT
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D // NOLINT
#define GL_PARTIAL_SUCCESS_NV 0x902E // NOLINT
#define GL_SUCCESS_NV 0x902F // NOLINT
#define GL_FAILURE_NV 0x9030 // NOLINT
#define GL_YCBYCR8_422_NV 0x9031 // NOLINT
#define GL_YCBAYCR8A_4224_NV 0x9032 // NOLINT
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0x9033 // NOLINT
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034 // NOLINT
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0x9035 // NOLINT
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036 // NOLINT
#define GL_Z4Y12Z4CB12Z4CR12_444_NV 0x9037 // NOLINT
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0x9038 // NOLINT
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0x9039 // NOLINT
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A // NOLINT
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B // NOLINT
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glBeginVideoCaptureNVType )( GLuint video_capture_slot );
typedef void ( NN_GLL_GL_APIENTRY *glBindVideoCaptureStreamBufferNVType )( GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset );
typedef void ( NN_GLL_GL_APIENTRY *glBindVideoCaptureStreamTextureNVType )( GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture );
typedef void ( NN_GLL_GL_APIENTRY *glEndVideoCaptureNVType )( GLuint video_capture_slot );
typedef void ( NN_GLL_GL_APIENTRY *glGetVideoCaptureivNVType )( GLuint video_capture_slot, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVideoCaptureStreamivNVType )( GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVideoCaptureStreamfvNVType )( GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetVideoCaptureStreamdvNVType )( GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params );
typedef GLenum ( NN_GLL_GL_APIENTRY *glVideoCaptureNVType )( GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time );
typedef void ( NN_GLL_GL_APIENTRY *glVideoCaptureStreamParameterivNVType )( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glVideoCaptureStreamParameterfvNVType )( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glVideoCaptureStreamParameterdvNVType )( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params );
#define glBeginVideoCaptureNV g_nngllBeginVideoCaptureNV
#define glBindVideoCaptureStreamBufferNV g_nngllBindVideoCaptureStreamBufferNV
#define glBindVideoCaptureStreamTextureNV g_nngllBindVideoCaptureStreamTextureNV
#define glEndVideoCaptureNV g_nngllEndVideoCaptureNV
#define glGetVideoCaptureivNV g_nngllGetVideoCaptureivNV
#define glGetVideoCaptureStreamivNV g_nngllGetVideoCaptureStreamivNV
#define glGetVideoCaptureStreamfvNV g_nngllGetVideoCaptureStreamfvNV
#define glGetVideoCaptureStreamdvNV g_nngllGetVideoCaptureStreamdvNV
#define glVideoCaptureNV g_nngllVideoCaptureNV
#define glVideoCaptureStreamParameterivNV g_nngllVideoCaptureStreamParameterivNV
#define glVideoCaptureStreamParameterfvNV g_nngllVideoCaptureStreamParameterfvNV
#define glVideoCaptureStreamParameterdvNV g_nngllVideoCaptureStreamParameterdvNV
NN_GLL_API glBeginVideoCaptureNVType g_nngllBeginVideoCaptureNV;
NN_GLL_API glBindVideoCaptureStreamBufferNVType g_nngllBindVideoCaptureStreamBufferNV;
NN_GLL_API glBindVideoCaptureStreamTextureNVType g_nngllBindVideoCaptureStreamTextureNV;
NN_GLL_API glEndVideoCaptureNVType g_nngllEndVideoCaptureNV;
NN_GLL_API glGetVideoCaptureivNVType g_nngllGetVideoCaptureivNV;
NN_GLL_API glGetVideoCaptureStreamivNVType g_nngllGetVideoCaptureStreamivNV;
NN_GLL_API glGetVideoCaptureStreamfvNVType g_nngllGetVideoCaptureStreamfvNV;
NN_GLL_API glGetVideoCaptureStreamdvNVType g_nngllGetVideoCaptureStreamdvNV;
NN_GLL_API glVideoCaptureNVType g_nngllVideoCaptureNV;
NN_GLL_API glVideoCaptureStreamParameterivNVType g_nngllVideoCaptureStreamParameterivNV;
NN_GLL_API glVideoCaptureStreamParameterfvNVType g_nngllVideoCaptureStreamParameterfvNV;
NN_GLL_API glVideoCaptureStreamParameterdvNVType g_nngllVideoCaptureStreamParameterdvNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_video_capture();
#endif // GL_NV_video_capture

#if !defined(GL_NV_viewport_array2)
#define GL_NV_viewport_array2

NN_GLL_API GLboolean nngllIsSupported_GL_NV_viewport_array2();
#endif // GL_NV_viewport_array2

#if !defined(GL_NV_viewport_swizzle)
#define GL_NV_viewport_swizzle

#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350 // NOLINT
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351 // NOLINT
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352 // NOLINT
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353 // NOLINT
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354 // NOLINT
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355 // NOLINT
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356 // NOLINT
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357 // NOLINT
#define GL_VIEWPORT_SWIZZLE_X_NV 0x9358 // NOLINT
#define GL_VIEWPORT_SWIZZLE_Y_NV 0x9359 // NOLINT
#define GL_VIEWPORT_SWIZZLE_Z_NV 0x935A // NOLINT
#define GL_VIEWPORT_SWIZZLE_W_NV 0x935B // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glViewportSwizzleNVType )( GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew );
#define glViewportSwizzleNV g_nngllViewportSwizzleNV
NN_GLL_API glViewportSwizzleNVType g_nngllViewportSwizzleNV;
NN_GLL_API GLboolean nngllIsSupported_GL_NV_viewport_swizzle();
#endif // GL_NV_viewport_swizzle

#if !defined(GL_OES_byte_coordinates)
#define GL_OES_byte_coordinates

typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1bOESType )( GLenum texture, GLbyte s );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1bvOESType )( GLenum texture, const GLbyte *coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2bOESType )( GLenum texture, GLbyte s, GLbyte t );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2bvOESType )( GLenum texture, const GLbyte *coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3bOESType )( GLenum texture, GLbyte s, GLbyte t, GLbyte r );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3bvOESType )( GLenum texture, const GLbyte *coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4bOESType )( GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4bvOESType )( GLenum texture, const GLbyte *coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1bOESType )( GLbyte s );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1bvOESType )( const GLbyte *coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2bOESType )( GLbyte s, GLbyte t );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2bvOESType )( const GLbyte *coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3bOESType )( GLbyte s, GLbyte t, GLbyte r );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3bvOESType )( const GLbyte *coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4bOESType )( GLbyte s, GLbyte t, GLbyte r, GLbyte q );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4bvOESType )( const GLbyte *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2bOESType )( GLbyte x, GLbyte y );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2bvOESType )( const GLbyte *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3bOESType )( GLbyte x, GLbyte y, GLbyte z );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3bvOESType )( const GLbyte *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4bOESType )( GLbyte x, GLbyte y, GLbyte z, GLbyte w );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4bvOESType )( const GLbyte *coords );
#define glMultiTexCoord1bOES g_nngllMultiTexCoord1bOES
#define glMultiTexCoord1bvOES g_nngllMultiTexCoord1bvOES
#define glMultiTexCoord2bOES g_nngllMultiTexCoord2bOES
#define glMultiTexCoord2bvOES g_nngllMultiTexCoord2bvOES
#define glMultiTexCoord3bOES g_nngllMultiTexCoord3bOES
#define glMultiTexCoord3bvOES g_nngllMultiTexCoord3bvOES
#define glMultiTexCoord4bOES g_nngllMultiTexCoord4bOES
#define glMultiTexCoord4bvOES g_nngllMultiTexCoord4bvOES
#define glTexCoord1bOES g_nngllTexCoord1bOES
#define glTexCoord1bvOES g_nngllTexCoord1bvOES
#define glTexCoord2bOES g_nngllTexCoord2bOES
#define glTexCoord2bvOES g_nngllTexCoord2bvOES
#define glTexCoord3bOES g_nngllTexCoord3bOES
#define glTexCoord3bvOES g_nngllTexCoord3bvOES
#define glTexCoord4bOES g_nngllTexCoord4bOES
#define glTexCoord4bvOES g_nngllTexCoord4bvOES
#define glVertex2bOES g_nngllVertex2bOES
#define glVertex2bvOES g_nngllVertex2bvOES
#define glVertex3bOES g_nngllVertex3bOES
#define glVertex3bvOES g_nngllVertex3bvOES
#define glVertex4bOES g_nngllVertex4bOES
#define glVertex4bvOES g_nngllVertex4bvOES
NN_GLL_API glMultiTexCoord1bOESType g_nngllMultiTexCoord1bOES;
NN_GLL_API glMultiTexCoord1bvOESType g_nngllMultiTexCoord1bvOES;
NN_GLL_API glMultiTexCoord2bOESType g_nngllMultiTexCoord2bOES;
NN_GLL_API glMultiTexCoord2bvOESType g_nngllMultiTexCoord2bvOES;
NN_GLL_API glMultiTexCoord3bOESType g_nngllMultiTexCoord3bOES;
NN_GLL_API glMultiTexCoord3bvOESType g_nngllMultiTexCoord3bvOES;
NN_GLL_API glMultiTexCoord4bOESType g_nngllMultiTexCoord4bOES;
NN_GLL_API glMultiTexCoord4bvOESType g_nngllMultiTexCoord4bvOES;
NN_GLL_API glTexCoord1bOESType g_nngllTexCoord1bOES;
NN_GLL_API glTexCoord1bvOESType g_nngllTexCoord1bvOES;
NN_GLL_API glTexCoord2bOESType g_nngllTexCoord2bOES;
NN_GLL_API glTexCoord2bvOESType g_nngllTexCoord2bvOES;
NN_GLL_API glTexCoord3bOESType g_nngllTexCoord3bOES;
NN_GLL_API glTexCoord3bvOESType g_nngllTexCoord3bvOES;
NN_GLL_API glTexCoord4bOESType g_nngllTexCoord4bOES;
NN_GLL_API glTexCoord4bvOESType g_nngllTexCoord4bvOES;
NN_GLL_API glVertex2bOESType g_nngllVertex2bOES;
NN_GLL_API glVertex2bvOESType g_nngllVertex2bvOES;
NN_GLL_API glVertex3bOESType g_nngllVertex3bOES;
NN_GLL_API glVertex3bvOESType g_nngllVertex3bvOES;
NN_GLL_API glVertex4bOESType g_nngllVertex4bOES;
NN_GLL_API glVertex4bvOESType g_nngllVertex4bvOES;
NN_GLL_API GLboolean nngllIsSupported_GL_OES_byte_coordinates();
#endif // GL_OES_byte_coordinates

#if !defined(GL_OES_compressed_paletted_texture)
#define GL_OES_compressed_paletted_texture

#define GL_PALETTE4_RGB8_OES 0x8B90 // NOLINT
#define GL_PALETTE4_RGBA8_OES 0x8B91 // NOLINT
#define GL_PALETTE4_R5_G6_B5_OES 0x8B92 // NOLINT
#define GL_PALETTE4_RGBA4_OES 0x8B93 // NOLINT
#define GL_PALETTE4_RGB5_A1_OES 0x8B94 // NOLINT
#define GL_PALETTE8_RGB8_OES 0x8B95 // NOLINT
#define GL_PALETTE8_RGBA8_OES 0x8B96 // NOLINT
#define GL_PALETTE8_R5_G6_B5_OES 0x8B97 // NOLINT
#define GL_PALETTE8_RGBA4_OES 0x8B98 // NOLINT
#define GL_PALETTE8_RGB5_A1_OES 0x8B99 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_OES_compressed_paletted_texture();
#endif // GL_OES_compressed_paletted_texture

#if !defined(GL_OES_fixed_point)
#define GL_OES_fixed_point

// Must be 32 bits
typedef GLint GLfixed;
typedef int GLclampx;
#define GL_FIXED_OES 0x140C // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glAlphaFuncxOESType )( GLenum func, GLfixed ref );
typedef void ( NN_GLL_GL_APIENTRY *glClearColorxOESType )( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
typedef void ( NN_GLL_GL_APIENTRY *glClearDepthxOESType )( GLfixed depth );
typedef void ( NN_GLL_GL_APIENTRY *glClipPlanexOESType )( GLenum plane, const GLfixed *equation );
typedef void ( NN_GLL_GL_APIENTRY *glColor4xOESType )( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
typedef void ( NN_GLL_GL_APIENTRY *glDepthRangexOESType )( GLfixed n, GLfixed f );
typedef void ( NN_GLL_GL_APIENTRY *glFogxOESType )( GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glFogxvOESType )( GLenum pname, const GLfixed *param );
typedef void ( NN_GLL_GL_APIENTRY *glFrustumxOESType )( GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f );
typedef void ( NN_GLL_GL_APIENTRY *glGetClipPlanexOESType )( GLenum plane, GLfixed *equation );
typedef void ( NN_GLL_GL_APIENTRY *glGetFixedvOESType )( GLenum pname, GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexEnvxvOESType )( GLenum target, GLenum pname, GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexParameterxvOESType )( GLenum target, GLenum pname, GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glLightModelxOESType )( GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glLightModelxvOESType )( GLenum pname, const GLfixed *param );
typedef void ( NN_GLL_GL_APIENTRY *glLightxOESType )( GLenum light, GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glLightxvOESType )( GLenum light, GLenum pname, const GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glLineWidthxOESType )( GLfixed width );
typedef void ( NN_GLL_GL_APIENTRY *glLoadMatrixxOESType )( const GLfixed *m );
typedef void ( NN_GLL_GL_APIENTRY *glMaterialxOESType )( GLenum face, GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glMaterialxvOESType )( GLenum face, GLenum pname, const GLfixed *param );
typedef void ( NN_GLL_GL_APIENTRY *glMultMatrixxOESType )( const GLfixed *m );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4xOESType )( GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3xOESType )( GLfixed nx, GLfixed ny, GLfixed nz );
typedef void ( NN_GLL_GL_APIENTRY *glOrthoxOESType )( GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f );
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterxvOESType )( GLenum pname, const GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glPointSizexOESType )( GLfixed size );
typedef void ( NN_GLL_GL_APIENTRY *glPolygonOffsetxOESType )( GLfixed factor, GLfixed units );
typedef void ( NN_GLL_GL_APIENTRY *glRotatexOESType )( GLfixed angle, GLfixed x, GLfixed y, GLfixed z );
typedef void ( NN_GLL_GL_APIENTRY *glScalexOESType )( GLfixed x, GLfixed y, GLfixed z );
typedef void ( NN_GLL_GL_APIENTRY *glTexEnvxOESType )( GLenum target, GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glTexEnvxvOESType )( GLenum target, GLenum pname, const GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glTexParameterxOESType )( GLenum target, GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glTexParameterxvOESType )( GLenum target, GLenum pname, const GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glTranslatexOESType )( GLfixed x, GLfixed y, GLfixed z );
typedef void ( NN_GLL_GL_APIENTRY *glGetLightxvOESType )( GLenum light, GLenum pname, GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMaterialxvOESType )( GLenum face, GLenum pname, GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterxOESType )( GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glSampleCoveragexOESType )( GLclampx value, GLboolean invert );
typedef void ( NN_GLL_GL_APIENTRY *glAccumxOESType )( GLenum op, GLfixed value );
typedef void ( NN_GLL_GL_APIENTRY *glBitmapxOESType )( GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap );
typedef void ( NN_GLL_GL_APIENTRY *glBlendColorxOESType )( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
typedef void ( NN_GLL_GL_APIENTRY *glClearAccumxOESType )( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha );
typedef void ( NN_GLL_GL_APIENTRY *glColor3xOESType )( GLfixed red, GLfixed green, GLfixed blue );
typedef void ( NN_GLL_GL_APIENTRY *glColor3xvOESType )( const GLfixed *components );
typedef void ( NN_GLL_GL_APIENTRY *glColor4xvOESType )( const GLfixed *components );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionParameterxOESType )( GLenum target, GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glConvolutionParameterxvOESType )( GLenum target, GLenum pname, const GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord1xOESType )( GLfixed u );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord1xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord2xOESType )( GLfixed u, GLfixed v );
typedef void ( NN_GLL_GL_APIENTRY *glEvalCoord2xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glFeedbackBufferxOESType )( GLsizei n, GLenum type, const GLfixed *buffer );
typedef void ( NN_GLL_GL_APIENTRY *glGetConvolutionParameterxvOESType )( GLenum target, GLenum pname, GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetHistogramParameterxvOESType )( GLenum target, GLenum pname, GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetLightxOESType )( GLenum light, GLenum pname, GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetMapxvOESType )( GLenum target, GLenum query, GLfixed *v );
typedef void ( NN_GLL_GL_APIENTRY *glGetMaterialxOESType )( GLenum face, GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glGetPixelMapxvType )( GLenum map, GLint size, GLfixed *values );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexGenxvOESType )( GLenum coord, GLenum pname, GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetTexLevelParameterxvOESType )( GLenum target, GLint level, GLenum pname, GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glIndexxOESType )( GLfixed component );
typedef void ( NN_GLL_GL_APIENTRY *glIndexxvOESType )( const GLfixed *component );
typedef void ( NN_GLL_GL_APIENTRY *glLoadTransposeMatrixxOESType )( const GLfixed *m );
typedef void ( NN_GLL_GL_APIENTRY *glMap1xOESType )( GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points );
typedef void ( NN_GLL_GL_APIENTRY *glMap2xOESType )( GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points );
typedef void ( NN_GLL_GL_APIENTRY *glMapGrid1xOESType )( GLint n, GLfixed u1, GLfixed u2 );
typedef void ( NN_GLL_GL_APIENTRY *glMapGrid2xOESType )( GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2 );
typedef void ( NN_GLL_GL_APIENTRY *glMultTransposeMatrixxOESType )( const GLfixed *m );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1xOESType )( GLenum texture, GLfixed s );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord1xvOESType )( GLenum texture, const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2xOESType )( GLenum texture, GLfixed s, GLfixed t );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord2xvOESType )( GLenum texture, const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3xOESType )( GLenum texture, GLfixed s, GLfixed t, GLfixed r );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord3xvOESType )( GLenum texture, const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glMultiTexCoord4xvOESType )( GLenum texture, const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glPassThroughxOESType )( GLfixed token );
typedef void ( NN_GLL_GL_APIENTRY *glPixelMapxType )( GLenum map, GLint size, const GLfixed *values );
typedef void ( NN_GLL_GL_APIENTRY *glPixelStorexType )( GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glPixelTransferxOESType )( GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glPixelZoomxOESType )( GLfixed xfactor, GLfixed yfactor );
typedef void ( NN_GLL_GL_APIENTRY *glPrioritizeTexturesxOESType )( GLsizei n, const GLuint *textures, const GLfixed *priorities );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos2xOESType )( GLfixed x, GLfixed y );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos2xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos3xOESType )( GLfixed x, GLfixed y, GLfixed z );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos3xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos4xOESType )( GLfixed x, GLfixed y, GLfixed z, GLfixed w );
typedef void ( NN_GLL_GL_APIENTRY *glRasterPos4xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glRectxOESType )( GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2 );
typedef void ( NN_GLL_GL_APIENTRY *glRectxvOESType )( const GLfixed *v1, const GLfixed *v2 );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1xOESType )( GLfixed s );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord1xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2xOESType )( GLfixed s, GLfixed t );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3xOESType )( GLfixed s, GLfixed t, GLfixed r );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord3xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4xOESType )( GLfixed s, GLfixed t, GLfixed r, GLfixed q );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glTexGenxOESType )( GLenum coord, GLenum pname, GLfixed param );
typedef void ( NN_GLL_GL_APIENTRY *glTexGenxvOESType )( GLenum coord, GLenum pname, const GLfixed *params );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2xOESType )( GLfixed x );
typedef void ( NN_GLL_GL_APIENTRY *glVertex2xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3xOESType )( GLfixed x, GLfixed y );
typedef void ( NN_GLL_GL_APIENTRY *glVertex3xvOESType )( const GLfixed *coords );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4xOESType )( GLfixed x, GLfixed y, GLfixed z );
typedef void ( NN_GLL_GL_APIENTRY *glVertex4xvOESType )( const GLfixed *coords );
#define glAlphaFuncxOES g_nngllAlphaFuncxOES
#define glClearColorxOES g_nngllClearColorxOES
#define glClearDepthxOES g_nngllClearDepthxOES
#define glClipPlanexOES g_nngllClipPlanexOES
#define glColor4xOES g_nngllColor4xOES
#define glDepthRangexOES g_nngllDepthRangexOES
#define glFogxOES g_nngllFogxOES
#define glFogxvOES g_nngllFogxvOES
#define glFrustumxOES g_nngllFrustumxOES
#define glGetClipPlanexOES g_nngllGetClipPlanexOES
#define glGetFixedvOES g_nngllGetFixedvOES
#define glGetTexEnvxvOES g_nngllGetTexEnvxvOES
#define glGetTexParameterxvOES g_nngllGetTexParameterxvOES
#define glLightModelxOES g_nngllLightModelxOES
#define glLightModelxvOES g_nngllLightModelxvOES
#define glLightxOES g_nngllLightxOES
#define glLightxvOES g_nngllLightxvOES
#define glLineWidthxOES g_nngllLineWidthxOES
#define glLoadMatrixxOES g_nngllLoadMatrixxOES
#define glMaterialxOES g_nngllMaterialxOES
#define glMaterialxvOES g_nngllMaterialxvOES
#define glMultMatrixxOES g_nngllMultMatrixxOES
#define glMultiTexCoord4xOES g_nngllMultiTexCoord4xOES
#define glNormal3xOES g_nngllNormal3xOES
#define glOrthoxOES g_nngllOrthoxOES
#define glPointParameterxvOES g_nngllPointParameterxvOES
#define glPointSizexOES g_nngllPointSizexOES
#define glPolygonOffsetxOES g_nngllPolygonOffsetxOES
#define glRotatexOES g_nngllRotatexOES
#define glScalexOES g_nngllScalexOES
#define glTexEnvxOES g_nngllTexEnvxOES
#define glTexEnvxvOES g_nngllTexEnvxvOES
#define glTexParameterxOES g_nngllTexParameterxOES
#define glTexParameterxvOES g_nngllTexParameterxvOES
#define glTranslatexOES g_nngllTranslatexOES
#define glGetLightxvOES g_nngllGetLightxvOES
#define glGetMaterialxvOES g_nngllGetMaterialxvOES
#define glPointParameterxOES g_nngllPointParameterxOES
#define glSampleCoveragexOES g_nngllSampleCoveragexOES
#define glAccumxOES g_nngllAccumxOES
#define glBitmapxOES g_nngllBitmapxOES
#define glBlendColorxOES g_nngllBlendColorxOES
#define glClearAccumxOES g_nngllClearAccumxOES
#define glColor3xOES g_nngllColor3xOES
#define glColor3xvOES g_nngllColor3xvOES
#define glColor4xvOES g_nngllColor4xvOES
#define glConvolutionParameterxOES g_nngllConvolutionParameterxOES
#define glConvolutionParameterxvOES g_nngllConvolutionParameterxvOES
#define glEvalCoord1xOES g_nngllEvalCoord1xOES
#define glEvalCoord1xvOES g_nngllEvalCoord1xvOES
#define glEvalCoord2xOES g_nngllEvalCoord2xOES
#define glEvalCoord2xvOES g_nngllEvalCoord2xvOES
#define glFeedbackBufferxOES g_nngllFeedbackBufferxOES
#define glGetConvolutionParameterxvOES g_nngllGetConvolutionParameterxvOES
#define glGetHistogramParameterxvOES g_nngllGetHistogramParameterxvOES
#define glGetLightxOES g_nngllGetLightxOES
#define glGetMapxvOES g_nngllGetMapxvOES
#define glGetMaterialxOES g_nngllGetMaterialxOES
#define glGetPixelMapxv g_nngllGetPixelMapxv
#define glGetTexGenxvOES g_nngllGetTexGenxvOES
#define glGetTexLevelParameterxvOES g_nngllGetTexLevelParameterxvOES
#define glIndexxOES g_nngllIndexxOES
#define glIndexxvOES g_nngllIndexxvOES
#define glLoadTransposeMatrixxOES g_nngllLoadTransposeMatrixxOES
#define glMap1xOES g_nngllMap1xOES
#define glMap2xOES g_nngllMap2xOES
#define glMapGrid1xOES g_nngllMapGrid1xOES
#define glMapGrid2xOES g_nngllMapGrid2xOES
#define glMultTransposeMatrixxOES g_nngllMultTransposeMatrixxOES
#define glMultiTexCoord1xOES g_nngllMultiTexCoord1xOES
#define glMultiTexCoord1xvOES g_nngllMultiTexCoord1xvOES
#define glMultiTexCoord2xOES g_nngllMultiTexCoord2xOES
#define glMultiTexCoord2xvOES g_nngllMultiTexCoord2xvOES
#define glMultiTexCoord3xOES g_nngllMultiTexCoord3xOES
#define glMultiTexCoord3xvOES g_nngllMultiTexCoord3xvOES
#define glMultiTexCoord4xvOES g_nngllMultiTexCoord4xvOES
#define glNormal3xvOES g_nngllNormal3xvOES
#define glPassThroughxOES g_nngllPassThroughxOES
#define glPixelMapx g_nngllPixelMapx
#define glPixelStorex g_nngllPixelStorex
#define glPixelTransferxOES g_nngllPixelTransferxOES
#define glPixelZoomxOES g_nngllPixelZoomxOES
#define glPrioritizeTexturesxOES g_nngllPrioritizeTexturesxOES
#define glRasterPos2xOES g_nngllRasterPos2xOES
#define glRasterPos2xvOES g_nngllRasterPos2xvOES
#define glRasterPos3xOES g_nngllRasterPos3xOES
#define glRasterPos3xvOES g_nngllRasterPos3xvOES
#define glRasterPos4xOES g_nngllRasterPos4xOES
#define glRasterPos4xvOES g_nngllRasterPos4xvOES
#define glRectxOES g_nngllRectxOES
#define glRectxvOES g_nngllRectxvOES
#define glTexCoord1xOES g_nngllTexCoord1xOES
#define glTexCoord1xvOES g_nngllTexCoord1xvOES
#define glTexCoord2xOES g_nngllTexCoord2xOES
#define glTexCoord2xvOES g_nngllTexCoord2xvOES
#define glTexCoord3xOES g_nngllTexCoord3xOES
#define glTexCoord3xvOES g_nngllTexCoord3xvOES
#define glTexCoord4xOES g_nngllTexCoord4xOES
#define glTexCoord4xvOES g_nngllTexCoord4xvOES
#define glTexGenxOES g_nngllTexGenxOES
#define glTexGenxvOES g_nngllTexGenxvOES
#define glVertex2xOES g_nngllVertex2xOES
#define glVertex2xvOES g_nngllVertex2xvOES
#define glVertex3xOES g_nngllVertex3xOES
#define glVertex3xvOES g_nngllVertex3xvOES
#define glVertex4xOES g_nngllVertex4xOES
#define glVertex4xvOES g_nngllVertex4xvOES
NN_GLL_API glAlphaFuncxOESType g_nngllAlphaFuncxOES;
NN_GLL_API glClearColorxOESType g_nngllClearColorxOES;
NN_GLL_API glClearDepthxOESType g_nngllClearDepthxOES;
NN_GLL_API glClipPlanexOESType g_nngllClipPlanexOES;
NN_GLL_API glColor4xOESType g_nngllColor4xOES;
NN_GLL_API glDepthRangexOESType g_nngllDepthRangexOES;
NN_GLL_API glFogxOESType g_nngllFogxOES;
NN_GLL_API glFogxvOESType g_nngllFogxvOES;
NN_GLL_API glFrustumxOESType g_nngllFrustumxOES;
NN_GLL_API glGetClipPlanexOESType g_nngllGetClipPlanexOES;
NN_GLL_API glGetFixedvOESType g_nngllGetFixedvOES;
NN_GLL_API glGetTexEnvxvOESType g_nngllGetTexEnvxvOES;
NN_GLL_API glGetTexParameterxvOESType g_nngllGetTexParameterxvOES;
NN_GLL_API glLightModelxOESType g_nngllLightModelxOES;
NN_GLL_API glLightModelxvOESType g_nngllLightModelxvOES;
NN_GLL_API glLightxOESType g_nngllLightxOES;
NN_GLL_API glLightxvOESType g_nngllLightxvOES;
NN_GLL_API glLineWidthxOESType g_nngllLineWidthxOES;
NN_GLL_API glLoadMatrixxOESType g_nngllLoadMatrixxOES;
NN_GLL_API glMaterialxOESType g_nngllMaterialxOES;
NN_GLL_API glMaterialxvOESType g_nngllMaterialxvOES;
NN_GLL_API glMultMatrixxOESType g_nngllMultMatrixxOES;
NN_GLL_API glMultiTexCoord4xOESType g_nngllMultiTexCoord4xOES;
NN_GLL_API glNormal3xOESType g_nngllNormal3xOES;
NN_GLL_API glOrthoxOESType g_nngllOrthoxOES;
NN_GLL_API glPointParameterxvOESType g_nngllPointParameterxvOES;
NN_GLL_API glPointSizexOESType g_nngllPointSizexOES;
NN_GLL_API glPolygonOffsetxOESType g_nngllPolygonOffsetxOES;
NN_GLL_API glRotatexOESType g_nngllRotatexOES;
NN_GLL_API glScalexOESType g_nngllScalexOES;
NN_GLL_API glTexEnvxOESType g_nngllTexEnvxOES;
NN_GLL_API glTexEnvxvOESType g_nngllTexEnvxvOES;
NN_GLL_API glTexParameterxOESType g_nngllTexParameterxOES;
NN_GLL_API glTexParameterxvOESType g_nngllTexParameterxvOES;
NN_GLL_API glTranslatexOESType g_nngllTranslatexOES;
NN_GLL_API glGetLightxvOESType g_nngllGetLightxvOES;
NN_GLL_API glGetMaterialxvOESType g_nngllGetMaterialxvOES;
NN_GLL_API glPointParameterxOESType g_nngllPointParameterxOES;
NN_GLL_API glSampleCoveragexOESType g_nngllSampleCoveragexOES;
NN_GLL_API glAccumxOESType g_nngllAccumxOES;
NN_GLL_API glBitmapxOESType g_nngllBitmapxOES;
NN_GLL_API glBlendColorxOESType g_nngllBlendColorxOES;
NN_GLL_API glClearAccumxOESType g_nngllClearAccumxOES;
NN_GLL_API glColor3xOESType g_nngllColor3xOES;
NN_GLL_API glColor3xvOESType g_nngllColor3xvOES;
NN_GLL_API glColor4xvOESType g_nngllColor4xvOES;
NN_GLL_API glConvolutionParameterxOESType g_nngllConvolutionParameterxOES;
NN_GLL_API glConvolutionParameterxvOESType g_nngllConvolutionParameterxvOES;
NN_GLL_API glEvalCoord1xOESType g_nngllEvalCoord1xOES;
NN_GLL_API glEvalCoord1xvOESType g_nngllEvalCoord1xvOES;
NN_GLL_API glEvalCoord2xOESType g_nngllEvalCoord2xOES;
NN_GLL_API glEvalCoord2xvOESType g_nngllEvalCoord2xvOES;
NN_GLL_API glFeedbackBufferxOESType g_nngllFeedbackBufferxOES;
NN_GLL_API glGetConvolutionParameterxvOESType g_nngllGetConvolutionParameterxvOES;
NN_GLL_API glGetHistogramParameterxvOESType g_nngllGetHistogramParameterxvOES;
NN_GLL_API glGetLightxOESType g_nngllGetLightxOES;
NN_GLL_API glGetMapxvOESType g_nngllGetMapxvOES;
NN_GLL_API glGetMaterialxOESType g_nngllGetMaterialxOES;
NN_GLL_API glGetPixelMapxvType g_nngllGetPixelMapxv;
NN_GLL_API glGetTexGenxvOESType g_nngllGetTexGenxvOES;
NN_GLL_API glGetTexLevelParameterxvOESType g_nngllGetTexLevelParameterxvOES;
NN_GLL_API glIndexxOESType g_nngllIndexxOES;
NN_GLL_API glIndexxvOESType g_nngllIndexxvOES;
NN_GLL_API glLoadTransposeMatrixxOESType g_nngllLoadTransposeMatrixxOES;
NN_GLL_API glMap1xOESType g_nngllMap1xOES;
NN_GLL_API glMap2xOESType g_nngllMap2xOES;
NN_GLL_API glMapGrid1xOESType g_nngllMapGrid1xOES;
NN_GLL_API glMapGrid2xOESType g_nngllMapGrid2xOES;
NN_GLL_API glMultTransposeMatrixxOESType g_nngllMultTransposeMatrixxOES;
NN_GLL_API glMultiTexCoord1xOESType g_nngllMultiTexCoord1xOES;
NN_GLL_API glMultiTexCoord1xvOESType g_nngllMultiTexCoord1xvOES;
NN_GLL_API glMultiTexCoord2xOESType g_nngllMultiTexCoord2xOES;
NN_GLL_API glMultiTexCoord2xvOESType g_nngllMultiTexCoord2xvOES;
NN_GLL_API glMultiTexCoord3xOESType g_nngllMultiTexCoord3xOES;
NN_GLL_API glMultiTexCoord3xvOESType g_nngllMultiTexCoord3xvOES;
NN_GLL_API glMultiTexCoord4xvOESType g_nngllMultiTexCoord4xvOES;
NN_GLL_API glNormal3xvOESType g_nngllNormal3xvOES;
NN_GLL_API glPassThroughxOESType g_nngllPassThroughxOES;
NN_GLL_API glPixelMapxType g_nngllPixelMapx;
NN_GLL_API glPixelStorexType g_nngllPixelStorex;
NN_GLL_API glPixelTransferxOESType g_nngllPixelTransferxOES;
NN_GLL_API glPixelZoomxOESType g_nngllPixelZoomxOES;
NN_GLL_API glPrioritizeTexturesxOESType g_nngllPrioritizeTexturesxOES;
NN_GLL_API glRasterPos2xOESType g_nngllRasterPos2xOES;
NN_GLL_API glRasterPos2xvOESType g_nngllRasterPos2xvOES;
NN_GLL_API glRasterPos3xOESType g_nngllRasterPos3xOES;
NN_GLL_API glRasterPos3xvOESType g_nngllRasterPos3xvOES;
NN_GLL_API glRasterPos4xOESType g_nngllRasterPos4xOES;
NN_GLL_API glRasterPos4xvOESType g_nngllRasterPos4xvOES;
NN_GLL_API glRectxOESType g_nngllRectxOES;
NN_GLL_API glRectxvOESType g_nngllRectxvOES;
NN_GLL_API glTexCoord1xOESType g_nngllTexCoord1xOES;
NN_GLL_API glTexCoord1xvOESType g_nngllTexCoord1xvOES;
NN_GLL_API glTexCoord2xOESType g_nngllTexCoord2xOES;
NN_GLL_API glTexCoord2xvOESType g_nngllTexCoord2xvOES;
NN_GLL_API glTexCoord3xOESType g_nngllTexCoord3xOES;
NN_GLL_API glTexCoord3xvOESType g_nngllTexCoord3xvOES;
NN_GLL_API glTexCoord4xOESType g_nngllTexCoord4xOES;
NN_GLL_API glTexCoord4xvOESType g_nngllTexCoord4xvOES;
NN_GLL_API glTexGenxOESType g_nngllTexGenxOES;
NN_GLL_API glTexGenxvOESType g_nngllTexGenxvOES;
NN_GLL_API glVertex2xOESType g_nngllVertex2xOES;
NN_GLL_API glVertex2xvOESType g_nngllVertex2xvOES;
NN_GLL_API glVertex3xOESType g_nngllVertex3xOES;
NN_GLL_API glVertex3xvOESType g_nngllVertex3xvOES;
NN_GLL_API glVertex4xOESType g_nngllVertex4xOES;
NN_GLL_API glVertex4xvOESType g_nngllVertex4xvOES;
NN_GLL_API GLboolean nngllIsSupported_GL_OES_fixed_point();
#endif // GL_OES_fixed_point

#if !defined(GL_OES_query_matrix)
#define GL_OES_query_matrix

typedef GLbitfield ( NN_GLL_GL_APIENTRY *glQueryMatrixxOESType )( GLfixed *mantissa, GLint *exponent );
#define glQueryMatrixxOES g_nngllQueryMatrixxOES
NN_GLL_API glQueryMatrixxOESType g_nngllQueryMatrixxOES;
NN_GLL_API GLboolean nngllIsSupported_GL_OES_query_matrix();
#endif // GL_OES_query_matrix

#if !defined(GL_OES_read_format)
#define GL_OES_read_format

#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A // NOLINT
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_OES_read_format();
#endif // GL_OES_read_format

#if !defined(GL_OES_single_precision)
#define GL_OES_single_precision

typedef void ( NN_GLL_GL_APIENTRY *glClearDepthfOESType )( GLclampf depth );
typedef void ( NN_GLL_GL_APIENTRY *glClipPlanefOESType )( GLenum plane, const GLfloat *equation );
typedef void ( NN_GLL_GL_APIENTRY *glDepthRangefOESType )( GLclampf n, GLclampf f );
typedef void ( NN_GLL_GL_APIENTRY *glFrustumfOESType )( GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f );
typedef void ( NN_GLL_GL_APIENTRY *glGetClipPlanefOESType )( GLenum plane, GLfloat *equation );
typedef void ( NN_GLL_GL_APIENTRY *glOrthofOESType )( GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f );
#define glClearDepthfOES g_nngllClearDepthfOES
#define glClipPlanefOES g_nngllClipPlanefOES
#define glDepthRangefOES g_nngllDepthRangefOES
#define glFrustumfOES g_nngllFrustumfOES
#define glGetClipPlanefOES g_nngllGetClipPlanefOES
#define glOrthofOES g_nngllOrthofOES
NN_GLL_API glClearDepthfOESType g_nngllClearDepthfOES;
NN_GLL_API glClipPlanefOESType g_nngllClipPlanefOES;
NN_GLL_API glDepthRangefOESType g_nngllDepthRangefOES;
NN_GLL_API glFrustumfOESType g_nngllFrustumfOES;
NN_GLL_API glGetClipPlanefOESType g_nngllGetClipPlanefOES;
NN_GLL_API glOrthofOESType g_nngllOrthofOES;
NN_GLL_API GLboolean nngllIsSupported_GL_OES_single_precision();
#endif // GL_OES_single_precision

#if !defined(GL_OML_interlace)
#define GL_OML_interlace

#define GL_INTERLACE_OML 0x8980 // NOLINT
#define GL_INTERLACE_READ_OML 0x8981 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_OML_interlace();
#endif // GL_OML_interlace

#if !defined(GL_OML_resample)
#define GL_OML_resample

#define GL_PACK_RESAMPLE_OML 0x8984 // NOLINT
#define GL_UNPACK_RESAMPLE_OML 0x8985 // NOLINT
#define GL_RESAMPLE_REPLICATE_OML 0x8986 // NOLINT
#define GL_RESAMPLE_ZERO_FILL_OML 0x8987 // NOLINT
#define GL_RESAMPLE_AVERAGE_OML 0x8988 // NOLINT
#define GL_RESAMPLE_DECIMATE_OML 0x8989 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_OML_resample();
#endif // GL_OML_resample

#if !defined(GL_OML_subsample)
#define GL_OML_subsample

#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982 // NOLINT
#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_OML_subsample();
#endif // GL_OML_subsample

#if !defined(GL_OVR_multiview)
#define GL_OVR_multiview

#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630 // NOLINT
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632 // NOLINT
#define GL_MAX_VIEWS_OVR 0x9631 // NOLINT
#define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFramebufferTextureMultiviewOVRType )( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews );
#define glFramebufferTextureMultiviewOVR g_nngllFramebufferTextureMultiviewOVR
NN_GLL_API glFramebufferTextureMultiviewOVRType g_nngllFramebufferTextureMultiviewOVR;
NN_GLL_API GLboolean nngllIsSupported_GL_OVR_multiview();
#endif // GL_OVR_multiview

#if !defined(GL_OVR_multiview2)
#define GL_OVR_multiview2

NN_GLL_API GLboolean nngllIsSupported_GL_OVR_multiview2();
#endif // GL_OVR_multiview2

#if !defined(GL_PGI_misc_hints)
#define GL_PGI_misc_hints

#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0x1A1F8 // NOLINT
#define GL_CONSERVE_MEMORY_HINT_PGI 0x1A1FD // NOLINT
#define GL_RECLAIM_MEMORY_HINT_PGI 0x1A1FE // NOLINT
#define GL_NATIVE_GRAPHICS_HANDLE_PGI 0x1A202 // NOLINT
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203 // NOLINT
#define GL_NATIVE_GRAPHICS_END_HINT_PGI 0x1A204 // NOLINT
#define GL_ALWAYS_FAST_HINT_PGI 0x1A20C // NOLINT
#define GL_ALWAYS_SOFT_HINT_PGI 0x1A20D // NOLINT
#define GL_ALLOW_DRAW_OBJ_HINT_PGI 0x1A20E // NOLINT
#define GL_ALLOW_DRAW_WIN_HINT_PGI 0x1A20F // NOLINT
#define GL_ALLOW_DRAW_FRG_HINT_PGI 0x1A210 // NOLINT
#define GL_ALLOW_DRAW_MEM_HINT_PGI 0x1A211 // NOLINT
#define GL_STRICT_DEPTHFUNC_HINT_PGI 0x1A216 // NOLINT
#define GL_STRICT_LIGHTING_HINT_PGI 0x1A217 // NOLINT
#define GL_STRICT_SCISSOR_HINT_PGI 0x1A218 // NOLINT
#define GL_FULL_STIPPLE_HINT_PGI 0x1A219 // NOLINT
#define GL_CLIP_NEAR_HINT_PGI 0x1A220 // NOLINT
#define GL_CLIP_FAR_HINT_PGI 0x1A221 // NOLINT
#define GL_WIDE_LINE_HINT_PGI 0x1A222 // NOLINT
#define GL_BACK_NORMALS_HINT_PGI 0x1A223 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glHintPGIType )( GLenum target, GLint mode );
#define glHintPGI g_nngllHintPGI
NN_GLL_API glHintPGIType g_nngllHintPGI;
NN_GLL_API GLboolean nngllIsSupported_GL_PGI_misc_hints();
#endif // GL_PGI_misc_hints

#if !defined(GL_PGI_vertex_hints)
#define GL_PGI_vertex_hints

#define GL_VERTEX_DATA_HINT_PGI 0x1A22A // NOLINT
#define GL_VERTEX_CONSISTENT_HINT_PGI 0x1A22B // NOLINT
#define GL_MATERIAL_SIDE_HINT_PGI 0x1A22C // NOLINT
#define GL_MAX_VERTEX_HINT_PGI 0x1A22D // NOLINT
#define GL_COLOR3_BIT_PGI 0x00010000 // NOLINT
#define GL_COLOR4_BIT_PGI 0x00020000 // NOLINT
#define GL_EDGEFLAG_BIT_PGI 0x00040000 // NOLINT
#define GL_INDEX_BIT_PGI 0x00080000 // NOLINT
#define GL_MAT_AMBIENT_BIT_PGI 0x00100000 // NOLINT
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000 // NOLINT
#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000 // NOLINT
#define GL_MAT_EMISSION_BIT_PGI 0x00800000 // NOLINT
#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000 // NOLINT
#define GL_MAT_SHININESS_BIT_PGI 0x02000000 // NOLINT
#define GL_MAT_SPECULAR_BIT_PGI 0x04000000 // NOLINT
#define GL_NORMAL_BIT_PGI 0x08000000 // NOLINT
#define GL_TEXCOORD1_BIT_PGI 0x10000000 // NOLINT
#define GL_TEXCOORD2_BIT_PGI 0x20000000 // NOLINT
#define GL_TEXCOORD3_BIT_PGI 0x40000000 // NOLINT
#define GL_TEXCOORD4_BIT_PGI 0x80000000 // NOLINT
#define GL_VERTEX23_BIT_PGI 0x00000004 // NOLINT
#define GL_VERTEX4_BIT_PGI 0x00000008 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_PGI_vertex_hints();
#endif // GL_PGI_vertex_hints

#if !defined(GL_REND_screen_coordinates)
#define GL_REND_screen_coordinates

#define GL_SCREEN_COORDINATES_REND 0x8490 // NOLINT
#define GL_INVERTED_SCREEN_W_REND 0x8491 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_REND_screen_coordinates();
#endif // GL_REND_screen_coordinates

#if !defined(GL_S3_s3tc)
#define GL_S3_s3tc

#define GL_RGB_S3TC 0x83A0 // NOLINT
#define GL_RGB4_S3TC 0x83A1 // NOLINT
#define GL_RGBA_S3TC 0x83A2 // NOLINT
#define GL_RGBA4_S3TC 0x83A3 // NOLINT
#define GL_RGBA_DXT5_S3TC 0x83A4 // NOLINT
#define GL_RGBA4_DXT5_S3TC 0x83A5 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_S3_s3tc();
#endif // GL_S3_s3tc

#if !defined(GL_SGIS_detail_texture)
#define GL_SGIS_detail_texture

#define GL_DETAIL_TEXTURE_2D_SGIS 0x8095 // NOLINT
#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096 // NOLINT
#define GL_LINEAR_DETAIL_SGIS 0x8097 // NOLINT
#define GL_LINEAR_DETAIL_ALPHA_SGIS 0x8098 // NOLINT
#define GL_LINEAR_DETAIL_COLOR_SGIS 0x8099 // NOLINT
#define GL_DETAIL_TEXTURE_LEVEL_SGIS 0x809A // NOLINT
#define GL_DETAIL_TEXTURE_MODE_SGIS 0x809B // NOLINT
#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDetailTexFuncSGISType )( GLenum target, GLsizei n, const GLfloat *points );
typedef void ( NN_GLL_GL_APIENTRY *glGetDetailTexFuncSGISType )( GLenum target, GLfloat *points );
#define glDetailTexFuncSGIS g_nngllDetailTexFuncSGIS
#define glGetDetailTexFuncSGIS g_nngllGetDetailTexFuncSGIS
NN_GLL_API glDetailTexFuncSGISType g_nngllDetailTexFuncSGIS;
NN_GLL_API glGetDetailTexFuncSGISType g_nngllGetDetailTexFuncSGIS;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_detail_texture();
#endif // GL_SGIS_detail_texture

#if !defined(GL_SGIS_fog_function)
#define GL_SGIS_fog_function

#define GL_FOG_FUNC_SGIS 0x812A // NOLINT
#define GL_FOG_FUNC_POINTS_SGIS 0x812B // NOLINT
#define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFogFuncSGISType )( GLsizei n, const GLfloat *points );
typedef void ( NN_GLL_GL_APIENTRY *glGetFogFuncSGISType )( GLfloat *points );
#define glFogFuncSGIS g_nngllFogFuncSGIS
#define glGetFogFuncSGIS g_nngllGetFogFuncSGIS
NN_GLL_API glFogFuncSGISType g_nngllFogFuncSGIS;
NN_GLL_API glGetFogFuncSGISType g_nngllGetFogFuncSGIS;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_fog_function();
#endif // GL_SGIS_fog_function

#if !defined(GL_SGIS_generate_mipmap)
#define GL_SGIS_generate_mipmap

#define GL_GENERATE_MIPMAP_SGIS 0x8191 // NOLINT
#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_generate_mipmap();
#endif // GL_SGIS_generate_mipmap

#if !defined(GL_SGIS_multisample)
#define GL_SGIS_multisample

#define GL_MULTISAMPLE_SGIS 0x809D // NOLINT
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E // NOLINT
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F // NOLINT
#define GL_SAMPLE_MASK_SGIS 0x80A0 // NOLINT
#define GL_1PASS_SGIS 0x80A1 // NOLINT
#define GL_2PASS_0_SGIS 0x80A2 // NOLINT
#define GL_2PASS_1_SGIS 0x80A3 // NOLINT
#define GL_4PASS_0_SGIS 0x80A4 // NOLINT
#define GL_4PASS_1_SGIS 0x80A5 // NOLINT
#define GL_4PASS_2_SGIS 0x80A6 // NOLINT
#define GL_4PASS_3_SGIS 0x80A7 // NOLINT
#define GL_SAMPLE_BUFFERS_SGIS 0x80A8 // NOLINT
#define GL_SAMPLES_SGIS 0x80A9 // NOLINT
#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA // NOLINT
#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB // NOLINT
#define GL_SAMPLE_PATTERN_SGIS 0x80AC // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glSampleMaskSGISType )( GLclampf value, GLboolean invert );
typedef void ( NN_GLL_GL_APIENTRY *glSamplePatternSGISType )( GLenum pattern );
#define glSampleMaskSGIS g_nngllSampleMaskSGIS
#define glSamplePatternSGIS g_nngllSamplePatternSGIS
NN_GLL_API glSampleMaskSGISType g_nngllSampleMaskSGIS;
NN_GLL_API glSamplePatternSGISType g_nngllSamplePatternSGIS;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_multisample();
#endif // GL_SGIS_multisample

#if !defined(GL_SGIS_pixel_texture)
#define GL_SGIS_pixel_texture

#define GL_PIXEL_TEXTURE_SGIS 0x8353 // NOLINT
#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354 // NOLINT
#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355 // NOLINT
#define GL_PIXEL_GROUP_COLOR_SGIS 0x8356 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPixelTexGenParameteriSGISType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glPixelTexGenParameterivSGISType )( GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glPixelTexGenParameterfSGISType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glPixelTexGenParameterfvSGISType )( GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetPixelTexGenParameterivSGISType )( GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetPixelTexGenParameterfvSGISType )( GLenum pname, GLfloat *params );
#define glPixelTexGenParameteriSGIS g_nngllPixelTexGenParameteriSGIS
#define glPixelTexGenParameterivSGIS g_nngllPixelTexGenParameterivSGIS
#define glPixelTexGenParameterfSGIS g_nngllPixelTexGenParameterfSGIS
#define glPixelTexGenParameterfvSGIS g_nngllPixelTexGenParameterfvSGIS
#define glGetPixelTexGenParameterivSGIS g_nngllGetPixelTexGenParameterivSGIS
#define glGetPixelTexGenParameterfvSGIS g_nngllGetPixelTexGenParameterfvSGIS
NN_GLL_API glPixelTexGenParameteriSGISType g_nngllPixelTexGenParameteriSGIS;
NN_GLL_API glPixelTexGenParameterivSGISType g_nngllPixelTexGenParameterivSGIS;
NN_GLL_API glPixelTexGenParameterfSGISType g_nngllPixelTexGenParameterfSGIS;
NN_GLL_API glPixelTexGenParameterfvSGISType g_nngllPixelTexGenParameterfvSGIS;
NN_GLL_API glGetPixelTexGenParameterivSGISType g_nngllGetPixelTexGenParameterivSGIS;
NN_GLL_API glGetPixelTexGenParameterfvSGISType g_nngllGetPixelTexGenParameterfvSGIS;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_pixel_texture();
#endif // GL_SGIS_pixel_texture

#if !defined(GL_SGIS_point_line_texgen)
#define GL_SGIS_point_line_texgen

#define GL_EYE_DISTANCE_TO_POINT_SGIS 0x81F0 // NOLINT
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0x81F1 // NOLINT
#define GL_EYE_DISTANCE_TO_LINE_SGIS 0x81F2 // NOLINT
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0x81F3 // NOLINT
#define GL_EYE_POINT_SGIS 0x81F4 // NOLINT
#define GL_OBJECT_POINT_SGIS 0x81F5 // NOLINT
#define GL_EYE_LINE_SGIS 0x81F6 // NOLINT
#define GL_OBJECT_LINE_SGIS 0x81F7 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_point_line_texgen();
#endif // GL_SGIS_point_line_texgen

#if !defined(GL_SGIS_point_parameters)
#define GL_SGIS_point_parameters

#define GL_POINT_SIZE_MIN_SGIS 0x8126 // NOLINT
#define GL_POINT_SIZE_MAX_SGIS 0x8127 // NOLINT
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128 // NOLINT
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterfSGISType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glPointParameterfvSGISType )( GLenum pname, const GLfloat *params );
#define glPointParameterfSGIS g_nngllPointParameterfSGIS
#define glPointParameterfvSGIS g_nngllPointParameterfvSGIS
NN_GLL_API glPointParameterfSGISType g_nngllPointParameterfSGIS;
NN_GLL_API glPointParameterfvSGISType g_nngllPointParameterfvSGIS;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_point_parameters();
#endif // GL_SGIS_point_parameters

#if !defined(GL_SGIS_sharpen_texture)
#define GL_SGIS_sharpen_texture

#define GL_LINEAR_SHARPEN_SGIS 0x80AD // NOLINT
#define GL_LINEAR_SHARPEN_ALPHA_SGIS 0x80AE // NOLINT
#define GL_LINEAR_SHARPEN_COLOR_SGIS 0x80AF // NOLINT
#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glSharpenTexFuncSGISType )( GLenum target, GLsizei n, const GLfloat *points );
typedef void ( NN_GLL_GL_APIENTRY *glGetSharpenTexFuncSGISType )( GLenum target, GLfloat *points );
#define glSharpenTexFuncSGIS g_nngllSharpenTexFuncSGIS
#define glGetSharpenTexFuncSGIS g_nngllGetSharpenTexFuncSGIS
NN_GLL_API glSharpenTexFuncSGISType g_nngllSharpenTexFuncSGIS;
NN_GLL_API glGetSharpenTexFuncSGISType g_nngllGetSharpenTexFuncSGIS;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_sharpen_texture();
#endif // GL_SGIS_sharpen_texture

#if !defined(GL_SGIS_texture4D)
#define GL_SGIS_texture4D

#define GL_PACK_SKIP_VOLUMES_SGIS 0x8130 // NOLINT
#define GL_PACK_IMAGE_DEPTH_SGIS 0x8131 // NOLINT
#define GL_UNPACK_SKIP_VOLUMES_SGIS 0x8132 // NOLINT
#define GL_UNPACK_IMAGE_DEPTH_SGIS 0x8133 // NOLINT
#define GL_TEXTURE_4D_SGIS 0x8134 // NOLINT
#define GL_PROXY_TEXTURE_4D_SGIS 0x8135 // NOLINT
#define GL_TEXTURE_4DSIZE_SGIS 0x8136 // NOLINT
#define GL_TEXTURE_WRAP_Q_SGIS 0x8137 // NOLINT
#define GL_MAX_4D_TEXTURE_SIZE_SGIS 0x8138 // NOLINT
#define GL_TEXTURE_4D_BINDING_SGIS 0x814F // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTexImage4DSGISType )( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels );
typedef void ( NN_GLL_GL_APIENTRY *glTexSubImage4DSGISType )( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels );
#define glTexImage4DSGIS g_nngllTexImage4DSGIS
#define glTexSubImage4DSGIS g_nngllTexSubImage4DSGIS
NN_GLL_API glTexImage4DSGISType g_nngllTexImage4DSGIS;
NN_GLL_API glTexSubImage4DSGISType g_nngllTexSubImage4DSGIS;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_texture4D();
#endif // GL_SGIS_texture4D

#if !defined(GL_SGIS_texture_border_clamp)
#define GL_SGIS_texture_border_clamp

#define GL_CLAMP_TO_BORDER_SGIS 0x812D // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_texture_border_clamp();
#endif // GL_SGIS_texture_border_clamp

#if !defined(GL_SGIS_texture_color_mask)
#define GL_SGIS_texture_color_mask

#define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glTextureColorMaskSGISType )( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
#define glTextureColorMaskSGIS g_nngllTextureColorMaskSGIS
NN_GLL_API glTextureColorMaskSGISType g_nngllTextureColorMaskSGIS;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_texture_color_mask();
#endif // GL_SGIS_texture_color_mask

#if !defined(GL_SGIS_texture_edge_clamp)
#define GL_SGIS_texture_edge_clamp

#define GL_CLAMP_TO_EDGE_SGIS 0x812F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_texture_edge_clamp();
#endif // GL_SGIS_texture_edge_clamp

#if !defined(GL_SGIS_texture_filter4)
#define GL_SGIS_texture_filter4

#define GL_FILTER4_SGIS 0x8146 // NOLINT
#define GL_TEXTURE_FILTER4_SIZE_SGIS 0x8147 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGetTexFilterFuncSGISType )( GLenum target, GLenum filter, GLfloat *weights );
typedef void ( NN_GLL_GL_APIENTRY *glTexFilterFuncSGISType )( GLenum target, GLenum filter, GLsizei n, const GLfloat *weights );
#define glGetTexFilterFuncSGIS g_nngllGetTexFilterFuncSGIS
#define glTexFilterFuncSGIS g_nngllTexFilterFuncSGIS
NN_GLL_API glGetTexFilterFuncSGISType g_nngllGetTexFilterFuncSGIS;
NN_GLL_API glTexFilterFuncSGISType g_nngllTexFilterFuncSGIS;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_texture_filter4();
#endif // GL_SGIS_texture_filter4

#if !defined(GL_SGIS_texture_lod)
#define GL_SGIS_texture_lod

#define GL_TEXTURE_MIN_LOD_SGIS 0x813A // NOLINT
#define GL_TEXTURE_MAX_LOD_SGIS 0x813B // NOLINT
#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C // NOLINT
#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_texture_lod();
#endif // GL_SGIS_texture_lod

#if !defined(GL_SGIS_texture_select)
#define GL_SGIS_texture_select

#define GL_DUAL_ALPHA4_SGIS 0x8110 // NOLINT
#define GL_DUAL_ALPHA8_SGIS 0x8111 // NOLINT
#define GL_DUAL_ALPHA12_SGIS 0x8112 // NOLINT
#define GL_DUAL_ALPHA16_SGIS 0x8113 // NOLINT
#define GL_DUAL_LUMINANCE4_SGIS 0x8114 // NOLINT
#define GL_DUAL_LUMINANCE8_SGIS 0x8115 // NOLINT
#define GL_DUAL_LUMINANCE12_SGIS 0x8116 // NOLINT
#define GL_DUAL_LUMINANCE16_SGIS 0x8117 // NOLINT
#define GL_DUAL_INTENSITY4_SGIS 0x8118 // NOLINT
#define GL_DUAL_INTENSITY8_SGIS 0x8119 // NOLINT
#define GL_DUAL_INTENSITY12_SGIS 0x811A // NOLINT
#define GL_DUAL_INTENSITY16_SGIS 0x811B // NOLINT
#define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0x811C // NOLINT
#define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0x811D // NOLINT
#define GL_QUAD_ALPHA4_SGIS 0x811E // NOLINT
#define GL_QUAD_ALPHA8_SGIS 0x811F // NOLINT
#define GL_QUAD_LUMINANCE4_SGIS 0x8120 // NOLINT
#define GL_QUAD_LUMINANCE8_SGIS 0x8121 // NOLINT
#define GL_QUAD_INTENSITY4_SGIS 0x8122 // NOLINT
#define GL_QUAD_INTENSITY8_SGIS 0x8123 // NOLINT
#define GL_DUAL_TEXTURE_SELECT_SGIS 0x8124 // NOLINT
#define GL_QUAD_TEXTURE_SELECT_SGIS 0x8125 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIS_texture_select();
#endif // GL_SGIS_texture_select

#if !defined(GL_SGIX_async)
#define GL_SGIX_async

#define GL_ASYNC_MARKER_SGIX 0x8329 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glAsyncMarkerSGIXType )( GLuint marker );
typedef GLint ( NN_GLL_GL_APIENTRY *glFinishAsyncSGIXType )( GLuint *markerp );
typedef GLint ( NN_GLL_GL_APIENTRY *glPollAsyncSGIXType )( GLuint *markerp );
typedef GLuint ( NN_GLL_GL_APIENTRY *glGenAsyncMarkersSGIXType )( GLsizei range );
typedef void ( NN_GLL_GL_APIENTRY *glDeleteAsyncMarkersSGIXType )( GLuint marker, GLsizei range );
typedef GLboolean ( NN_GLL_GL_APIENTRY *glIsAsyncMarkerSGIXType )( GLuint marker );
#define glAsyncMarkerSGIX g_nngllAsyncMarkerSGIX
#define glFinishAsyncSGIX g_nngllFinishAsyncSGIX
#define glPollAsyncSGIX g_nngllPollAsyncSGIX
#define glGenAsyncMarkersSGIX g_nngllGenAsyncMarkersSGIX
#define glDeleteAsyncMarkersSGIX g_nngllDeleteAsyncMarkersSGIX
#define glIsAsyncMarkerSGIX g_nngllIsAsyncMarkerSGIX
NN_GLL_API glAsyncMarkerSGIXType g_nngllAsyncMarkerSGIX;
NN_GLL_API glFinishAsyncSGIXType g_nngllFinishAsyncSGIX;
NN_GLL_API glPollAsyncSGIXType g_nngllPollAsyncSGIX;
NN_GLL_API glGenAsyncMarkersSGIXType g_nngllGenAsyncMarkersSGIX;
NN_GLL_API glDeleteAsyncMarkersSGIXType g_nngllDeleteAsyncMarkersSGIX;
NN_GLL_API glIsAsyncMarkerSGIXType g_nngllIsAsyncMarkerSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_async();
#endif // GL_SGIX_async

#if !defined(GL_SGIX_async_histogram)
#define GL_SGIX_async_histogram

#define GL_ASYNC_HISTOGRAM_SGIX 0x832C // NOLINT
#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_async_histogram();
#endif // GL_SGIX_async_histogram

#if !defined(GL_SGIX_async_pixel)
#define GL_SGIX_async_pixel

#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C // NOLINT
#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D // NOLINT
#define GL_ASYNC_READ_PIXELS_SGIX 0x835E // NOLINT
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F // NOLINT
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360 // NOLINT
#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_async_pixel();
#endif // GL_SGIX_async_pixel

#if !defined(GL_SGIX_blend_alpha_minmax)
#define GL_SGIX_blend_alpha_minmax

#define GL_ALPHA_MIN_SGIX 0x8320 // NOLINT
#define GL_ALPHA_MAX_SGIX 0x8321 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_blend_alpha_minmax();
#endif // GL_SGIX_blend_alpha_minmax

#if !defined(GL_SGIX_calligraphic_fragment)
#define GL_SGIX_calligraphic_fragment

#define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0x8183 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_calligraphic_fragment();
#endif // GL_SGIX_calligraphic_fragment

#if !defined(GL_SGIX_clipmap)
#define GL_SGIX_clipmap

#define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0x8170 // NOLINT
#define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0x8171 // NOLINT
#define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0x8172 // NOLINT
#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0x8173 // NOLINT
#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174 // NOLINT
#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175 // NOLINT
#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0x8176 // NOLINT
#define GL_MAX_CLIPMAP_DEPTH_SGIX 0x8177 // NOLINT
#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178 // NOLINT
#define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0x844D // NOLINT
#define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0x844E // NOLINT
#define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0x844F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_clipmap();
#endif // GL_SGIX_clipmap

#if !defined(GL_SGIX_convolution_accuracy)
#define GL_SGIX_convolution_accuracy

#define GL_CONVOLUTION_HINT_SGIX 0x8316 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_convolution_accuracy();
#endif // GL_SGIX_convolution_accuracy

#if !defined(GL_SGIX_depth_pass_instrument)
#define GL_SGIX_depth_pass_instrument

NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_depth_pass_instrument();
#endif // GL_SGIX_depth_pass_instrument

#if !defined(GL_SGIX_depth_texture)
#define GL_SGIX_depth_texture

#define GL_DEPTH_COMPONENT16_SGIX 0x81A5 // NOLINT
#define GL_DEPTH_COMPONENT24_SGIX 0x81A6 // NOLINT
#define GL_DEPTH_COMPONENT32_SGIX 0x81A7 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_depth_texture();
#endif // GL_SGIX_depth_texture

#if !defined(GL_SGIX_flush_raster)
#define GL_SGIX_flush_raster

typedef void ( NN_GLL_GL_APIENTRY *glFlushRasterSGIXType )(  );
#define glFlushRasterSGIX g_nngllFlushRasterSGIX
NN_GLL_API glFlushRasterSGIXType g_nngllFlushRasterSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_flush_raster();
#endif // GL_SGIX_flush_raster

#if !defined(GL_SGIX_fog_offset)
#define GL_SGIX_fog_offset

#define GL_FOG_OFFSET_SGIX 0x8198 // NOLINT
#define GL_FOG_OFFSET_VALUE_SGIX 0x8199 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_fog_offset();
#endif // GL_SGIX_fog_offset
// Incomplete extension

#if !defined(GL_SGIX_fragment_lighting)
#define GL_SGIX_fragment_lighting

#define GL_FRAGMENT_LIGHTING_SGIX 0x8400 // NOLINT
#define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0x8401 // NOLINT
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402 // NOLINT
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403 // NOLINT
#define GL_MAX_FRAGMENT_LIGHTS_SGIX 0x8404 // NOLINT
#define GL_MAX_ACTIVE_LIGHTS_SGIX 0x8405 // NOLINT
#define GL_CURRENT_RASTER_NORMAL_SGIX 0x8406 // NOLINT
#define GL_LIGHT_ENV_MODE_SGIX 0x8407 // NOLINT
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408 // NOLINT
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409 // NOLINT
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A // NOLINT
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B // NOLINT
#define GL_FRAGMENT_LIGHT0_SGIX 0x840C // NOLINT
#define GL_FRAGMENT_LIGHT1_SGIX 0x840D // NOLINT
#define GL_FRAGMENT_LIGHT2_SGIX 0x840E // NOLINT
#define GL_FRAGMENT_LIGHT3_SGIX 0x840F // NOLINT
#define GL_FRAGMENT_LIGHT4_SGIX 0x8410 // NOLINT
#define GL_FRAGMENT_LIGHT5_SGIX 0x8411 // NOLINT
#define GL_FRAGMENT_LIGHT6_SGIX 0x8412 // NOLINT
#define GL_FRAGMENT_LIGHT7_SGIX 0x8413 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFragmentColorMaterialSGIXType )( GLenum face, GLenum mode );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentLightfSGIXType )( GLenum light, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentLightfvSGIXType )( GLenum light, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentLightiSGIXType )( GLenum light, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentLightivSGIXType )( GLenum light, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentLightModelfSGIXType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentLightModelfvSGIXType )( GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentLightModeliSGIXType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentLightModelivSGIXType )( GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentMaterialfSGIXType )( GLenum face, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentMaterialfvSGIXType )( GLenum face, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentMaterialiSGIXType )( GLenum face, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glFragmentMaterialivSGIXType )( GLenum face, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetFragmentLightfvSGIXType )( GLenum light, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetFragmentLightivSGIXType )( GLenum light, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetFragmentMaterialfvSGIXType )( GLenum face, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetFragmentMaterialivSGIXType )( GLenum face, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glLightEnviSGIXType )( GLenum pname, GLint param );
#define glFragmentColorMaterialSGIX g_nngllFragmentColorMaterialSGIX
#define glFragmentLightfSGIX g_nngllFragmentLightfSGIX
#define glFragmentLightfvSGIX g_nngllFragmentLightfvSGIX
#define glFragmentLightiSGIX g_nngllFragmentLightiSGIX
#define glFragmentLightivSGIX g_nngllFragmentLightivSGIX
#define glFragmentLightModelfSGIX g_nngllFragmentLightModelfSGIX
#define glFragmentLightModelfvSGIX g_nngllFragmentLightModelfvSGIX
#define glFragmentLightModeliSGIX g_nngllFragmentLightModeliSGIX
#define glFragmentLightModelivSGIX g_nngllFragmentLightModelivSGIX
#define glFragmentMaterialfSGIX g_nngllFragmentMaterialfSGIX
#define glFragmentMaterialfvSGIX g_nngllFragmentMaterialfvSGIX
#define glFragmentMaterialiSGIX g_nngllFragmentMaterialiSGIX
#define glFragmentMaterialivSGIX g_nngllFragmentMaterialivSGIX
#define glGetFragmentLightfvSGIX g_nngllGetFragmentLightfvSGIX
#define glGetFragmentLightivSGIX g_nngllGetFragmentLightivSGIX
#define glGetFragmentMaterialfvSGIX g_nngllGetFragmentMaterialfvSGIX
#define glGetFragmentMaterialivSGIX g_nngllGetFragmentMaterialivSGIX
#define glLightEnviSGIX g_nngllLightEnviSGIX
NN_GLL_API glFragmentColorMaterialSGIXType g_nngllFragmentColorMaterialSGIX;
NN_GLL_API glFragmentLightfSGIXType g_nngllFragmentLightfSGIX;
NN_GLL_API glFragmentLightfvSGIXType g_nngllFragmentLightfvSGIX;
NN_GLL_API glFragmentLightiSGIXType g_nngllFragmentLightiSGIX;
NN_GLL_API glFragmentLightivSGIXType g_nngllFragmentLightivSGIX;
NN_GLL_API glFragmentLightModelfSGIXType g_nngllFragmentLightModelfSGIX;
NN_GLL_API glFragmentLightModelfvSGIXType g_nngllFragmentLightModelfvSGIX;
NN_GLL_API glFragmentLightModeliSGIXType g_nngllFragmentLightModeliSGIX;
NN_GLL_API glFragmentLightModelivSGIXType g_nngllFragmentLightModelivSGIX;
NN_GLL_API glFragmentMaterialfSGIXType g_nngllFragmentMaterialfSGIX;
NN_GLL_API glFragmentMaterialfvSGIXType g_nngllFragmentMaterialfvSGIX;
NN_GLL_API glFragmentMaterialiSGIXType g_nngllFragmentMaterialiSGIX;
NN_GLL_API glFragmentMaterialivSGIXType g_nngllFragmentMaterialivSGIX;
NN_GLL_API glGetFragmentLightfvSGIXType g_nngllGetFragmentLightfvSGIX;
NN_GLL_API glGetFragmentLightivSGIXType g_nngllGetFragmentLightivSGIX;
NN_GLL_API glGetFragmentMaterialfvSGIXType g_nngllGetFragmentMaterialfvSGIX;
NN_GLL_API glGetFragmentMaterialivSGIXType g_nngllGetFragmentMaterialivSGIX;
NN_GLL_API glLightEnviSGIXType g_nngllLightEnviSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_fragment_lighting();
#endif // GL_SGIX_fragment_lighting

#if !defined(GL_SGIX_framezoom)
#define GL_SGIX_framezoom

#define GL_FRAMEZOOM_SGIX 0x818B // NOLINT
#define GL_FRAMEZOOM_FACTOR_SGIX 0x818C // NOLINT
#define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0x818D // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFrameZoomSGIXType )( GLint factor );
#define glFrameZoomSGIX g_nngllFrameZoomSGIX
NN_GLL_API glFrameZoomSGIXType g_nngllFrameZoomSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_framezoom();
#endif // GL_SGIX_framezoom

#if !defined(GL_SGIX_igloo_interface)
#define GL_SGIX_igloo_interface

typedef void ( NN_GLL_GL_APIENTRY *glIglooInterfaceSGIXType )( GLenum pname, const void *params );
#define glIglooInterfaceSGIX g_nngllIglooInterfaceSGIX
NN_GLL_API glIglooInterfaceSGIXType g_nngllIglooInterfaceSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_igloo_interface();
#endif // GL_SGIX_igloo_interface

#if !defined(GL_SGIX_instruments)
#define GL_SGIX_instruments

#define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180 // NOLINT
#define GL_INSTRUMENT_MEASUREMENTS_SGIX 0x8181 // NOLINT
typedef GLint ( NN_GLL_GL_APIENTRY *glGetInstrumentsSGIXType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glInstrumentsBufferSGIXType )( GLsizei size, GLint *buffer );
typedef GLint ( NN_GLL_GL_APIENTRY *glPollInstrumentsSGIXType )( GLint *marker_p );
typedef void ( NN_GLL_GL_APIENTRY *glReadInstrumentsSGIXType )( GLint marker );
typedef void ( NN_GLL_GL_APIENTRY *glStartInstrumentsSGIXType )(  );
typedef void ( NN_GLL_GL_APIENTRY *glStopInstrumentsSGIXType )( GLint marker );
#define glGetInstrumentsSGIX g_nngllGetInstrumentsSGIX
#define glInstrumentsBufferSGIX g_nngllInstrumentsBufferSGIX
#define glPollInstrumentsSGIX g_nngllPollInstrumentsSGIX
#define glReadInstrumentsSGIX g_nngllReadInstrumentsSGIX
#define glStartInstrumentsSGIX g_nngllStartInstrumentsSGIX
#define glStopInstrumentsSGIX g_nngllStopInstrumentsSGIX
NN_GLL_API glGetInstrumentsSGIXType g_nngllGetInstrumentsSGIX;
NN_GLL_API glInstrumentsBufferSGIXType g_nngllInstrumentsBufferSGIX;
NN_GLL_API glPollInstrumentsSGIXType g_nngllPollInstrumentsSGIX;
NN_GLL_API glReadInstrumentsSGIXType g_nngllReadInstrumentsSGIX;
NN_GLL_API glStartInstrumentsSGIXType g_nngllStartInstrumentsSGIX;
NN_GLL_API glStopInstrumentsSGIXType g_nngllStopInstrumentsSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_instruments();
#endif // GL_SGIX_instruments

#if !defined(GL_SGIX_interlace)
#define GL_SGIX_interlace

#define GL_INTERLACE_SGIX 0x8094 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_interlace();
#endif // GL_SGIX_interlace

#if !defined(GL_SGIX_ir_instrument1)
#define GL_SGIX_ir_instrument1

#define GL_IR_INSTRUMENT1_SGIX 0x817F // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_ir_instrument1();
#endif // GL_SGIX_ir_instrument1

#if !defined(GL_SGIX_list_priority)
#define GL_SGIX_list_priority

#define GL_LIST_PRIORITY_SGIX 0x8182 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGetListParameterfvSGIXType )( GLuint list, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetListParameterivSGIXType )( GLuint list, GLenum pname, GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glListParameterfSGIXType )( GLuint list, GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glListParameterfvSGIXType )( GLuint list, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glListParameteriSGIXType )( GLuint list, GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glListParameterivSGIXType )( GLuint list, GLenum pname, const GLint *params );
#define glGetListParameterfvSGIX g_nngllGetListParameterfvSGIX
#define glGetListParameterivSGIX g_nngllGetListParameterivSGIX
#define glListParameterfSGIX g_nngllListParameterfSGIX
#define glListParameterfvSGIX g_nngllListParameterfvSGIX
#define glListParameteriSGIX g_nngllListParameteriSGIX
#define glListParameterivSGIX g_nngllListParameterivSGIX
NN_GLL_API glGetListParameterfvSGIXType g_nngllGetListParameterfvSGIX;
NN_GLL_API glGetListParameterivSGIXType g_nngllGetListParameterivSGIX;
NN_GLL_API glListParameterfSGIXType g_nngllListParameterfSGIX;
NN_GLL_API glListParameterfvSGIXType g_nngllListParameterfvSGIX;
NN_GLL_API glListParameteriSGIXType g_nngllListParameteriSGIX;
NN_GLL_API glListParameterivSGIXType g_nngllListParameterivSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_list_priority();
#endif // GL_SGIX_list_priority

#if !defined(GL_SGIX_pixel_texture)
#define GL_SGIX_pixel_texture

#define GL_PIXEL_TEX_GEN_SGIX 0x8139 // NOLINT
#define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glPixelTexGenSGIXType )( GLenum mode );
#define glPixelTexGenSGIX g_nngllPixelTexGenSGIX
NN_GLL_API glPixelTexGenSGIXType g_nngllPixelTexGenSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_pixel_texture();
#endif // GL_SGIX_pixel_texture

#if !defined(GL_SGIX_pixel_tiles)
#define GL_SGIX_pixel_tiles

#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E // NOLINT
#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F // NOLINT
#define GL_PIXEL_TILE_WIDTH_SGIX 0x8140 // NOLINT
#define GL_PIXEL_TILE_HEIGHT_SGIX 0x8141 // NOLINT
#define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0x8142 // NOLINT
#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0x8143 // NOLINT
#define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0x8144 // NOLINT
#define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0x8145 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_pixel_tiles();
#endif // GL_SGIX_pixel_tiles

#if !defined(GL_SGIX_polynomial_ffd)
#define GL_SGIX_polynomial_ffd

#define GL_TEXTURE_DEFORMATION_BIT_SGIX 0x00000001 // NOLINT
#define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0x00000002 // NOLINT
#define GL_GEOMETRY_DEFORMATION_SGIX 0x8194 // NOLINT
#define GL_TEXTURE_DEFORMATION_SGIX 0x8195 // NOLINT
#define GL_DEFORMATIONS_MASK_SGIX 0x8196 // NOLINT
#define GL_MAX_DEFORMATION_ORDER_SGIX 0x8197 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDeformationMap3dSGIXType )( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points );
typedef void ( NN_GLL_GL_APIENTRY *glDeformationMap3fSGIXType )( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points );
typedef void ( NN_GLL_GL_APIENTRY *glDeformSGIXType )( GLbitfield mask );
typedef void ( NN_GLL_GL_APIENTRY *glLoadIdentityDeformationMapSGIXType )( GLbitfield mask );
#define glDeformationMap3dSGIX g_nngllDeformationMap3dSGIX
#define glDeformationMap3fSGIX g_nngllDeformationMap3fSGIX
#define glDeformSGIX g_nngllDeformSGIX
#define glLoadIdentityDeformationMapSGIX g_nngllLoadIdentityDeformationMapSGIX
NN_GLL_API glDeformationMap3dSGIXType g_nngllDeformationMap3dSGIX;
NN_GLL_API glDeformationMap3fSGIXType g_nngllDeformationMap3fSGIX;
NN_GLL_API glDeformSGIXType g_nngllDeformSGIX;
NN_GLL_API glLoadIdentityDeformationMapSGIXType g_nngllLoadIdentityDeformationMapSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_polynomial_ffd();
#endif // GL_SGIX_polynomial_ffd

#if !defined(GL_SGIX_reference_plane)
#define GL_SGIX_reference_plane

#define GL_REFERENCE_PLANE_SGIX 0x817D // NOLINT
#define GL_REFERENCE_PLANE_EQUATION_SGIX 0x817E // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glReferencePlaneSGIXType )( const GLdouble *equation );
#define glReferencePlaneSGIX g_nngllReferencePlaneSGIX
NN_GLL_API glReferencePlaneSGIXType g_nngllReferencePlaneSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_reference_plane();
#endif // GL_SGIX_reference_plane

#if !defined(GL_SGIX_resample)
#define GL_SGIX_resample

// Formerly 0x842C in SGI specfile
#define GL_PACK_RESAMPLE_SGIX 0x842E // NOLINT
// Formerly 0x842D in SGI specfile
#define GL_UNPACK_RESAMPLE_SGIX 0x842F // NOLINT
// Formerly 0x842E in SGI specfile
#define GL_RESAMPLE_REPLICATE_SGIX 0x8433 // NOLINT
// Formerly 0x842F in SGI specfile
#define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434 // NOLINT
// Formerly 0x8430 in SGI specfile
#define GL_RESAMPLE_DECIMATE_SGIX 0x8430 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_resample();
#endif // GL_SGIX_resample

#if !defined(GL_SGIX_scalebias_hint)
#define GL_SGIX_scalebias_hint

#define GL_SCALEBIAS_HINT_SGIX 0x8322 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_scalebias_hint();
#endif // GL_SGIX_scalebias_hint

#if !defined(GL_SGIX_shadow)
#define GL_SGIX_shadow

#define GL_TEXTURE_COMPARE_SGIX 0x819A // NOLINT
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B // NOLINT
#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C // NOLINT
#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_shadow();
#endif // GL_SGIX_shadow

#if !defined(GL_SGIX_shadow_ambient)
#define GL_SGIX_shadow_ambient

#define GL_SHADOW_AMBIENT_SGIX 0x80BF // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_shadow_ambient();
#endif // GL_SGIX_shadow_ambient

#if !defined(GL_SGIX_sprite)
#define GL_SGIX_sprite

#define GL_SPRITE_SGIX 0x8148 // NOLINT
#define GL_SPRITE_MODE_SGIX 0x8149 // NOLINT
#define GL_SPRITE_AXIS_SGIX 0x814A // NOLINT
#define GL_SPRITE_TRANSLATION_SGIX 0x814B // NOLINT
#define GL_SPRITE_AXIAL_SGIX 0x814C // NOLINT
#define GL_SPRITE_OBJECT_ALIGNED_SGIX 0x814D // NOLINT
#define GL_SPRITE_EYE_ALIGNED_SGIX 0x814E // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glSpriteParameterfSGIXType )( GLenum pname, GLfloat param );
typedef void ( NN_GLL_GL_APIENTRY *glSpriteParameterfvSGIXType )( GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glSpriteParameteriSGIXType )( GLenum pname, GLint param );
typedef void ( NN_GLL_GL_APIENTRY *glSpriteParameterivSGIXType )( GLenum pname, const GLint *params );
#define glSpriteParameterfSGIX g_nngllSpriteParameterfSGIX
#define glSpriteParameterfvSGIX g_nngllSpriteParameterfvSGIX
#define glSpriteParameteriSGIX g_nngllSpriteParameteriSGIX
#define glSpriteParameterivSGIX g_nngllSpriteParameterivSGIX
NN_GLL_API glSpriteParameterfSGIXType g_nngllSpriteParameterfSGIX;
NN_GLL_API glSpriteParameterfvSGIXType g_nngllSpriteParameterfvSGIX;
NN_GLL_API glSpriteParameteriSGIXType g_nngllSpriteParameteriSGIX;
NN_GLL_API glSpriteParameterivSGIXType g_nngllSpriteParameterivSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_sprite();
#endif // GL_SGIX_sprite

#if !defined(GL_SGIX_subsample)
#define GL_SGIX_subsample

#define GL_PACK_SUBSAMPLE_RATE_SGIX 0x85A0 // NOLINT
#define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0x85A1 // NOLINT
#define GL_PIXEL_SUBSAMPLE_4444_SGIX 0x85A2 // NOLINT
#define GL_PIXEL_SUBSAMPLE_2424_SGIX 0x85A3 // NOLINT
#define GL_PIXEL_SUBSAMPLE_4242_SGIX 0x85A4 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_subsample();
#endif // GL_SGIX_subsample

#if !defined(GL_SGIX_tag_sample_buffer)
#define GL_SGIX_tag_sample_buffer

typedef void ( NN_GLL_GL_APIENTRY *glTagSampleBufferSGIXType )(  );
#define glTagSampleBufferSGIX g_nngllTagSampleBufferSGIX
NN_GLL_API glTagSampleBufferSGIXType g_nngllTagSampleBufferSGIX;
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_tag_sample_buffer();
#endif // GL_SGIX_tag_sample_buffer

#if !defined(GL_SGIX_texture_add_env)
#define GL_SGIX_texture_add_env

#define GL_TEXTURE_ENV_BIAS_SGIX 0x80BE // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_texture_add_env();
#endif // GL_SGIX_texture_add_env

#if !defined(GL_SGIX_texture_coordinate_clamp)
#define GL_SGIX_texture_coordinate_clamp

#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369 // NOLINT
#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A // NOLINT
#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_texture_coordinate_clamp();
#endif // GL_SGIX_texture_coordinate_clamp

#if !defined(GL_SGIX_texture_lod_bias)
#define GL_SGIX_texture_lod_bias

#define GL_TEXTURE_LOD_BIAS_S_SGIX 0x818E // NOLINT
#define GL_TEXTURE_LOD_BIAS_T_SGIX 0x818F // NOLINT
#define GL_TEXTURE_LOD_BIAS_R_SGIX 0x8190 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_texture_lod_bias();
#endif // GL_SGIX_texture_lod_bias

#if !defined(GL_SGIX_texture_multi_buffer)
#define GL_SGIX_texture_multi_buffer

#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_texture_multi_buffer();
#endif // GL_SGIX_texture_multi_buffer

#if !defined(GL_SGIX_texture_scale_bias)
#define GL_SGIX_texture_scale_bias

#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179 // NOLINT
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A // NOLINT
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B // NOLINT
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_texture_scale_bias();
#endif // GL_SGIX_texture_scale_bias

#if !defined(GL_SGIX_vertex_preclip)
#define GL_SGIX_vertex_preclip

#define GL_VERTEX_PRECLIP_SGIX 0x83EE // NOLINT
#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_vertex_preclip();
#endif // GL_SGIX_vertex_preclip

#if !defined(GL_SGIX_ycrcb)
#define GL_SGIX_ycrcb

#define GL_YCRCB_422_SGIX 0x81BB // NOLINT
#define GL_YCRCB_444_SGIX 0x81BC // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_ycrcb();
#endif // GL_SGIX_ycrcb

#if !defined(GL_SGIX_ycrcb_subsample)
#define GL_SGIX_ycrcb_subsample

NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_ycrcb_subsample();
#endif // GL_SGIX_ycrcb_subsample

#if !defined(GL_SGIX_ycrcba)
#define GL_SGIX_ycrcba

#define GL_YCRCB_SGIX 0x8318 // NOLINT
#define GL_YCRCBA_SGIX 0x8319 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGIX_ycrcba();
#endif // GL_SGIX_ycrcba

#if !defined(GL_SGI_color_matrix)
#define GL_SGI_color_matrix

#define GL_COLOR_MATRIX_SGI 0x80B1 // NOLINT
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2 // NOLINT
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3 // NOLINT
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4 // NOLINT
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5 // NOLINT
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6 // NOLINT
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7 // NOLINT
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8 // NOLINT
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9 // NOLINT
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA // NOLINT
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGI_color_matrix();
#endif // GL_SGI_color_matrix

#if !defined(GL_SGI_color_table)
#define GL_SGI_color_table

#define GL_COLOR_TABLE_SGI 0x80D0 // NOLINT
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1 // NOLINT
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2 // NOLINT
#define GL_PROXY_COLOR_TABLE_SGI 0x80D3 // NOLINT
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4 // NOLINT
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5 // NOLINT
#define GL_COLOR_TABLE_SCALE_SGI 0x80D6 // NOLINT
#define GL_COLOR_TABLE_BIAS_SGI 0x80D7 // NOLINT
#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8 // NOLINT
#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9 // NOLINT
#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA // NOLINT
#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB // NOLINT
#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC // NOLINT
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD // NOLINT
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE // NOLINT
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glColorTableSGIType )( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table );
typedef void ( NN_GLL_GL_APIENTRY *glColorTableParameterfvSGIType )( GLenum target, GLenum pname, const GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glColorTableParameterivSGIType )( GLenum target, GLenum pname, const GLint *params );
typedef void ( NN_GLL_GL_APIENTRY *glCopyColorTableSGIType )( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
typedef void ( NN_GLL_GL_APIENTRY *glGetColorTableSGIType )( GLenum target, GLenum format, GLenum type, void *table );
typedef void ( NN_GLL_GL_APIENTRY *glGetColorTableParameterfvSGIType )( GLenum target, GLenum pname, GLfloat *params );
typedef void ( NN_GLL_GL_APIENTRY *glGetColorTableParameterivSGIType )( GLenum target, GLenum pname, GLint *params );
#define glColorTableSGI g_nngllColorTableSGI
#define glColorTableParameterfvSGI g_nngllColorTableParameterfvSGI
#define glColorTableParameterivSGI g_nngllColorTableParameterivSGI
#define glCopyColorTableSGI g_nngllCopyColorTableSGI
#define glGetColorTableSGI g_nngllGetColorTableSGI
#define glGetColorTableParameterfvSGI g_nngllGetColorTableParameterfvSGI
#define glGetColorTableParameterivSGI g_nngllGetColorTableParameterivSGI
NN_GLL_API glColorTableSGIType g_nngllColorTableSGI;
NN_GLL_API glColorTableParameterfvSGIType g_nngllColorTableParameterfvSGI;
NN_GLL_API glColorTableParameterivSGIType g_nngllColorTableParameterivSGI;
NN_GLL_API glCopyColorTableSGIType g_nngllCopyColorTableSGI;
NN_GLL_API glGetColorTableSGIType g_nngllGetColorTableSGI;
NN_GLL_API glGetColorTableParameterfvSGIType g_nngllGetColorTableParameterfvSGI;
NN_GLL_API glGetColorTableParameterivSGIType g_nngllGetColorTableParameterivSGI;
NN_GLL_API GLboolean nngllIsSupported_GL_SGI_color_table();
#endif // GL_SGI_color_table

#if !defined(GL_SGI_texture_color_table)
#define GL_SGI_texture_color_table

#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC // NOLINT
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SGI_texture_color_table();
#endif // GL_SGI_texture_color_table

#if !defined(GL_SUNX_constant_data)
#define GL_SUNX_constant_data

#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5 // NOLINT
#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glFinishTextureSUNXType )(  );
#define glFinishTextureSUNX g_nngllFinishTextureSUNX
NN_GLL_API glFinishTextureSUNXType g_nngllFinishTextureSUNX;
NN_GLL_API GLboolean nngllIsSupported_GL_SUNX_constant_data();
#endif // GL_SUNX_constant_data

#if !defined(GL_SUN_convolution_border_modes)
#define GL_SUN_convolution_border_modes

#define GL_WRAP_BORDER_SUN 0x81D4 // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SUN_convolution_border_modes();
#endif // GL_SUN_convolution_border_modes

#if !defined(GL_SUN_global_alpha)
#define GL_SUN_global_alpha

#define GL_GLOBAL_ALPHA_SUN 0x81D9 // NOLINT
#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glGlobalAlphaFactorbSUNType )( GLbyte factor );
typedef void ( NN_GLL_GL_APIENTRY *glGlobalAlphaFactorsSUNType )( GLshort factor );
typedef void ( NN_GLL_GL_APIENTRY *glGlobalAlphaFactoriSUNType )( GLint factor );
typedef void ( NN_GLL_GL_APIENTRY *glGlobalAlphaFactorfSUNType )( GLfloat factor );
typedef void ( NN_GLL_GL_APIENTRY *glGlobalAlphaFactordSUNType )( GLdouble factor );
typedef void ( NN_GLL_GL_APIENTRY *glGlobalAlphaFactorubSUNType )( GLubyte factor );
typedef void ( NN_GLL_GL_APIENTRY *glGlobalAlphaFactorusSUNType )( GLushort factor );
typedef void ( NN_GLL_GL_APIENTRY *glGlobalAlphaFactoruiSUNType )( GLuint factor );
#define glGlobalAlphaFactorbSUN g_nngllGlobalAlphaFactorbSUN
#define glGlobalAlphaFactorsSUN g_nngllGlobalAlphaFactorsSUN
#define glGlobalAlphaFactoriSUN g_nngllGlobalAlphaFactoriSUN
#define glGlobalAlphaFactorfSUN g_nngllGlobalAlphaFactorfSUN
#define glGlobalAlphaFactordSUN g_nngllGlobalAlphaFactordSUN
#define glGlobalAlphaFactorubSUN g_nngllGlobalAlphaFactorubSUN
#define glGlobalAlphaFactorusSUN g_nngllGlobalAlphaFactorusSUN
#define glGlobalAlphaFactoruiSUN g_nngllGlobalAlphaFactoruiSUN
NN_GLL_API glGlobalAlphaFactorbSUNType g_nngllGlobalAlphaFactorbSUN;
NN_GLL_API glGlobalAlphaFactorsSUNType g_nngllGlobalAlphaFactorsSUN;
NN_GLL_API glGlobalAlphaFactoriSUNType g_nngllGlobalAlphaFactoriSUN;
NN_GLL_API glGlobalAlphaFactorfSUNType g_nngllGlobalAlphaFactorfSUN;
NN_GLL_API glGlobalAlphaFactordSUNType g_nngllGlobalAlphaFactordSUN;
NN_GLL_API glGlobalAlphaFactorubSUNType g_nngllGlobalAlphaFactorubSUN;
NN_GLL_API glGlobalAlphaFactorusSUNType g_nngllGlobalAlphaFactorusSUN;
NN_GLL_API glGlobalAlphaFactoruiSUNType g_nngllGlobalAlphaFactoruiSUN;
NN_GLL_API GLboolean nngllIsSupported_GL_SUN_global_alpha();
#endif // GL_SUN_global_alpha

#if !defined(GL_SUN_mesh_array)
#define GL_SUN_mesh_array

#define GL_QUAD_MESH_SUN 0x8614 // NOLINT
#define GL_TRIANGLE_MESH_SUN 0x8615 // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glDrawMeshArraysSUNType )( GLenum mode, GLint first, GLsizei count, GLsizei width );
#define glDrawMeshArraysSUN g_nngllDrawMeshArraysSUN
NN_GLL_API glDrawMeshArraysSUNType g_nngllDrawMeshArraysSUN;
NN_GLL_API GLboolean nngllIsSupported_GL_SUN_mesh_array();
#endif // GL_SUN_mesh_array

#if !defined(GL_SUN_slice_accum)
#define GL_SUN_slice_accum

#define GL_SLICE_ACCUM_SUN 0x85CC // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_SUN_slice_accum();
#endif // GL_SUN_slice_accum

#if !defined(GL_SUN_triangle_list)
#define GL_SUN_triangle_list

#define GL_RESTART_SUN 0x0001 // NOLINT
#define GL_REPLACE_MIDDLE_SUN 0x0002 // NOLINT
#define GL_REPLACE_OLDEST_SUN 0x0003 // NOLINT
#define GL_TRIANGLE_LIST_SUN 0x81D7 // NOLINT
#define GL_REPLACEMENT_CODE_SUN 0x81D8 // NOLINT
#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0 // NOLINT
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1 // NOLINT
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2 // NOLINT
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3 // NOLINT
#define GL_R1UI_V3F_SUN 0x85C4 // NOLINT
#define GL_R1UI_C4UB_V3F_SUN 0x85C5 // NOLINT
#define GL_R1UI_C3F_V3F_SUN 0x85C6 // NOLINT
#define GL_R1UI_N3F_V3F_SUN 0x85C7 // NOLINT
#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8 // NOLINT
#define GL_R1UI_T2F_V3F_SUN 0x85C9 // NOLINT
#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA // NOLINT
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB // NOLINT
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiSUNType )( GLuint code );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeusSUNType )( GLushort code );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeubSUNType )( GLubyte code );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuivSUNType )( const GLuint *code );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeusvSUNType )( const GLushort *code );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeubvSUNType )( const GLubyte *code );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodePointerSUNType )( GLenum type, GLsizei stride, const void **pointer );
#define glReplacementCodeuiSUN g_nngllReplacementCodeuiSUN
#define glReplacementCodeusSUN g_nngllReplacementCodeusSUN
#define glReplacementCodeubSUN g_nngllReplacementCodeubSUN
#define glReplacementCodeuivSUN g_nngllReplacementCodeuivSUN
#define glReplacementCodeusvSUN g_nngllReplacementCodeusvSUN
#define glReplacementCodeubvSUN g_nngllReplacementCodeubvSUN
#define glReplacementCodePointerSUN g_nngllReplacementCodePointerSUN
NN_GLL_API glReplacementCodeuiSUNType g_nngllReplacementCodeuiSUN;
NN_GLL_API glReplacementCodeusSUNType g_nngllReplacementCodeusSUN;
NN_GLL_API glReplacementCodeubSUNType g_nngllReplacementCodeubSUN;
NN_GLL_API glReplacementCodeuivSUNType g_nngllReplacementCodeuivSUN;
NN_GLL_API glReplacementCodeusvSUNType g_nngllReplacementCodeusvSUN;
NN_GLL_API glReplacementCodeubvSUNType g_nngllReplacementCodeubvSUN;
NN_GLL_API glReplacementCodePointerSUNType g_nngllReplacementCodePointerSUN;
NN_GLL_API GLboolean nngllIsSupported_GL_SUN_triangle_list();
#endif // GL_SUN_triangle_list

#if !defined(GL_SUN_vertex)
#define GL_SUN_vertex

typedef void ( NN_GLL_GL_APIENTRY *glColor4ubVertex2fSUNType )( GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y );
typedef void ( NN_GLL_GL_APIENTRY *glColor4ubVertex2fvSUNType )( const GLubyte *c, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor4ubVertex3fSUNType )( GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glColor4ubVertex3fvSUNType )( const GLubyte *c, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor3fVertex3fSUNType )( GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glColor3fVertex3fvSUNType )( const GLfloat *c, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3fVertex3fSUNType )( GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glNormal3fVertex3fvSUNType )( const GLfloat *n, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glColor4fNormal3fVertex3fSUNType )( GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glColor4fNormal3fVertex3fvSUNType )( const GLfloat *c, const GLfloat *n, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fVertex3fSUNType )( GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fVertex3fvSUNType )( const GLfloat *tc, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4fVertex4fSUNType )( GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4fVertex4fvSUNType )( const GLfloat *tc, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fColor4ubVertex3fSUNType )( GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fColor4ubVertex3fvSUNType )( const GLfloat *tc, const GLubyte *c, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fColor3fVertex3fSUNType )( GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fColor3fVertex3fvSUNType )( const GLfloat *tc, const GLfloat *c, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fNormal3fVertex3fSUNType )( GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fNormal3fVertex3fvSUNType )( const GLfloat *tc, const GLfloat *n, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fColor4fNormal3fVertex3fSUNType )( GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord2fColor4fNormal3fVertex3fvSUNType )( const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4fColor4fNormal3fVertex4fSUNType )( GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
typedef void ( NN_GLL_GL_APIENTRY *glTexCoord4fColor4fNormal3fVertex4fvSUNType )( const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiVertex3fSUNType )( GLuint rc, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiVertex3fvSUNType )( const GLuint *rc, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiColor4ubVertex3fSUNType )( GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiColor4ubVertex3fvSUNType )( const GLuint *rc, const GLubyte *c, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiColor3fVertex3fSUNType )( GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiColor3fVertex3fvSUNType )( const GLuint *rc, const GLfloat *c, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiNormal3fVertex3fSUNType )( GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiNormal3fVertex3fvSUNType )( const GLuint *rc, const GLfloat *n, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiColor4fNormal3fVertex3fSUNType )( GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiColor4fNormal3fVertex3fvSUNType )( const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiTexCoord2fVertex3fSUNType )( GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiTexCoord2fVertex3fvSUNType )( const GLuint *rc, const GLfloat *tc, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiTexCoord2fNormal3fVertex3fSUNType )( GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNType )( const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNType )( GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z );
typedef void ( NN_GLL_GL_APIENTRY *glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNType )( const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v );
#define glColor4ubVertex2fSUN g_nngllColor4ubVertex2fSUN
#define glColor4ubVertex2fvSUN g_nngllColor4ubVertex2fvSUN
#define glColor4ubVertex3fSUN g_nngllColor4ubVertex3fSUN
#define glColor4ubVertex3fvSUN g_nngllColor4ubVertex3fvSUN
#define glColor3fVertex3fSUN g_nngllColor3fVertex3fSUN
#define glColor3fVertex3fvSUN g_nngllColor3fVertex3fvSUN
#define glNormal3fVertex3fSUN g_nngllNormal3fVertex3fSUN
#define glNormal3fVertex3fvSUN g_nngllNormal3fVertex3fvSUN
#define glColor4fNormal3fVertex3fSUN g_nngllColor4fNormal3fVertex3fSUN
#define glColor4fNormal3fVertex3fvSUN g_nngllColor4fNormal3fVertex3fvSUN
#define glTexCoord2fVertex3fSUN g_nngllTexCoord2fVertex3fSUN
#define glTexCoord2fVertex3fvSUN g_nngllTexCoord2fVertex3fvSUN
#define glTexCoord4fVertex4fSUN g_nngllTexCoord4fVertex4fSUN
#define glTexCoord4fVertex4fvSUN g_nngllTexCoord4fVertex4fvSUN
#define glTexCoord2fColor4ubVertex3fSUN g_nngllTexCoord2fColor4ubVertex3fSUN
#define glTexCoord2fColor4ubVertex3fvSUN g_nngllTexCoord2fColor4ubVertex3fvSUN
#define glTexCoord2fColor3fVertex3fSUN g_nngllTexCoord2fColor3fVertex3fSUN
#define glTexCoord2fColor3fVertex3fvSUN g_nngllTexCoord2fColor3fVertex3fvSUN
#define glTexCoord2fNormal3fVertex3fSUN g_nngllTexCoord2fNormal3fVertex3fSUN
#define glTexCoord2fNormal3fVertex3fvSUN g_nngllTexCoord2fNormal3fVertex3fvSUN
#define glTexCoord2fColor4fNormal3fVertex3fSUN g_nngllTexCoord2fColor4fNormal3fVertex3fSUN
#define glTexCoord2fColor4fNormal3fVertex3fvSUN g_nngllTexCoord2fColor4fNormal3fVertex3fvSUN
#define glTexCoord4fColor4fNormal3fVertex4fSUN g_nngllTexCoord4fColor4fNormal3fVertex4fSUN
#define glTexCoord4fColor4fNormal3fVertex4fvSUN g_nngllTexCoord4fColor4fNormal3fVertex4fvSUN
#define glReplacementCodeuiVertex3fSUN g_nngllReplacementCodeuiVertex3fSUN
#define glReplacementCodeuiVertex3fvSUN g_nngllReplacementCodeuiVertex3fvSUN
#define glReplacementCodeuiColor4ubVertex3fSUN g_nngllReplacementCodeuiColor4ubVertex3fSUN
#define glReplacementCodeuiColor4ubVertex3fvSUN g_nngllReplacementCodeuiColor4ubVertex3fvSUN
#define glReplacementCodeuiColor3fVertex3fSUN g_nngllReplacementCodeuiColor3fVertex3fSUN
#define glReplacementCodeuiColor3fVertex3fvSUN g_nngllReplacementCodeuiColor3fVertex3fvSUN
#define glReplacementCodeuiNormal3fVertex3fSUN g_nngllReplacementCodeuiNormal3fVertex3fSUN
#define glReplacementCodeuiNormal3fVertex3fvSUN g_nngllReplacementCodeuiNormal3fVertex3fvSUN
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN g_nngllReplacementCodeuiColor4fNormal3fVertex3fSUN
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN g_nngllReplacementCodeuiColor4fNormal3fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fVertex3fSUN g_nngllReplacementCodeuiTexCoord2fVertex3fSUN
#define glReplacementCodeuiTexCoord2fVertex3fvSUN g_nngllReplacementCodeuiTexCoord2fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN g_nngllReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN g_nngllReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN g_nngllReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN g_nngllReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
NN_GLL_API glColor4ubVertex2fSUNType g_nngllColor4ubVertex2fSUN;
NN_GLL_API glColor4ubVertex2fvSUNType g_nngllColor4ubVertex2fvSUN;
NN_GLL_API glColor4ubVertex3fSUNType g_nngllColor4ubVertex3fSUN;
NN_GLL_API glColor4ubVertex3fvSUNType g_nngllColor4ubVertex3fvSUN;
NN_GLL_API glColor3fVertex3fSUNType g_nngllColor3fVertex3fSUN;
NN_GLL_API glColor3fVertex3fvSUNType g_nngllColor3fVertex3fvSUN;
NN_GLL_API glNormal3fVertex3fSUNType g_nngllNormal3fVertex3fSUN;
NN_GLL_API glNormal3fVertex3fvSUNType g_nngllNormal3fVertex3fvSUN;
NN_GLL_API glColor4fNormal3fVertex3fSUNType g_nngllColor4fNormal3fVertex3fSUN;
NN_GLL_API glColor4fNormal3fVertex3fvSUNType g_nngllColor4fNormal3fVertex3fvSUN;
NN_GLL_API glTexCoord2fVertex3fSUNType g_nngllTexCoord2fVertex3fSUN;
NN_GLL_API glTexCoord2fVertex3fvSUNType g_nngllTexCoord2fVertex3fvSUN;
NN_GLL_API glTexCoord4fVertex4fSUNType g_nngllTexCoord4fVertex4fSUN;
NN_GLL_API glTexCoord4fVertex4fvSUNType g_nngllTexCoord4fVertex4fvSUN;
NN_GLL_API glTexCoord2fColor4ubVertex3fSUNType g_nngllTexCoord2fColor4ubVertex3fSUN;
NN_GLL_API glTexCoord2fColor4ubVertex3fvSUNType g_nngllTexCoord2fColor4ubVertex3fvSUN;
NN_GLL_API glTexCoord2fColor3fVertex3fSUNType g_nngllTexCoord2fColor3fVertex3fSUN;
NN_GLL_API glTexCoord2fColor3fVertex3fvSUNType g_nngllTexCoord2fColor3fVertex3fvSUN;
NN_GLL_API glTexCoord2fNormal3fVertex3fSUNType g_nngllTexCoord2fNormal3fVertex3fSUN;
NN_GLL_API glTexCoord2fNormal3fVertex3fvSUNType g_nngllTexCoord2fNormal3fVertex3fvSUN;
NN_GLL_API glTexCoord2fColor4fNormal3fVertex3fSUNType g_nngllTexCoord2fColor4fNormal3fVertex3fSUN;
NN_GLL_API glTexCoord2fColor4fNormal3fVertex3fvSUNType g_nngllTexCoord2fColor4fNormal3fVertex3fvSUN;
NN_GLL_API glTexCoord4fColor4fNormal3fVertex4fSUNType g_nngllTexCoord4fColor4fNormal3fVertex4fSUN;
NN_GLL_API glTexCoord4fColor4fNormal3fVertex4fvSUNType g_nngllTexCoord4fColor4fNormal3fVertex4fvSUN;
NN_GLL_API glReplacementCodeuiVertex3fSUNType g_nngllReplacementCodeuiVertex3fSUN;
NN_GLL_API glReplacementCodeuiVertex3fvSUNType g_nngllReplacementCodeuiVertex3fvSUN;
NN_GLL_API glReplacementCodeuiColor4ubVertex3fSUNType g_nngllReplacementCodeuiColor4ubVertex3fSUN;
NN_GLL_API glReplacementCodeuiColor4ubVertex3fvSUNType g_nngllReplacementCodeuiColor4ubVertex3fvSUN;
NN_GLL_API glReplacementCodeuiColor3fVertex3fSUNType g_nngllReplacementCodeuiColor3fVertex3fSUN;
NN_GLL_API glReplacementCodeuiColor3fVertex3fvSUNType g_nngllReplacementCodeuiColor3fVertex3fvSUN;
NN_GLL_API glReplacementCodeuiNormal3fVertex3fSUNType g_nngllReplacementCodeuiNormal3fVertex3fSUN;
NN_GLL_API glReplacementCodeuiNormal3fVertex3fvSUNType g_nngllReplacementCodeuiNormal3fVertex3fvSUN;
NN_GLL_API glReplacementCodeuiColor4fNormal3fVertex3fSUNType g_nngllReplacementCodeuiColor4fNormal3fVertex3fSUN;
NN_GLL_API glReplacementCodeuiColor4fNormal3fVertex3fvSUNType g_nngllReplacementCodeuiColor4fNormal3fVertex3fvSUN;
NN_GLL_API glReplacementCodeuiTexCoord2fVertex3fSUNType g_nngllReplacementCodeuiTexCoord2fVertex3fSUN;
NN_GLL_API glReplacementCodeuiTexCoord2fVertex3fvSUNType g_nngllReplacementCodeuiTexCoord2fVertex3fvSUN;
NN_GLL_API glReplacementCodeuiTexCoord2fNormal3fVertex3fSUNType g_nngllReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
NN_GLL_API glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNType g_nngllReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
NN_GLL_API glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNType g_nngllReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
NN_GLL_API glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNType g_nngllReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
NN_GLL_API GLboolean nngllIsSupported_GL_SUN_vertex();
#endif // GL_SUN_vertex

#if !defined(GL_WIN_phong_shading)
#define GL_WIN_phong_shading

#define GL_PHONG_WIN 0x80EA // NOLINT
#define GL_PHONG_HINT_WIN 0x80EB // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_WIN_phong_shading();
#endif // GL_WIN_phong_shading

#if !defined(GL_WIN_specular_fog)
#define GL_WIN_specular_fog

#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC // NOLINT
NN_GLL_API GLboolean nngllIsSupported_GL_WIN_specular_fog();
#endif // GL_WIN_specular_fog

#ifdef __cplusplus
} // extern "C"
#endif

